
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a00  08002a00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a00  08002a00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a00  08002a00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08002a78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08002a78  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080a9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018fa  00000000  00000000  00028142  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000798  00000000  00000000  00029a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  0002a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017421  00000000  00000000  0002a898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070a8  00000000  00000000  00041cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086190  00000000  00000000  00048d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ceef1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ea8  00000000  00000000  000cef6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080029a0 	.word	0x080029a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080029a0 	.word	0x080029a0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	struct Packet dt = {0xAA,STARTADDRESS, MASTERADDRESS, 322};
 8000152:	4a66      	ldr	r2, [pc, #408]	; (80002ec <main+0x1a0>)
 8000154:	1d3b      	adds	r3, r7, #4
 8000156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800015a:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i = 0; i <(sizeof(struct CrcPacket)); i++){
 800015e:	2300      	movs	r3, #0
 8000160:	60fb      	str	r3, [r7, #12]
 8000162:	e007      	b.n	8000174 <main+0x28>
		UART1_rxBuffer[i] = 222;
 8000164:	4a62      	ldr	r2, [pc, #392]	; (80002f0 <main+0x1a4>)
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	4413      	add	r3, r2
 800016a:	22de      	movs	r2, #222	; 0xde
 800016c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <(sizeof(struct CrcPacket)); i++){
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	3301      	adds	r3, #1
 8000172:	60fb      	str	r3, [r7, #12]
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	2b0b      	cmp	r3, #11
 8000178:	d9f4      	bls.n	8000164 <main+0x18>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017a:	f000 fc51 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017e:	f000 f8d1 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000182:	f000 f9a7 	bl	80004d4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000186:	f000 f967 	bl	8000458 <MX_CRC_Init>
  MX_ADC1_Init();
 800018a:	f000 f927 	bl	80003dc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800018e:	f000 f977 	bl	8000480 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CRC_Init(&hcrc);
 8000192:	4858      	ldr	r0, [pc, #352]	; (80002f4 <main+0x1a8>)
 8000194:	f001 f9e5 	bl	8001562 <HAL_CRC_Init>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000198:	4b57      	ldr	r3, [pc, #348]	; (80002f8 <main+0x1ac>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	68da      	ldr	r2, [r3, #12]
 800019e:	4b56      	ldr	r3, [pc, #344]	; (80002f8 <main+0x1ac>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	f042 0220 	orr.w	r2, r2, #32
 80001a6:	60da      	str	r2, [r3, #12]
 // HAL_UART_Receive_IT (&huart3, UART1_rxBuffer, sizeof(UART1_rxBuffer));
  HAL_ADC_Start(&hadc1);
 80001a8:	4854      	ldr	r0, [pc, #336]	; (80002fc <main+0x1b0>)
 80001aa:	f000 fd95 	bl	8000cd8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80001ae:	f04f 31ff 	mov.w	r1, #4294967295
 80001b2:	4852      	ldr	r0, [pc, #328]	; (80002fc <main+0x1b0>)
 80001b4:	f000 fe3e 	bl	8000e34 <HAL_ADC_PollForConversion>
  srand(HAL_ADC_GetValue(&hadc1));
 80001b8:	4850      	ldr	r0, [pc, #320]	; (80002fc <main+0x1b0>)
 80001ba:	f000 ff35 	bl	8001028 <HAL_ADC_GetValue>
 80001be:	4603      	mov	r3, r0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f002 fb21 	bl	8002808 <srand>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80001c6:	2201      	movs	r2, #1
 80001c8:	2102      	movs	r1, #2
 80001ca:	484d      	ldr	r0, [pc, #308]	; (8000300 <main+0x1b4>)
 80001cc:	f001 fb72 	bl	80018b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	484b      	ldr	r0, [pc, #300]	; (8000304 <main+0x1b8>)
 80001d8:	f001 fb6c 	bl	80018b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e2:	4848      	ldr	r0, [pc, #288]	; (8000304 <main+0x1b8>)
 80001e4:	f001 fb66 	bl	80018b4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 switch(state){
 80001e8:	4b47      	ldr	r3, [pc, #284]	; (8000308 <main+0x1bc>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d032      	beq.n	8000256 <main+0x10a>
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	d074      	beq.n	80002de <main+0x192>
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d000      	beq.n	80001fa <main+0xae>
		  
		  break;
	  case ARMED:
		  break;
	  default: 
		  break;
 80001f8:	e076      	b.n	80002e8 <main+0x19c>
		  if(sent_flag == 0){
 80001fa:	4b44      	ldr	r3, [pc, #272]	; (800030c <main+0x1c0>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d111      	bne.n	8000226 <main+0xda>
		  HAL_Delay(1000);
 8000202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000206:	f000 fc6d 	bl	8000ae4 <HAL_Delay>
		  sendPacket(dt);
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000210:	f000 fa0a 	bl	8000628 <sendPacket>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	483a      	ldr	r0, [pc, #232]	; (8000304 <main+0x1b8>)
 800021a:	f001 fb63 	bl	80018e4 <HAL_GPIO_TogglePin>
		  sent_flag = 1;
 800021e:	4b3b      	ldr	r3, [pc, #236]	; (800030c <main+0x1c0>)
 8000220:	2201      	movs	r2, #1
 8000222:	601a      	str	r2, [r3, #0]
		  break;
 8000224:	e05d      	b.n	80002e2 <main+0x196>
		  else if((recv_flag==1)&&(recv_message.data.payload==322)){
 8000226:	4b3a      	ldr	r3, [pc, #232]	; (8000310 <main+0x1c4>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d159      	bne.n	80002e2 <main+0x196>
 800022e:	4b39      	ldr	r3, [pc, #228]	; (8000314 <main+0x1c8>)
 8000230:	88db      	ldrh	r3, [r3, #6]
 8000232:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000236:	d154      	bne.n	80002e2 <main+0x196>
			  slvCount = recv_message.data.receiverAddress - STARTADDRESS;
 8000238:	4b36      	ldr	r3, [pc, #216]	; (8000314 <main+0x1c8>)
 800023a:	885b      	ldrh	r3, [r3, #2]
 800023c:	3b64      	subs	r3, #100	; 0x64
 800023e:	4a36      	ldr	r2, [pc, #216]	; (8000318 <main+0x1cc>)
 8000240:	6013      	str	r3, [r2, #0]
			  recv_flag =  0;
 8000242:	4b33      	ldr	r3, [pc, #204]	; (8000310 <main+0x1c4>)
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
			  sent_flag = 0;
 8000248:	4b30      	ldr	r3, [pc, #192]	; (800030c <main+0x1c0>)
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
			  state = IDLE;
 800024e:	4b2e      	ldr	r3, [pc, #184]	; (8000308 <main+0x1bc>)
 8000250:	2201      	movs	r2, #1
 8000252:	601a      	str	r2, [r3, #0]
		  break;
 8000254:	e045      	b.n	80002e2 <main+0x196>
		  if(sent_flag == 0){
 8000256:	4b2d      	ldr	r3, [pc, #180]	; (800030c <main+0x1c0>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d118      	bne.n	8000290 <main+0x144>
			  dt.receiverAddress = randAddress();
 800025e:	f000 f9a5 	bl	80005ac <randAddress>
 8000262:	4603      	mov	r3, r0
 8000264:	80fb      	strh	r3, [r7, #6]
			  dt.payload = 300;
 8000266:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800026a:	817b      	strh	r3, [r7, #10]
			  sendPacket(dt);
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000272:	f000 f9d9 	bl	8000628 <sendPacket>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	4822      	ldr	r0, [pc, #136]	; (8000304 <main+0x1b8>)
 800027c:	f001 fb32 	bl	80018e4 <HAL_GPIO_TogglePin>
			  timestmp = HAL_GetTick();
 8000280:	f000 fc26 	bl	8000ad0 <HAL_GetTick>
 8000284:	4602      	mov	r2, r0
 8000286:	4b25      	ldr	r3, [pc, #148]	; (800031c <main+0x1d0>)
 8000288:	601a      	str	r2, [r3, #0]
			  sent_flag = 1;
 800028a:	4b20      	ldr	r3, [pc, #128]	; (800030c <main+0x1c0>)
 800028c:	2201      	movs	r2, #1
 800028e:	601a      	str	r2, [r3, #0]
		  if((recv_flag==1)&&(recv_message.data.receiverAddress==1)){
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <main+0x1c4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d116      	bne.n	80002c6 <main+0x17a>
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <main+0x1c8>)
 800029a:	885b      	ldrh	r3, [r3, #2]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d112      	bne.n	80002c6 <main+0x17a>
			  if((recv_message.data.senderAddress - STARTADDRESS)<sizeof(db)){
 80002a0:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <main+0x1c8>)
 80002a2:	889b      	ldrh	r3, [r3, #4]
 80002a4:	3b64      	subs	r3, #100	; 0x64
 80002a6:	2b27      	cmp	r3, #39	; 0x27
 80002a8:	d80d      	bhi.n	80002c6 <main+0x17a>
				  db[(recv_message.data.senderAddress - STARTADDRESS)]= recv_message.data.payload;
 80002aa:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <main+0x1c8>)
 80002ac:	889b      	ldrh	r3, [r3, #4]
 80002ae:	3b64      	subs	r3, #100	; 0x64
 80002b0:	4a18      	ldr	r2, [pc, #96]	; (8000314 <main+0x1c8>)
 80002b2:	88d1      	ldrh	r1, [r2, #6]
 80002b4:	4a1a      	ldr	r2, [pc, #104]	; (8000320 <main+0x1d4>)
 80002b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  HAL_Delay(50);
 80002ba:	2032      	movs	r0, #50	; 0x32
 80002bc:	f000 fc12 	bl	8000ae4 <HAL_Delay>
				  sent_flag = 0;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <main+0x1c0>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
		  if((HAL_GetTick()-timestmp)>200)
 80002c6:	f000 fc03 	bl	8000ad0 <HAL_GetTick>
 80002ca:	4602      	mov	r2, r0
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <main+0x1d0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1ad3      	subs	r3, r2, r3
 80002d2:	2bc8      	cmp	r3, #200	; 0xc8
 80002d4:	d907      	bls.n	80002e6 <main+0x19a>
			  sent_flag = 0;
 80002d6:	4b0d      	ldr	r3, [pc, #52]	; (800030c <main+0x1c0>)
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
		  break;
 80002dc:	e003      	b.n	80002e6 <main+0x19a>
		  break;
 80002de:	bf00      	nop
 80002e0:	e782      	b.n	80001e8 <main+0x9c>
		  break;
 80002e2:	bf00      	nop
 80002e4:	e780      	b.n	80001e8 <main+0x9c>
		  break;
 80002e6:	bf00      	nop
 switch(state){
 80002e8:	e77e      	b.n	80001e8 <main+0x9c>
 80002ea:	bf00      	nop
 80002ec:	080029b8 	.word	0x080029b8
 80002f0:	20000090 	.word	0x20000090
 80002f4:	20000128 	.word	0x20000128
 80002f8:	200000e8 	.word	0x200000e8
 80002fc:	20000130 	.word	0x20000130
 8000300:	40010800 	.word	0x40010800
 8000304:	40011000 	.word	0x40011000
 8000308:	2000008c 	.word	0x2000008c
 800030c:	200000cc 	.word	0x200000cc
 8000310:	200000c4 	.word	0x200000c4
 8000314:	20000160 	.word	0x20000160
 8000318:	200000d0 	.word	0x200000d0
 800031c:	200000c8 	.word	0x200000c8
 8000320:	2000009c 	.word	0x2000009c

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b094      	sub	sp, #80	; 0x50
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f002 fa60 	bl	80027f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000354:	2301      	movs	r3, #1
 8000356:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000370:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000374:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037a:	4618      	mov	r0, r3
 800037c:	f001 facc 	bl	8001918 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000386:	f000 f973 	bl	8000670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2302      	movs	r3, #2
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	2102      	movs	r1, #2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fd36 	bl	8001e18 <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003b2:	f000 f95d 	bl	8000670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003b6:	2302      	movs	r3, #2
 80003b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fec4 	bl	8002150 <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003ce:	f000 f94f 	bl	8000670 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3750      	adds	r7, #80	; 0x50
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_ADC1_Init+0x74>)
 80003ee:	4a19      	ldr	r2, [pc, #100]	; (8000454 <MX_ADC1_Init+0x78>)
 80003f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <MX_ADC1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_ADC1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_ADC1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_ADC1_Init+0x74>)
 8000406:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800040a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <MX_ADC1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_ADC1_Init+0x74>)
 8000414:	2201      	movs	r2, #1
 8000416:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000418:	480d      	ldr	r0, [pc, #52]	; (8000450 <MX_ADC1_Init+0x74>)
 800041a:	f000 fb85 	bl	8000b28 <HAL_ADC_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000424:	f000 f924 	bl	8000670 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000428:	2309      	movs	r3, #9
 800042a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800042c:	2301      	movs	r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_ADC1_Init+0x74>)
 800043a:	f000 fe01 	bl	8001040 <HAL_ADC_ConfigChannel>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000444:	f000 f914 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000130 	.word	0x20000130
 8000454:	40012400 	.word	0x40012400

08000458 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_CRC_Init+0x20>)
 800045e:	4a07      	ldr	r2, [pc, #28]	; (800047c <MX_CRC_Init+0x24>)
 8000460:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_CRC_Init+0x20>)
 8000464:	f001 f87d 	bl	8001562 <HAL_CRC_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800046e:	f000 f8ff 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000128 	.word	0x20000128
 800047c:	40023000 	.word	0x40023000

08000480 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_USART3_UART_Init+0x4c>)
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <MX_USART3_UART_Init+0x50>)
 8000488:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_USART3_UART_Init+0x4c>)
 800048c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000490:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_USART3_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_USART3_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_USART3_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_USART3_UART_Init+0x4c>)
 80004a6:	220c      	movs	r2, #12
 80004a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_USART3_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_USART3_UART_Init+0x4c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_USART3_UART_Init+0x4c>)
 80004b8:	f001 ffbc 	bl	8002434 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004c2:	f000 f8d5 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200000e8 	.word	0x200000e8
 80004d0:	40004800 	.word	0x40004800

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e8:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <MX_GPIO_Init+0xcc>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a2c      	ldr	r2, [pc, #176]	; (80005a0 <MX_GPIO_Init+0xcc>)
 80004ee:	f043 0310 	orr.w	r3, r3, #16
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <MX_GPIO_Init+0xcc>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000500:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <MX_GPIO_Init+0xcc>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <MX_GPIO_Init+0xcc>)
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <MX_GPIO_Init+0xcc>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0320 	and.w	r3, r3, #32
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000518:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <MX_GPIO_Init+0xcc>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <MX_GPIO_Init+0xcc>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <MX_GPIO_Init+0xcc>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0304 	and.w	r3, r3, #4
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_GPIO_Init+0xcc>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a1a      	ldr	r2, [pc, #104]	; (80005a0 <MX_GPIO_Init+0xcc>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_GPIO_Init+0xcc>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0308 	and.w	r3, r3, #8
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800054e:	4815      	ldr	r0, [pc, #84]	; (80005a4 <MX_GPIO_Init+0xd0>)
 8000550:	f001 f9b0 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2102      	movs	r1, #2
 8000558:	4813      	ldr	r0, [pc, #76]	; (80005a8 <MX_GPIO_Init+0xd4>)
 800055a:	f001 f9ab 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800055e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2302      	movs	r3, #2
 800056e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	480b      	ldr	r0, [pc, #44]	; (80005a4 <MX_GPIO_Init+0xd0>)
 8000578:	f001 f842 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800057c:	2302      	movs	r3, #2
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2302      	movs	r3, #2
 800058a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4619      	mov	r1, r3
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_GPIO_Init+0xd4>)
 8000594:	f001 f834 	bl	8001600 <HAL_GPIO_Init>

}
 8000598:	bf00      	nop
 800059a:	3720      	adds	r7, #32
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40011000 	.word	0x40011000
 80005a8:	40010800 	.word	0x40010800

080005ac <randAddress>:

/* USER CODE BEGIN 4 */

uint16_t randAddress(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
	int r = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
	int lower = STARTADDRESS;
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	60bb      	str	r3, [r7, #8]
	int upper = STARTADDRESS + slvCount;
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <randAddress+0x40>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3364      	adds	r3, #100	; 0x64
 80005c0:	607b      	str	r3, [r7, #4]
	r =  (rand() % (upper - lower + 1)) + lower;
 80005c2:	f002 f945 	bl	8002850 <rand>
 80005c6:	4602      	mov	r2, r0
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	1acb      	subs	r3, r1, r3
 80005ce:	3301      	adds	r3, #1
 80005d0:	fb92 f1f3 	sdiv	r1, r2, r3
 80005d4:	fb03 f301 	mul.w	r3, r3, r1
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	4413      	add	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
	return (uint16_t) r;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	b29b      	uxth	r3, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000d0 	.word	0x200000d0

080005f0 <crcCheck>:
int crcCheck(struct CrcPacket p){
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b087      	sub	sp, #28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int res = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
	if(p.crcVal==HAL_CRC_Calculate(&hcrc, (uint32_t*)&p.data, sizeof(p.data)/4)){
 8000600:	68fc      	ldr	r4, [r7, #12]
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2202      	movs	r2, #2
 8000606:	4619      	mov	r1, r3
 8000608:	4806      	ldr	r0, [pc, #24]	; (8000624 <crcCheck+0x34>)
 800060a:	f000 ffc6 	bl	800159a <HAL_CRC_Calculate>
 800060e:	4603      	mov	r3, r0
 8000610:	429c      	cmp	r4, r3
 8000612:	d101      	bne.n	8000618 <crcCheck+0x28>
		res = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
	}
	return res;
 8000618:	697b      	ldr	r3, [r7, #20]
}
 800061a:	4618      	mov	r0, r3
 800061c:	371c      	adds	r7, #28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd90      	pop	{r4, r7, pc}
 8000622:	bf00      	nop
 8000624:	20000128 	.word	0x20000128

08000628 <sendPacket>:
void sendPacket(struct Packet p){
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	463b      	mov	r3, r7
 8000630:	e883 0003 	stmia.w	r3, {r0, r1}
	struct CrcPacket msg = {p, HAL_CRC_Calculate(&hcrc, (uint32_t*) &p, sizeof(p)/4)};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	463a      	mov	r2, r7
 800063a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800063e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000642:	463b      	mov	r3, r7
 8000644:	2202      	movs	r2, #2
 8000646:	4619      	mov	r1, r3
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <sendPacket+0x40>)
 800064a:	f000 ffa6 	bl	800159a <HAL_CRC_Calculate>
 800064e:	4603      	mov	r3, r0
 8000650:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart3,(uint8_t*) &msg , sizeof(msg), 100);
 8000652:	f107 010c 	add.w	r1, r7, #12
 8000656:	2364      	movs	r3, #100	; 0x64
 8000658:	220c      	movs	r2, #12
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <sendPacket+0x44>)
 800065c:	f001 ff37 	bl	80024ce <HAL_UART_Transmit>
}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000128 	.word	0x20000128
 800066c:	200000e8 	.word	0x200000e8

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <HAL_MspInit+0x5c>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <HAL_MspInit+0x5c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_MspInit+0x5c>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x5c>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_MspInit+0x5c>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x5c>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_MspInit+0x60>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_MspInit+0x60>)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010000 	.word	0x40010000

080006e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <HAL_ADC_MspInit+0x6c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d121      	bne.n	8000744 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <HAL_ADC_MspInit+0x70>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <HAL_ADC_MspInit+0x70>)
 8000706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <HAL_ADC_MspInit+0x70>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_ADC_MspInit+0x70>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <HAL_ADC_MspInit+0x70>)
 800071e:	f043 0308 	orr.w	r3, r3, #8
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_ADC_MspInit+0x70>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0308 	and.w	r3, r3, #8
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000734:	2303      	movs	r3, #3
 8000736:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <HAL_ADC_MspInit+0x74>)
 8000740:	f000 ff5e 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40012400 	.word	0x40012400
 8000750:	40021000 	.word	0x40021000
 8000754:	40010c00 	.word	0x40010c00

08000758 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <HAL_CRC_MspInit+0x34>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d10b      	bne.n	8000782 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_CRC_MspInit+0x38>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_CRC_MspInit+0x38>)
 8000770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_CRC_MspInit+0x38>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40023000 	.word	0x40023000
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a20      	ldr	r2, [pc, #128]	; (8000830 <HAL_UART_MspInit+0x9c>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d139      	bne.n	8000828 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007be:	61d3      	str	r3, [r2, #28]
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a18      	ldr	r2, [pc, #96]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0308 	and.w	r3, r3, #8
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	4619      	mov	r1, r3
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <HAL_UART_MspInit+0xa4>)
 80007fa:	f000 ff01 	bl	8001600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <HAL_UART_MspInit+0xa4>)
 8000814:	f000 fef4 	bl	8001600 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2027      	movs	r0, #39	; 0x27
 800081e:	f000 fe6a 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000822:	2027      	movs	r0, #39	; 0x27
 8000824:	f000 fe83 	bl	800152e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40004800 	.word	0x40004800
 8000834:	40021000 	.word	0x40021000
 8000838:	40010c00 	.word	0x40010c00

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <HardFault_Handler+0x4>

0800084e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <MemManage_Handler+0x4>

08000854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <BusFault_Handler+0x4>

0800085a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <UsageFault_Handler+0x4>

08000860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 f910 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	 /* USER CODE BEGIN USART3_IRQn 0 */
	uint8_t rbyte;
		if((HAL_GetTick() - timestamp)>100)
 8000896:	f000 f91b 	bl	8000ad0 <HAL_GetTick>
 800089a:	4602      	mov	r2, r0
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <USART3_IRQHandler+0xa8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	2b64      	cmp	r3, #100	; 0x64
 80008a4:	d93e      	bls.n	8000924 <USART3_IRQHandler+0x94>
			recv_cnt = 0;
 80008a6:	4b25      	ldr	r3, [pc, #148]	; (800093c <USART3_IRQHandler+0xac>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
		//Receive char while  Status Register for RX_Not_Empty flag is true.
		while (USART3->SR & UART_IT_RXNE) {
 80008ac:	e03a      	b.n	8000924 <USART3_IRQHandler+0x94>
			 rbyte = huart3.Instance->DR;
 80008ae:	4b24      	ldr	r3, [pc, #144]	; (8000940 <USART3_IRQHandler+0xb0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	71fb      	strb	r3, [r7, #7]
			 UART1_rxBuffer[recv_cnt] = rbyte;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <USART3_IRQHandler+0xac>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4922      	ldr	r1, [pc, #136]	; (8000944 <USART3_IRQHandler+0xb4>)
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	54ca      	strb	r2, [r1, r3]

			 //
			 if(recv_cnt != 0 || rbyte == 0xAA)
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <USART3_IRQHandler+0xac>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <USART3_IRQHandler+0x3e>
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2baa      	cmp	r3, #170	; 0xaa
 80008cc:	d104      	bne.n	80008d8 <USART3_IRQHandler+0x48>
					 recv_cnt++;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <USART3_IRQHandler+0xac>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3301      	adds	r3, #1
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <USART3_IRQHandler+0xac>)
 80008d6:	6013      	str	r3, [r2, #0]

			 if(recv_cnt >= FRAMELENGTH){
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <USART3_IRQHandler+0xac>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b0b      	cmp	r3, #11
 80008de:	d91c      	bls.n	800091a <USART3_IRQHandler+0x8a>
				 recvPacket = (struct CrcPacket*)UART1_rxBuffer;
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <USART3_IRQHandler+0xb8>)
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <USART3_IRQHandler+0xb4>)
 80008e4:	601a      	str	r2, [r3, #0]
				 recv_cnt = 0;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <USART3_IRQHandler+0xac>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]

				 if(crcCheck(*recvPacket) == 1 && recvPacket->data.senderAddress != 1){
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <USART3_IRQHandler+0xb8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008f4:	f7ff fe7c 	bl	80005f0 <crcCheck>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10d      	bne.n	800091a <USART3_IRQHandler+0x8a>
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <USART3_IRQHandler+0xb8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	889b      	ldrh	r3, [r3, #4]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d008      	beq.n	800091a <USART3_IRQHandler+0x8a>
					recv_message = (*recvPacket);
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <USART3_IRQHandler+0xb8>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <USART3_IRQHandler+0xbc>)
 800090e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000910:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				 	recv_flag = 1;
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <USART3_IRQHandler+0xc0>)
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
				 	}
			 }
			 timestamp = HAL_GetTick();
 800091a:	f000 f8d9 	bl	8000ad0 <HAL_GetTick>
 800091e:	4602      	mov	r2, r0
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <USART3_IRQHandler+0xa8>)
 8000922:	601a      	str	r2, [r3, #0]
		while (USART3->SR & UART_IT_RXNE) {
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <USART3_IRQHandler+0xc4>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <USART3_IRQHandler+0xc8>)
 800092a:	4013      	ands	r3, r2
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1be      	bne.n	80008ae <USART3_IRQHandler+0x1e>
		 }
		 return;
 8000930:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000d4 	.word	0x200000d4
 800093c:	200000d8 	.word	0x200000d8
 8000940:	200000e8 	.word	0x200000e8
 8000944:	20000090 	.word	0x20000090
 8000948:	2000016c 	.word	0x2000016c
 800094c:	20000160 	.word	0x20000160
 8000950:	200000c4 	.word	0x200000c4
 8000954:	40004800 	.word	0x40004800
 8000958:	10000020 	.word	0x10000020

0800095c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000964:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <_sbrk+0x5c>)
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <_sbrk+0x60>)
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <_sbrk+0x64>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <_sbrk+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	429a      	cmp	r2, r3
 800098a:	d207      	bcs.n	800099c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800098c:	f001 ff0a 	bl	80027a4 <__errno>
 8000990:	4602      	mov	r2, r0
 8000992:	230c      	movs	r3, #12
 8000994:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	e009      	b.n	80009b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <_sbrk+0x64>)
 80009ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ae:	68fb      	ldr	r3, [r7, #12]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20005000 	.word	0x20005000
 80009bc:	00000400 	.word	0x00000400
 80009c0:	200000dc 	.word	0x200000dc
 80009c4:	20000178 	.word	0x20000178

080009c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009d6:	e003      	b.n	80009e0 <LoopCopyDataInit>

080009d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009de:	3104      	adds	r1, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009e0:	480a      	ldr	r0, [pc, #40]	; (8000a0c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009e8:	d3f6      	bcc.n	80009d8 <CopyDataInit>
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009ec:	e002      	b.n	80009f4 <LoopFillZerobss>

080009ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009f0:	f842 3b04 	str.w	r3, [r2], #4

080009f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009f8:	d3f9      	bcc.n	80009ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009fa:	f7ff ffe5 	bl	80009c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fe:	f001 fed7 	bl	80027b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a02:	f7ff fba3 	bl	800014c <main>
  bx lr
 8000a06:	4770      	bx	lr
  ldr r3, =_sidata
 8000a08:	08002a08 	.word	0x08002a08
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a10:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000a14:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000a18:	20000178 	.word	0x20000178

08000a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC1_2_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_Init+0x28>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_Init+0x28>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 fd55 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f808 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff fe1e 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fd6d 	bl	800154a <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 fd35 	bl	80014f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x20>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a03      	ldr	r2, [pc, #12]	; (8000acc <HAL_IncTick+0x20>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000170 	.word	0x20000170

08000ad0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <HAL_GetTick+0x10>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000170 	.word	0x20000170

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff fff0 	bl	8000ad0 <HAL_GetTick>
 8000af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_Delay+0x40>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0a:	bf00      	nop
 8000b0c:	f7ff ffe0 	bl	8000ad0 <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000008 	.word	0x20000008

08000b28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e0be      	b.n	8000cc8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d109      	bne.n	8000b6c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff fdba 	bl	80006e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fbb1 	bl	80012d4 <ADC_ConversionStop_Disable>
 8000b72:	4603      	mov	r3, r0
 8000b74:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8099 	bne.w	8000cb6 <HAL_ADC_Init+0x18e>
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8095 	bne.w	8000cb6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b94:	f023 0302 	bic.w	r3, r3, #2
 8000b98:	f043 0202 	orr.w	r2, r3, #2
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ba8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7b1b      	ldrb	r3, [r3, #12]
 8000bae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bb0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bc0:	d003      	beq.n	8000bca <HAL_ADC_Init+0xa2>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d102      	bne.n	8000bd0 <HAL_ADC_Init+0xa8>
 8000bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bce:	e000      	b.n	8000bd2 <HAL_ADC_Init+0xaa>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7d1b      	ldrb	r3, [r3, #20]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d119      	bne.n	8000c14 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7b1b      	ldrb	r3, [r3, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d109      	bne.n	8000bfc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	035a      	lsls	r2, r3, #13
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	e00b      	b.n	8000c14 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c00:	f043 0220 	orr.w	r2, r3, #32
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0c:	f043 0201 	orr.w	r2, r3, #1
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <HAL_ADC_Init+0x1a8>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	68b9      	ldr	r1, [r7, #8]
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c44:	d003      	beq.n	8000c4e <HAL_ADC_Init+0x126>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d104      	bne.n	8000c58 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	051b      	lsls	r3, r3, #20
 8000c56:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_ADC_Init+0x1ac>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d10b      	bne.n	8000c94 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c86:	f023 0303 	bic.w	r3, r3, #3
 8000c8a:	f043 0201 	orr.w	r2, r3, #1
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c92:	e018      	b.n	8000cc6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c98:	f023 0312 	bic.w	r3, r3, #18
 8000c9c:	f043 0210 	orr.w	r2, r3, #16
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	f043 0201 	orr.w	r2, r3, #1
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb4:	e007      	b.n	8000cc6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cba:	f043 0210 	orr.w	r2, r3, #16
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	ffe1f7fd 	.word	0xffe1f7fd
 8000cd4:	ff1f0efe 	.word	0xff1f0efe

08000cd8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <HAL_ADC_Start+0x1a>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e098      	b.n	8000e24 <HAL_ADC_Start+0x14c>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 fa98 	bl	8001230 <ADC_Enable>
 8000d00:	4603      	mov	r3, r0
 8000d02:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f040 8087 	bne.w	8000e1a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d14:	f023 0301 	bic.w	r3, r3, #1
 8000d18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a41      	ldr	r2, [pc, #260]	; (8000e2c <HAL_ADC_Start+0x154>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d105      	bne.n	8000d36 <HAL_ADC_Start+0x5e>
 8000d2a:	4b41      	ldr	r3, [pc, #260]	; (8000e30 <HAL_ADC_Start+0x158>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d115      	bne.n	8000d62 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d026      	beq.n	8000d9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d60:	e01d      	b.n	8000d9e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a2f      	ldr	r2, [pc, #188]	; (8000e30 <HAL_ADC_Start+0x158>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d004      	beq.n	8000d82 <HAL_ADC_Start+0xaa>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a2b      	ldr	r2, [pc, #172]	; (8000e2c <HAL_ADC_Start+0x154>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10d      	bne.n	8000d9e <HAL_ADC_Start+0xc6>
 8000d82:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <HAL_ADC_Start+0x158>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d007      	beq.n	8000d9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d006      	beq.n	8000db8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	f023 0206 	bic.w	r2, r3, #6
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000db6:	e002      	b.n	8000dbe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f06f 0202 	mvn.w	r2, #2
 8000dce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dda:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dde:	d113      	bne.n	8000e08 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000de4:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <HAL_ADC_Start+0x154>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d105      	bne.n	8000df6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_ADC_Start+0x158>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d108      	bne.n	8000e08 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	e00c      	b.n	8000e22 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	e003      	b.n	8000e22 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40012800 	.word	0x40012800
 8000e30:	40012400 	.word	0x40012400

08000e34 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e4a:	f7ff fe41 	bl	8000ad0 <HAL_GetTick>
 8000e4e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00b      	beq.n	8000e76 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	f043 0220 	orr.w	r2, r3, #32
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0c8      	b.n	8001008 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d12a      	bne.n	8000eda <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d123      	bne.n	8000eda <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e92:	e01a      	b.n	8000eca <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9a:	d016      	beq.n	8000eca <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <HAL_ADC_PollForConversion+0x7e>
 8000ea2:	f7ff fe15 	bl	8000ad0 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d20b      	bcs.n	8000eca <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	f043 0204 	orr.w	r2, r3, #4
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e09e      	b.n	8001008 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0dd      	beq.n	8000e94 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ed8:	e06c      	b.n	8000fb4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000eda:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <HAL_ADC_PollForConversion+0x1dc>)
 8000edc:	681c      	ldr	r4, [r3, #0]
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f001 f9ec 	bl	80022bc <HAL_RCCEx_GetPeriphCLKFreq>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6919      	ldr	r1, [r3, #16]
 8000ef0:	4b48      	ldr	r3, [pc, #288]	; (8001014 <HAL_ADC_PollForConversion+0x1e0>)
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d118      	bne.n	8000f2a <HAL_ADC_PollForConversion+0xf6>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68d9      	ldr	r1, [r3, #12]
 8000efe:	4b46      	ldr	r3, [pc, #280]	; (8001018 <HAL_ADC_PollForConversion+0x1e4>)
 8000f00:	400b      	ands	r3, r1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d111      	bne.n	8000f2a <HAL_ADC_PollForConversion+0xf6>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6919      	ldr	r1, [r3, #16]
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <HAL_ADC_PollForConversion+0x1e8>)
 8000f0e:	400b      	ands	r3, r1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d108      	bne.n	8000f26 <HAL_ADC_PollForConversion+0xf2>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68d9      	ldr	r1, [r3, #12]
 8000f1a:	4b41      	ldr	r3, [pc, #260]	; (8001020 <HAL_ADC_PollForConversion+0x1ec>)
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_ADC_PollForConversion+0xf2>
 8000f22:	2314      	movs	r3, #20
 8000f24:	e020      	b.n	8000f68 <HAL_ADC_PollForConversion+0x134>
 8000f26:	2329      	movs	r3, #41	; 0x29
 8000f28:	e01e      	b.n	8000f68 <HAL_ADC_PollForConversion+0x134>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6919      	ldr	r1, [r3, #16]
 8000f30:	4b3a      	ldr	r3, [pc, #232]	; (800101c <HAL_ADC_PollForConversion+0x1e8>)
 8000f32:	400b      	ands	r3, r1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d106      	bne.n	8000f46 <HAL_ADC_PollForConversion+0x112>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68d9      	ldr	r1, [r3, #12]
 8000f3e:	4b38      	ldr	r3, [pc, #224]	; (8001020 <HAL_ADC_PollForConversion+0x1ec>)
 8000f40:	400b      	ands	r3, r1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00d      	beq.n	8000f62 <HAL_ADC_PollForConversion+0x12e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6919      	ldr	r1, [r3, #16]
 8000f4c:	4b35      	ldr	r3, [pc, #212]	; (8001024 <HAL_ADC_PollForConversion+0x1f0>)
 8000f4e:	400b      	ands	r3, r1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d108      	bne.n	8000f66 <HAL_ADC_PollForConversion+0x132>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68d9      	ldr	r1, [r3, #12]
 8000f5a:	4b32      	ldr	r3, [pc, #200]	; (8001024 <HAL_ADC_PollForConversion+0x1f0>)
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_PollForConversion+0x132>
 8000f62:	2354      	movs	r3, #84	; 0x54
 8000f64:	e000      	b.n	8000f68 <HAL_ADC_PollForConversion+0x134>
 8000f66:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f6e:	e01d      	b.n	8000fac <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f76:	d016      	beq.n	8000fa6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d007      	beq.n	8000f8e <HAL_ADC_PollForConversion+0x15a>
 8000f7e:	f7ff fda7 	bl	8000ad0 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d20b      	bcs.n	8000fa6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	f043 0204 	orr.w	r2, r3, #4
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e030      	b.n	8001008 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8dd      	bhi.n	8000f70 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f06f 0212 	mvn.w	r2, #18
 8000fbc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fd4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fd8:	d115      	bne.n	8001006 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d111      	bne.n	8001006 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d105      	bne.n	8001006 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	f043 0201 	orr.w	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	371c      	adds	r7, #28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	24924924 	.word	0x24924924
 8001018:	00924924 	.word	0x00924924
 800101c:	12492492 	.word	0x12492492
 8001020:	00492492 	.word	0x00492492
 8001024:	00249249 	.word	0x00249249

08001028 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <HAL_ADC_ConfigChannel+0x20>
 800105c:	2302      	movs	r3, #2
 800105e:	e0dc      	b.n	800121a <HAL_ADC_ConfigChannel+0x1da>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b06      	cmp	r3, #6
 800106e:	d81c      	bhi.n	80010aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	3b05      	subs	r3, #5
 8001082:	221f      	movs	r2, #31
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	4019      	ands	r1, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	3b05      	subs	r3, #5
 800109c:	fa00 f203 	lsl.w	r2, r0, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34
 80010a8:	e03c      	b.n	8001124 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b0c      	cmp	r3, #12
 80010b0:	d81c      	bhi.n	80010ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	3b23      	subs	r3, #35	; 0x23
 80010c4:	221f      	movs	r2, #31
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	4019      	ands	r1, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	3b23      	subs	r3, #35	; 0x23
 80010de:	fa00 f203 	lsl.w	r2, r0, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ea:	e01b      	b.n	8001124 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	3b41      	subs	r3, #65	; 0x41
 80010fe:	221f      	movs	r2, #31
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	4019      	ands	r1, r3
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	3b41      	subs	r3, #65	; 0x41
 8001118:	fa00 f203 	lsl.w	r2, r0, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b09      	cmp	r3, #9
 800112a:	d91c      	bls.n	8001166 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68d9      	ldr	r1, [r3, #12]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	3b1e      	subs	r3, #30
 800113e:	2207      	movs	r2, #7
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	4019      	ands	r1, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6898      	ldr	r0, [r3, #8]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	3b1e      	subs	r3, #30
 8001158:	fa00 f203 	lsl.w	r2, r0, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	e019      	b.n	800119a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6919      	ldr	r1, [r3, #16]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	2207      	movs	r2, #7
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	4019      	ands	r1, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	6898      	ldr	r0, [r3, #8]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	fa00 f203 	lsl.w	r2, r0, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d003      	beq.n	80011aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011a6:	2b11      	cmp	r3, #17
 80011a8:	d132      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_ADC_ConfigChannel+0x1e4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d125      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d126      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011d0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b10      	cmp	r3, #16
 80011d8:	d11a      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_ADC_ConfigChannel+0x1e8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <HAL_ADC_ConfigChannel+0x1ec>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	0c9a      	lsrs	r2, r3, #18
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f0:	e002      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f9      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x1b2>
 80011fe:	e007      	b.n	8001210 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	f043 0220 	orr.w	r2, r3, #32
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40012400 	.word	0x40012400
 8001228:	20000000 	.word	0x20000000
 800122c:	431bde83 	.word	0x431bde83

08001230 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b01      	cmp	r3, #1
 800124c:	d039      	beq.n	80012c2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f042 0201 	orr.w	r2, r2, #1
 800125c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <ADC_Enable+0x9c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <ADC_Enable+0xa0>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	0c9b      	lsrs	r3, r3, #18
 800126a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800126c:	e002      	b.n	8001274 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3b01      	subs	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f9      	bne.n	800126e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800127a:	f7ff fc29 	bl	8000ad0 <HAL_GetTick>
 800127e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001280:	e018      	b.n	80012b4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001282:	f7ff fc25 	bl	8000ad0 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d911      	bls.n	80012b4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f043 0210 	orr.w	r2, r3, #16
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a0:	f043 0201 	orr.w	r2, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e007      	b.n	80012c4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d1df      	bne.n	8001282 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000000 	.word	0x20000000
 80012d0:	431bde83 	.word	0x431bde83

080012d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d127      	bne.n	800133e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0201 	bic.w	r2, r2, #1
 80012fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012fe:	f7ff fbe7 	bl	8000ad0 <HAL_GetTick>
 8001302:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001304:	e014      	b.n	8001330 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001306:	f7ff fbe3 	bl	8000ad0 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d90d      	bls.n	8001330 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	f043 0210 	orr.w	r2, r3, #16
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	f043 0201 	orr.w	r2, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e007      	b.n	8001340 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b01      	cmp	r3, #1
 800133c:	d0e3      	beq.n	8001306 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4906      	ldr	r1, [pc, #24]	; (80013e0 <__NVIC_EnableIRQ+0x34>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7ff ff90 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff2d 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff42 	bl	8001390 <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff90 	bl	8001438 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5f 	bl	80013e4 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff35 	bl	80013ac <__NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffa2 	bl	800149c <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e00e      	b.n	8001592 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	795b      	ldrb	r3, [r3, #5]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d105      	bne.n	800158a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff f8e7 	bl	8000758 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800159a:	b480      	push	{r7}
 800159c:	b087      	sub	sp, #28
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2202      	movs	r2, #2
 80015ae:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e00a      	b.n	80015dc <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	441a      	add	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3f0      	bcc.n	80015c6 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80015f2:	693b      	ldr	r3, [r7, #16]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b08b      	sub	sp, #44	; 0x2c
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001612:	e127      	b.n	8001864 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001614:	2201      	movs	r2, #1
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	429a      	cmp	r2, r3
 800162e:	f040 8116 	bne.w	800185e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b12      	cmp	r3, #18
 8001638:	d034      	beq.n	80016a4 <HAL_GPIO_Init+0xa4>
 800163a:	2b12      	cmp	r3, #18
 800163c:	d80d      	bhi.n	800165a <HAL_GPIO_Init+0x5a>
 800163e:	2b02      	cmp	r3, #2
 8001640:	d02b      	beq.n	800169a <HAL_GPIO_Init+0x9a>
 8001642:	2b02      	cmp	r3, #2
 8001644:	d804      	bhi.n	8001650 <HAL_GPIO_Init+0x50>
 8001646:	2b00      	cmp	r3, #0
 8001648:	d031      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 800164a:	2b01      	cmp	r3, #1
 800164c:	d01c      	beq.n	8001688 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800164e:	e048      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001650:	2b03      	cmp	r3, #3
 8001652:	d043      	beq.n	80016dc <HAL_GPIO_Init+0xdc>
 8001654:	2b11      	cmp	r3, #17
 8001656:	d01b      	beq.n	8001690 <HAL_GPIO_Init+0x90>
          break;
 8001658:	e043      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800165a:	4a89      	ldr	r2, [pc, #548]	; (8001880 <HAL_GPIO_Init+0x280>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d026      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 8001660:	4a87      	ldr	r2, [pc, #540]	; (8001880 <HAL_GPIO_Init+0x280>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d806      	bhi.n	8001674 <HAL_GPIO_Init+0x74>
 8001666:	4a87      	ldr	r2, [pc, #540]	; (8001884 <HAL_GPIO_Init+0x284>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d020      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 800166c:	4a86      	ldr	r2, [pc, #536]	; (8001888 <HAL_GPIO_Init+0x288>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d01d      	beq.n	80016ae <HAL_GPIO_Init+0xae>
          break;
 8001672:	e036      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001674:	4a85      	ldr	r2, [pc, #532]	; (800188c <HAL_GPIO_Init+0x28c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d019      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 800167a:	4a85      	ldr	r2, [pc, #532]	; (8001890 <HAL_GPIO_Init+0x290>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d016      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 8001680:	4a84      	ldr	r2, [pc, #528]	; (8001894 <HAL_GPIO_Init+0x294>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0xae>
          break;
 8001686:	e02c      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	623b      	str	r3, [r7, #32]
          break;
 800168e:	e028      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	3304      	adds	r3, #4
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e023      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	3308      	adds	r3, #8
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e01e      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	330c      	adds	r3, #12
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e019      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016b6:	2304      	movs	r3, #4
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e012      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c4:	2308      	movs	r3, #8
 80016c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	611a      	str	r2, [r3, #16]
          break;
 80016ce:	e008      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d0:	2308      	movs	r3, #8
 80016d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	615a      	str	r2, [r3, #20]
          break;
 80016da:	e002      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2bff      	cmp	r3, #255	; 0xff
 80016e6:	d801      	bhi.n	80016ec <HAL_GPIO_Init+0xec>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	e001      	b.n	80016f0 <HAL_GPIO_Init+0xf0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3304      	adds	r3, #4
 80016f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2bff      	cmp	r3, #255	; 0xff
 80016f6:	d802      	bhi.n	80016fe <HAL_GPIO_Init+0xfe>
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x104>
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	3b08      	subs	r3, #8
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	210f      	movs	r1, #15
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	401a      	ands	r2, r3
 8001716:	6a39      	ldr	r1, [r7, #32]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	431a      	orrs	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8096 	beq.w	800185e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001732:	4b59      	ldr	r3, [pc, #356]	; (8001898 <HAL_GPIO_Init+0x298>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	4a58      	ldr	r2, [pc, #352]	; (8001898 <HAL_GPIO_Init+0x298>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6193      	str	r3, [r2, #24]
 800173e:	4b56      	ldr	r3, [pc, #344]	; (8001898 <HAL_GPIO_Init+0x298>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800174a:	4a54      	ldr	r2, [pc, #336]	; (800189c <HAL_GPIO_Init+0x29c>)
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4013      	ands	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4b      	ldr	r2, [pc, #300]	; (80018a0 <HAL_GPIO_Init+0x2a0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0x19e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4a      	ldr	r2, [pc, #296]	; (80018a4 <HAL_GPIO_Init+0x2a4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00d      	beq.n	800179a <HAL_GPIO_Init+0x19a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a49      	ldr	r2, [pc, #292]	; (80018a8 <HAL_GPIO_Init+0x2a8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x196>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a48      	ldr	r2, [pc, #288]	; (80018ac <HAL_GPIO_Init+0x2ac>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_GPIO_Init+0x192>
 800178e:	2303      	movs	r3, #3
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 8001792:	2304      	movs	r3, #4
 8001794:	e004      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 800179e:	2300      	movs	r3, #0
 80017a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a2:	f002 0203 	and.w	r2, r2, #3
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	4093      	lsls	r3, r2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017b0:	493a      	ldr	r1, [pc, #232]	; (800189c <HAL_GPIO_Init+0x29c>)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ca:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4938      	ldr	r1, [pc, #224]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
 80017d6:	e006      	b.n	80017e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d8:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	43db      	mvns	r3, r3
 80017e0:	4933      	ldr	r1, [pc, #204]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f2:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	492e      	ldr	r1, [pc, #184]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
 80017fe:	e006      	b.n	800180e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	43db      	mvns	r3, r3
 8001808:	4929      	ldr	r1, [pc, #164]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800180a:	4013      	ands	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	4924      	ldr	r1, [pc, #144]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
 8001826:	e006      	b.n	8001836 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	43db      	mvns	r3, r3
 8001830:	491f      	ldr	r1, [pc, #124]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001832:	4013      	ands	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	491a      	ldr	r1, [pc, #104]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	60cb      	str	r3, [r1, #12]
 800184e:	e006      	b.n	800185e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	43db      	mvns	r3, r3
 8001858:	4915      	ldr	r1, [pc, #84]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800185a:	4013      	ands	r3, r2
 800185c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	3301      	adds	r3, #1
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	f47f aed0 	bne.w	8001614 <HAL_GPIO_Init+0x14>
  }
}
 8001874:	bf00      	nop
 8001876:	372c      	adds	r7, #44	; 0x2c
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	10210000 	.word	0x10210000
 8001884:	10110000 	.word	0x10110000
 8001888:	10120000 	.word	0x10120000
 800188c:	10310000 	.word	0x10310000
 8001890:	10320000 	.word	0x10320000
 8001894:	10220000 	.word	0x10220000
 8001898:	40021000 	.word	0x40021000
 800189c:	40010000 	.word	0x40010000
 80018a0:	40010800 	.word	0x40010800
 80018a4:	40010c00 	.word	0x40010c00
 80018a8:	40011000 	.word	0x40011000
 80018ac:	40011400 	.word	0x40011400
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
 80018c0:	4613      	mov	r3, r2
 80018c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d0:	e003      	b.n	80018da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	041a      	lsls	r2, r3, #16
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	611a      	str	r2, [r3, #16]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4013      	ands	r3, r2
 80018fc:	041a      	lsls	r2, r3, #16
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43d9      	mvns	r1, r3
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	400b      	ands	r3, r1
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	611a      	str	r2, [r3, #16]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
	...

08001918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e26c      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8087 	beq.w	8001a46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001938:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b04      	cmp	r3, #4
 8001942:	d00c      	beq.n	800195e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001944:	4b8f      	ldr	r3, [pc, #572]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d112      	bne.n	8001976 <HAL_RCC_OscConfig+0x5e>
 8001950:	4b8c      	ldr	r3, [pc, #560]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195c:	d10b      	bne.n	8001976 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195e:	4b89      	ldr	r3, [pc, #548]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d06c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x12c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d168      	bne.n	8001a44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e246      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x76>
 8001980:	4b80      	ldr	r3, [pc, #512]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a7f      	ldr	r2, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e02e      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x98>
 8001996:	4b7b      	ldr	r3, [pc, #492]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a7a      	ldr	r2, [pc, #488]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b78      	ldr	r3, [pc, #480]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a77      	ldr	r2, [pc, #476]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e01d      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0xbc>
 80019ba:	4b72      	ldr	r3, [pc, #456]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a71      	ldr	r2, [pc, #452]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e00b      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 80019d4:	4b6b      	ldr	r3, [pc, #428]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a6a      	ldr	r2, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b68      	ldr	r3, [pc, #416]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a67      	ldr	r2, [pc, #412]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff f86c 	bl	8000ad0 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff f868 	bl	8000ad0 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e1fa      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0xe4>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f858 	bl	8000ad0 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff f854 	bl	8000ad0 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1e6      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x10c>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d063      	beq.n	8001b1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a52:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a5e:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d11c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x18c>
 8001a6a:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d116      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_RCC_OscConfig+0x176>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e1ba      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4939      	ldr	r1, [pc, #228]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	e03a      	b.n	8001b1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_RCC_OscConfig+0x270>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff f80d 	bl	8000ad0 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aba:	f7ff f809 	bl	8000ad0 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e19b      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4927      	ldr	r1, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_RCC_OscConfig+0x270>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7fe ffec 	bl	8000ad0 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afc:	f7fe ffe8 	bl	8000ad0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e17a      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d03a      	beq.n	8001b9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d019      	beq.n	8001b62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b34:	f7fe ffcc 	bl	8000ad0 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7fe ffc8 	bl	8000ad0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e15a      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f000 fada 	bl	8002114 <RCC_Delay>
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7fe ffb2 	bl	8000ad0 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6e:	e00f      	b.n	8001b90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7fe ffae 	bl	8000ad0 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d908      	bls.n	8001b90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e140      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	42420000 	.word	0x42420000
 8001b8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	4b9e      	ldr	r3, [pc, #632]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1e9      	bne.n	8001b70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a6 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b97      	ldr	r3, [pc, #604]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10d      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4b94      	ldr	r3, [pc, #592]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a93      	ldr	r2, [pc, #588]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b91      	ldr	r3, [pc, #580]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd6:	4b8e      	ldr	r3, [pc, #568]	; (8001e10 <HAL_RCC_OscConfig+0x4f8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d118      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be2:	4b8b      	ldr	r3, [pc, #556]	; (8001e10 <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a8a      	ldr	r2, [pc, #552]	; (8001e10 <HAL_RCC_OscConfig+0x4f8>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bee:	f7fe ff6f 	bl	8000ad0 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf6:	f7fe ff6b 	bl	8000ad0 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b64      	cmp	r3, #100	; 0x64
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0fd      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	4b81      	ldr	r3, [pc, #516]	; (8001e10 <HAL_RCC_OscConfig+0x4f8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x312>
 8001c1c:	4b7b      	ldr	r3, [pc, #492]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4a7a      	ldr	r2, [pc, #488]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6213      	str	r3, [r2, #32]
 8001c28:	e02d      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x334>
 8001c32:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a75      	ldr	r2, [pc, #468]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a72      	ldr	r2, [pc, #456]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	6213      	str	r3, [r2, #32]
 8001c4a:	e01c      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0x356>
 8001c54:	4b6d      	ldr	r3, [pc, #436]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a6c      	ldr	r2, [pc, #432]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a69      	ldr	r2, [pc, #420]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6213      	str	r3, [r2, #32]
 8001c6c:	e00b      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c6e:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a66      	ldr	r2, [pc, #408]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6213      	str	r3, [r2, #32]
 8001c7a:	4b64      	ldr	r3, [pc, #400]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4a63      	ldr	r2, [pc, #396]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d015      	beq.n	8001cba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7fe ff1f 	bl	8000ad0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7fe ff1b 	bl	8000ad0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0ab      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	4b57      	ldr	r3, [pc, #348]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ee      	beq.n	8001c96 <HAL_RCC_OscConfig+0x37e>
 8001cb8:	e014      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7fe ff09 	bl	8000ad0 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7fe ff05 	bl	8000ad0 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e095      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ee      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4b48      	ldr	r3, [pc, #288]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4a47      	ldr	r2, [pc, #284]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8081 	beq.w	8001e02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d00:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d061      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d146      	bne.n	8001da2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <HAL_RCC_OscConfig+0x4fc>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7fe fed9 	bl	8000ad0 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d22:	f7fe fed5 	bl	8000ad0 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e067      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d34:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d108      	bne.n	8001d5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	492d      	ldr	r1, [pc, #180]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a19      	ldr	r1, [r3, #32]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	4927      	ldr	r1, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <HAL_RCC_OscConfig+0x4fc>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fea9 	bl	8000ad0 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe fea5 	bl	8000ad0 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e037      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x46a>
 8001da0:	e02f      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <HAL_RCC_OscConfig+0x4fc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7fe fe92 	bl	8000ad0 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7fe fe8e 	bl	8000ad0 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e020      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x498>
 8001dce:	e018      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e013      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40007000 	.word	0x40007000
 8001e14:	42420060 	.word	0x42420060

08001e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0d0      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b6a      	ldr	r3, [pc, #424]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b67      	ldr	r3, [pc, #412]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 0207 	bic.w	r2, r3, #7
 8001e42:	4965      	ldr	r1, [pc, #404]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0b8      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e74:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a58      	ldr	r2, [pc, #352]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e8c:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a52      	ldr	r2, [pc, #328]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e98:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	494d      	ldr	r1, [pc, #308]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d040      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d115      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e07f      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed6:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e073      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e06b      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef6:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f023 0203 	bic.w	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4936      	ldr	r1, [pc, #216]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f08:	f7fe fde2 	bl	8000ad0 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f10:	f7fe fdde 	bl	8000ad0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e053      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 020c 	and.w	r2, r3, #12
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1eb      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d210      	bcs.n	8001f68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 0207 	bic.w	r2, r3, #7
 8001f4e:	4922      	ldr	r1, [pc, #136]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e032      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4916      	ldr	r1, [pc, #88]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d009      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	490e      	ldr	r1, [pc, #56]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa6:	f000 f821 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001faa:	4601      	mov	r1, r0
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb8:	5cd3      	ldrb	r3, [r2, r3]
 8001fba:	fa21 f303 	lsr.w	r3, r1, r3
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fd40 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	080029e8 	.word	0x080029e8
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000004 	.word	0x20000004

08001fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b490      	push	{r4, r7}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ff4:	1d3c      	adds	r4, r7, #4
 8001ff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ffc:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b04      	cmp	r3, #4
 8002024:	d002      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x40>
 8002026:	2b08      	cmp	r3, #8
 8002028:	d003      	beq.n	8002032 <HAL_RCC_GetSysClockFreq+0x46>
 800202a:	e02d      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800202e:	623b      	str	r3, [r7, #32]
      break;
 8002030:	e02d      	b.n	800208e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	0c9b      	lsrs	r3, r3, #18
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800203e:	4413      	add	r3, r2
 8002040:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002044:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	0c5b      	lsrs	r3, r3, #17
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800205e:	4413      	add	r3, r2
 8002060:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002064:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	4a0f      	ldr	r2, [pc, #60]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800206a:	fb02 f203 	mul.w	r2, r2, r3
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
 8002076:	e004      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800207c:	fb02 f303 	mul.w	r3, r2, r3
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	623b      	str	r3, [r7, #32]
      break;
 8002086:	e002      	b.n	800208e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800208a:	623b      	str	r3, [r7, #32]
      break;
 800208c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208e:	6a3b      	ldr	r3, [r7, #32]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3728      	adds	r7, #40	; 0x28
 8002094:	46bd      	mov	sp, r7
 8002096:	bc90      	pop	{r4, r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	080029c0 	.word	0x080029c0
 80020a0:	080029d0 	.word	0x080029d0
 80020a4:	40021000 	.word	0x40021000
 80020a8:	007a1200 	.word	0x007a1200
 80020ac:	003d0900 	.word	0x003d0900

080020b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b4:	4b02      	ldr	r3, [pc, #8]	; (80020c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	20000000 	.word	0x20000000

080020c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c8:	f7ff fff2 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020cc:	4601      	mov	r1, r0
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	4a03      	ldr	r2, [pc, #12]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	080029f8 	.word	0x080029f8

080020ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020f0:	f7ff ffde 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020f4:	4601      	mov	r1, r0
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	0adb      	lsrs	r3, r3, #11
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4a03      	ldr	r2, [pc, #12]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	080029f8 	.word	0x080029f8

08002114 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <RCC_Delay+0x34>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0a      	ldr	r2, [pc, #40]	; (800214c <RCC_Delay+0x38>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0a5b      	lsrs	r3, r3, #9
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002130:	bf00      	nop
  }
  while (Delay --);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1e5a      	subs	r2, r3, #1
 8002136:	60fa      	str	r2, [r7, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f9      	bne.n	8002130 <RCC_Delay+0x1c>
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000000 	.word	0x20000000
 800214c:	10624dd3 	.word	0x10624dd3

08002150 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d07d      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002170:	4b4f      	ldr	r3, [pc, #316]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	4a4b      	ldr	r2, [pc, #300]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002186:	61d3      	str	r3, [r2, #28]
 8002188:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002194:	2301      	movs	r3, #1
 8002196:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d118      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a42      	ldr	r2, [pc, #264]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b0:	f7fe fc8e 	bl	8000ad0 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	e008      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fc8a 	bl	8000ad0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e06d      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d02e      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d027      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021fe:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002204:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800220a:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d014      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7fe fc59 	bl	8000ad0 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe fc55 	bl	8000ad0 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e036      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ee      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4917      	ldr	r1, [pc, #92]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	4313      	orrs	r3, r2
 8002254:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002266:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	490b      	ldr	r1, [pc, #44]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4904      	ldr	r1, [pc, #16]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40007000 	.word	0x40007000
 80022b8:	42420440 	.word	0x42420440

080022bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b08d      	sub	sp, #52	; 0x34
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022c4:	4b55      	ldr	r3, [pc, #340]	; (800241c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80022c6:	f107 040c 	add.w	r4, r7, #12
 80022ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022d0:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
 80022da:	2300      	movs	r3, #0
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	2300      	movs	r3, #0
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d07f      	beq.n	80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d002      	beq.n	80022fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d048      	beq.n	800238a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80022f8:	e08b      	b.n	8002412 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80022fa:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002300:	4b48      	ldr	r3, [pc, #288]	; (8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d07f      	beq.n	800240c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	0c9b      	lsrs	r3, r3, #18
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002318:	4413      	add	r3, r2
 800231a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800231e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d018      	beq.n	800235c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800232a:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	0c5b      	lsrs	r3, r3, #17
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002338:	4413      	add	r3, r2
 800233a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00d      	beq.n	8002366 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800234a:	4a37      	ldr	r2, [pc, #220]	; (8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800235a:	e004      	b.n	8002366 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	4a33      	ldr	r2, [pc, #204]	; (800242c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002366:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002372:	d102      	bne.n	800237a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002378:	e048      	b.n	800240c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4a2c      	ldr	r2, [pc, #176]	; (8002430 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002388:	e040      	b.n	800240c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239a:	d108      	bne.n	80023ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80023a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ac:	e01f      	b.n	80023ee <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b8:	d109      	bne.n	80023ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80023c6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80023cc:	e00f      	b.n	80023ee <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023d8:	d11a      	bne.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d014      	beq.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80023e6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80023ec:	e010      	b.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80023ee:	e00f      	b.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80023f0:	f7ff fe7c 	bl	80020ec <HAL_RCC_GetPCLK2Freq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	0b9b      	lsrs	r3, r3, #14
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	3301      	adds	r3, #1
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800240a:	e002      	b.n	8002412 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800240c:	bf00      	nop
 800240e:	e000      	b.n	8002412 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002410:	bf00      	nop
    }
  }
  return (frequency);
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002414:	4618      	mov	r0, r3
 8002416:	3734      	adds	r7, #52	; 0x34
 8002418:	46bd      	mov	sp, r7
 800241a:	bd90      	pop	{r4, r7, pc}
 800241c:	080029d4 	.word	0x080029d4
 8002420:	080029e4 	.word	0x080029e4
 8002424:	40021000 	.word	0x40021000
 8002428:	007a1200 	.word	0x007a1200
 800242c:	003d0900 	.word	0x003d0900
 8002430:	aaaaaaab 	.word	0xaaaaaaab

08002434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e03f      	b.n	80024c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe f99a 	bl	8000794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2224      	movs	r2, #36	; 0x24
 8002464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f905 	bl	8002688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800248c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800249c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b08a      	sub	sp, #40	; 0x28
 80024d2:	af02      	add	r7, sp, #8
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d17c      	bne.n	80025e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <HAL_UART_Transmit+0x2c>
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e075      	b.n	80025ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_UART_Transmit+0x3e>
 8002508:	2302      	movs	r3, #2
 800250a:	e06e      	b.n	80025ea <HAL_UART_Transmit+0x11c>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2221      	movs	r2, #33	; 0x21
 800251e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002522:	f7fe fad5 	bl	8000ad0 <HAL_GetTick>
 8002526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253c:	d108      	bne.n	8002550 <HAL_UART_Transmit+0x82>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d104      	bne.n	8002550 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	e003      	b.n	8002558 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002560:	e02a      	b.n	80025b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f840 	bl	80025f2 <UART_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e036      	b.n	80025ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10b      	bne.n	800259a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002590:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	3302      	adds	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	e007      	b.n	80025aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	3301      	adds	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1cf      	bne.n	8002562 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f810 	bl	80025f2 <UART_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e006      	b.n	80025ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e000      	b.n	80025ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
  }
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	603b      	str	r3, [r7, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002602:	e02c      	b.n	800265e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d028      	beq.n	800265e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <UART_WaitOnFlagUntilTimeout+0x30>
 8002612:	f7fe fa5d 	bl	8000ad0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	429a      	cmp	r2, r3
 8002620:	d21d      	bcs.n	800265e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002630:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e00f      	b.n	800267e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4013      	ands	r3, r2
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	429a      	cmp	r2, r3
 800267a:	d0c3      	beq.n	8002604 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026c2:	f023 030c 	bic.w	r3, r3, #12
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2c      	ldr	r2, [pc, #176]	; (800279c <UART_SetConfig+0x114>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d103      	bne.n	80026f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026f0:	f7ff fcfc 	bl	80020ec <HAL_RCC_GetPCLK2Freq>
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	e002      	b.n	80026fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026f8:	f7ff fce4 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
 80026fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	009a      	lsls	r2, r3, #2
 8002708:	441a      	add	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	4a22      	ldr	r2, [pc, #136]	; (80027a0 <UART_SetConfig+0x118>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	0119      	lsls	r1, r3, #4
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	009a      	lsls	r2, r3, #2
 8002728:	441a      	add	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	fbb2 f2f3 	udiv	r2, r2, r3
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <UART_SetConfig+0x118>)
 8002736:	fba3 0302 	umull	r0, r3, r3, r2
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2064      	movs	r0, #100	; 0x64
 800273e:	fb00 f303 	mul.w	r3, r0, r3
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	3332      	adds	r3, #50	; 0x32
 8002748:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <UART_SetConfig+0x118>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002754:	4419      	add	r1, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	009a      	lsls	r2, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fbb2 f2f3 	udiv	r2, r2, r3
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <UART_SetConfig+0x118>)
 800276e:	fba3 0302 	umull	r0, r3, r3, r2
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2064      	movs	r0, #100	; 0x64
 8002776:	fb00 f303 	mul.w	r3, r0, r3
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	3332      	adds	r3, #50	; 0x32
 8002780:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <UART_SetConfig+0x118>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	f003 020f 	and.w	r2, r3, #15
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	440a      	add	r2, r1
 8002792:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40013800 	.word	0x40013800
 80027a0:	51eb851f 	.word	0x51eb851f

080027a4 <__errno>:
 80027a4:	4b01      	ldr	r3, [pc, #4]	; (80027ac <__errno+0x8>)
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	2000000c 	.word	0x2000000c

080027b0 <__libc_init_array>:
 80027b0:	b570      	push	{r4, r5, r6, lr}
 80027b2:	2500      	movs	r5, #0
 80027b4:	4e0c      	ldr	r6, [pc, #48]	; (80027e8 <__libc_init_array+0x38>)
 80027b6:	4c0d      	ldr	r4, [pc, #52]	; (80027ec <__libc_init_array+0x3c>)
 80027b8:	1ba4      	subs	r4, r4, r6
 80027ba:	10a4      	asrs	r4, r4, #2
 80027bc:	42a5      	cmp	r5, r4
 80027be:	d109      	bne.n	80027d4 <__libc_init_array+0x24>
 80027c0:	f000 f8ee 	bl	80029a0 <_init>
 80027c4:	2500      	movs	r5, #0
 80027c6:	4e0a      	ldr	r6, [pc, #40]	; (80027f0 <__libc_init_array+0x40>)
 80027c8:	4c0a      	ldr	r4, [pc, #40]	; (80027f4 <__libc_init_array+0x44>)
 80027ca:	1ba4      	subs	r4, r4, r6
 80027cc:	10a4      	asrs	r4, r4, #2
 80027ce:	42a5      	cmp	r5, r4
 80027d0:	d105      	bne.n	80027de <__libc_init_array+0x2e>
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
 80027d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027d8:	4798      	blx	r3
 80027da:	3501      	adds	r5, #1
 80027dc:	e7ee      	b.n	80027bc <__libc_init_array+0xc>
 80027de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027e2:	4798      	blx	r3
 80027e4:	3501      	adds	r5, #1
 80027e6:	e7f2      	b.n	80027ce <__libc_init_array+0x1e>
 80027e8:	08002a00 	.word	0x08002a00
 80027ec:	08002a00 	.word	0x08002a00
 80027f0:	08002a00 	.word	0x08002a00
 80027f4:	08002a04 	.word	0x08002a04

080027f8 <memset>:
 80027f8:	4603      	mov	r3, r0
 80027fa:	4402      	add	r2, r0
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d100      	bne.n	8002802 <memset+0xa>
 8002800:	4770      	bx	lr
 8002802:	f803 1b01 	strb.w	r1, [r3], #1
 8002806:	e7f9      	b.n	80027fc <memset+0x4>

08002808 <srand>:
 8002808:	b538      	push	{r3, r4, r5, lr}
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <srand+0x38>)
 800280c:	4605      	mov	r5, r0
 800280e:	681c      	ldr	r4, [r3, #0]
 8002810:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002812:	b97b      	cbnz	r3, 8002834 <srand+0x2c>
 8002814:	2018      	movs	r0, #24
 8002816:	f000 f84f 	bl	80028b8 <malloc>
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <srand+0x3c>)
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <srand+0x40>)
 800281e:	63a0      	str	r0, [r4, #56]	; 0x38
 8002820:	e9c0 2300 	strd	r2, r3, [r0]
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <srand+0x44>)
 8002826:	2201      	movs	r2, #1
 8002828:	6083      	str	r3, [r0, #8]
 800282a:	230b      	movs	r3, #11
 800282c:	8183      	strh	r3, [r0, #12]
 800282e:	2300      	movs	r3, #0
 8002830:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002834:	2200      	movs	r2, #0
 8002836:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002838:	611d      	str	r5, [r3, #16]
 800283a:	615a      	str	r2, [r3, #20]
 800283c:	bd38      	pop	{r3, r4, r5, pc}
 800283e:	bf00      	nop
 8002840:	2000000c 	.word	0x2000000c
 8002844:	abcd330e 	.word	0xabcd330e
 8002848:	e66d1234 	.word	0xe66d1234
 800284c:	0005deec 	.word	0x0005deec

08002850 <rand>:
 8002850:	b538      	push	{r3, r4, r5, lr}
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <rand+0x50>)
 8002854:	681c      	ldr	r4, [r3, #0]
 8002856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002858:	b97b      	cbnz	r3, 800287a <rand+0x2a>
 800285a:	2018      	movs	r0, #24
 800285c:	f000 f82c 	bl	80028b8 <malloc>
 8002860:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <rand+0x54>)
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <rand+0x58>)
 8002864:	63a0      	str	r0, [r4, #56]	; 0x38
 8002866:	e9c0 2300 	strd	r2, r3, [r0]
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <rand+0x5c>)
 800286c:	2201      	movs	r2, #1
 800286e:	6083      	str	r3, [r0, #8]
 8002870:	230b      	movs	r3, #11
 8002872:	8183      	strh	r3, [r0, #12]
 8002874:	2300      	movs	r3, #0
 8002876:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800287a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800287c:	480c      	ldr	r0, [pc, #48]	; (80028b0 <rand+0x60>)
 800287e:	690a      	ldr	r2, [r1, #16]
 8002880:	694b      	ldr	r3, [r1, #20]
 8002882:	4350      	muls	r0, r2
 8002884:	4c0b      	ldr	r4, [pc, #44]	; (80028b4 <rand+0x64>)
 8002886:	fb04 0003 	mla	r0, r4, r3, r0
 800288a:	fba2 2304 	umull	r2, r3, r2, r4
 800288e:	4403      	add	r3, r0
 8002890:	1c54      	adds	r4, r2, #1
 8002892:	f143 0500 	adc.w	r5, r3, #0
 8002896:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800289a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800289e:	bd38      	pop	{r3, r4, r5, pc}
 80028a0:	2000000c 	.word	0x2000000c
 80028a4:	abcd330e 	.word	0xabcd330e
 80028a8:	e66d1234 	.word	0xe66d1234
 80028ac:	0005deec 	.word	0x0005deec
 80028b0:	5851f42d 	.word	0x5851f42d
 80028b4:	4c957f2d 	.word	0x4c957f2d

080028b8 <malloc>:
 80028b8:	4b02      	ldr	r3, [pc, #8]	; (80028c4 <malloc+0xc>)
 80028ba:	4601      	mov	r1, r0
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	f000 b803 	b.w	80028c8 <_malloc_r>
 80028c2:	bf00      	nop
 80028c4:	2000000c 	.word	0x2000000c

080028c8 <_malloc_r>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	1ccd      	adds	r5, r1, #3
 80028cc:	f025 0503 	bic.w	r5, r5, #3
 80028d0:	3508      	adds	r5, #8
 80028d2:	2d0c      	cmp	r5, #12
 80028d4:	bf38      	it	cc
 80028d6:	250c      	movcc	r5, #12
 80028d8:	2d00      	cmp	r5, #0
 80028da:	4606      	mov	r6, r0
 80028dc:	db01      	blt.n	80028e2 <_malloc_r+0x1a>
 80028de:	42a9      	cmp	r1, r5
 80028e0:	d903      	bls.n	80028ea <_malloc_r+0x22>
 80028e2:	230c      	movs	r3, #12
 80028e4:	6033      	str	r3, [r6, #0]
 80028e6:	2000      	movs	r0, #0
 80028e8:	bd70      	pop	{r4, r5, r6, pc}
 80028ea:	f000 f857 	bl	800299c <__malloc_lock>
 80028ee:	4a21      	ldr	r2, [pc, #132]	; (8002974 <_malloc_r+0xac>)
 80028f0:	6814      	ldr	r4, [r2, #0]
 80028f2:	4621      	mov	r1, r4
 80028f4:	b991      	cbnz	r1, 800291c <_malloc_r+0x54>
 80028f6:	4c20      	ldr	r4, [pc, #128]	; (8002978 <_malloc_r+0xb0>)
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	b91b      	cbnz	r3, 8002904 <_malloc_r+0x3c>
 80028fc:	4630      	mov	r0, r6
 80028fe:	f000 f83d 	bl	800297c <_sbrk_r>
 8002902:	6020      	str	r0, [r4, #0]
 8002904:	4629      	mov	r1, r5
 8002906:	4630      	mov	r0, r6
 8002908:	f000 f838 	bl	800297c <_sbrk_r>
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	d124      	bne.n	800295a <_malloc_r+0x92>
 8002910:	230c      	movs	r3, #12
 8002912:	4630      	mov	r0, r6
 8002914:	6033      	str	r3, [r6, #0]
 8002916:	f000 f842 	bl	800299e <__malloc_unlock>
 800291a:	e7e4      	b.n	80028e6 <_malloc_r+0x1e>
 800291c:	680b      	ldr	r3, [r1, #0]
 800291e:	1b5b      	subs	r3, r3, r5
 8002920:	d418      	bmi.n	8002954 <_malloc_r+0x8c>
 8002922:	2b0b      	cmp	r3, #11
 8002924:	d90f      	bls.n	8002946 <_malloc_r+0x7e>
 8002926:	600b      	str	r3, [r1, #0]
 8002928:	18cc      	adds	r4, r1, r3
 800292a:	50cd      	str	r5, [r1, r3]
 800292c:	4630      	mov	r0, r6
 800292e:	f000 f836 	bl	800299e <__malloc_unlock>
 8002932:	f104 000b 	add.w	r0, r4, #11
 8002936:	1d23      	adds	r3, r4, #4
 8002938:	f020 0007 	bic.w	r0, r0, #7
 800293c:	1ac3      	subs	r3, r0, r3
 800293e:	d0d3      	beq.n	80028e8 <_malloc_r+0x20>
 8002940:	425a      	negs	r2, r3
 8002942:	50e2      	str	r2, [r4, r3]
 8002944:	e7d0      	b.n	80028e8 <_malloc_r+0x20>
 8002946:	684b      	ldr	r3, [r1, #4]
 8002948:	428c      	cmp	r4, r1
 800294a:	bf16      	itet	ne
 800294c:	6063      	strne	r3, [r4, #4]
 800294e:	6013      	streq	r3, [r2, #0]
 8002950:	460c      	movne	r4, r1
 8002952:	e7eb      	b.n	800292c <_malloc_r+0x64>
 8002954:	460c      	mov	r4, r1
 8002956:	6849      	ldr	r1, [r1, #4]
 8002958:	e7cc      	b.n	80028f4 <_malloc_r+0x2c>
 800295a:	1cc4      	adds	r4, r0, #3
 800295c:	f024 0403 	bic.w	r4, r4, #3
 8002960:	42a0      	cmp	r0, r4
 8002962:	d005      	beq.n	8002970 <_malloc_r+0xa8>
 8002964:	1a21      	subs	r1, r4, r0
 8002966:	4630      	mov	r0, r6
 8002968:	f000 f808 	bl	800297c <_sbrk_r>
 800296c:	3001      	adds	r0, #1
 800296e:	d0cf      	beq.n	8002910 <_malloc_r+0x48>
 8002970:	6025      	str	r5, [r4, #0]
 8002972:	e7db      	b.n	800292c <_malloc_r+0x64>
 8002974:	200000e0 	.word	0x200000e0
 8002978:	200000e4 	.word	0x200000e4

0800297c <_sbrk_r>:
 800297c:	b538      	push	{r3, r4, r5, lr}
 800297e:	2300      	movs	r3, #0
 8002980:	4c05      	ldr	r4, [pc, #20]	; (8002998 <_sbrk_r+0x1c>)
 8002982:	4605      	mov	r5, r0
 8002984:	4608      	mov	r0, r1
 8002986:	6023      	str	r3, [r4, #0]
 8002988:	f7fd ffe8 	bl	800095c <_sbrk>
 800298c:	1c43      	adds	r3, r0, #1
 800298e:	d102      	bne.n	8002996 <_sbrk_r+0x1a>
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	b103      	cbz	r3, 8002996 <_sbrk_r+0x1a>
 8002994:	602b      	str	r3, [r5, #0]
 8002996:	bd38      	pop	{r3, r4, r5, pc}
 8002998:	20000174 	.word	0x20000174

0800299c <__malloc_lock>:
 800299c:	4770      	bx	lr

0800299e <__malloc_unlock>:
 800299e:	4770      	bx	lr

080029a0 <_init>:
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a2:	bf00      	nop
 80029a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a6:	bc08      	pop	{r3}
 80029a8:	469e      	mov	lr, r3
 80029aa:	4770      	bx	lr

080029ac <_fini>:
 80029ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ae:	bf00      	nop
 80029b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b2:	bc08      	pop	{r3}
 80029b4:	469e      	mov	lr, r3
 80029b6:	4770      	bx	lr
