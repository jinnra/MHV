
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00001780  0800010c  0800010c  0001010c  2**2
=======
  1 .text         00001d14  0800010c  0800010c  0001010c  2**2
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
<<<<<<< HEAD
  2 .rodata       00000034  0800188c  0800188c  0001188c  2**2
=======
  2 .rodata       00000034  08001e20  08001e20  00011e20  2**2
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  3 .ARM.extab    00000000  080018c0  080018c0  0002000c  2**0
=======
  3 .ARM.extab    00000000  08001e54  08001e54  0002000c  2**0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS
<<<<<<< HEAD
  4 .ARM          00000000  080018c0  080018c0  0002000c  2**0
=======
  4 .ARM          00000000  08001e54  08001e54  0002000c  2**0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS
<<<<<<< HEAD
  5 .preinit_array 00000000  080018c0  080018c0  0002000c  2**0
=======
  5 .preinit_array 00000000  08001e54  08001e54  0002000c  2**0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  6 .init_array   00000004  080018c0  080018c0  000118c0  2**2
=======
  6 .init_array   00000004  08001e54  08001e54  00011e54  2**2
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  7 .fini_array   00000004  080018c4  080018c4  000118c4  2**2
=======
  7 .fini_array   00000004  08001e58  08001e58  00011e58  2**2
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  8 .data         0000000c  20000000  080018c8  00020000  2**2
=======
  8 .data         0000000c  20000000  08001e5c  00020000  2**2
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  9 .bss          00000074  2000000c  080018d4  0002000c  2**2
=======
  9 .bss          0000006c  2000000c  08001e68  0002000c  2**2
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  ALLOC
<<<<<<< HEAD
 10 ._user_heap_stack 00000600  20000080  080018d4  00020080  2**0
=======
 10 ._user_heap_stack 00000600  20000078  08001e68  00020078  2**0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   0000505b  00000000  00000000  00020035  2**0
=======
 12 .debug_info   00005723  00000000  00000000  00020035  2**0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 13 .debug_abbrev 00001258  00000000  00000000  00025090  2**0
=======
 13 .debug_abbrev 000012f7  00000000  00000000  00025758  2**0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 14 .debug_aranges 00000628  00000000  00000000  000262e8  2**3
=======
 14 .debug_aranges 00000648  00000000  00000000  00026a50  2**3
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 15 .debug_ranges 00000580  00000000  00000000  00026910  2**3
=======
 15 .debug_ranges 000005a0  00000000  00000000  00027098  2**3
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 16 .debug_macro  00015ec0  00000000  00000000  00026e90  2**0
=======
 16 .debug_macro  00015e34  00000000  00000000  00027638  2**0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 17 .debug_line   000054c0  00000000  00000000  0003cd50  2**0
=======
 17 .debug_line   00005752  00000000  00000000  0003d46c  2**0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 18 .debug_str    0007dc4a  00000000  00000000  00042210  2**0
=======
 18 .debug_str    0007db84  00000000  00000000  00042bbe  2**0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 19 .comment      0000007b  00000000  00000000  000bfe5a  2**0
=======
 19 .comment      0000007b  00000000  00000000  000c0742  2**0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, READONLY
<<<<<<< HEAD
 20 .debug_frame  0000178c  00000000  00000000  000bfed8  2**2
=======
 20 .debug_frame  00001824  00000000  00000000  000c07c0  2**2
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
<<<<<<< HEAD
 800012c:	08001874 	.word	0x08001874
=======
 800012c:	08001e08 	.word	0x08001e08
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
<<<<<<< HEAD
 8000148:	08001874 	.word	0x08001874
=======
 8000148:	08001e08 	.word	0x08001e08
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
<<<<<<< HEAD
	/*uint8_t msb = foo >> 8;
	uint8_t lsb = foo & 0xff;
	uint8_t UART1_txBuffer[5] = {65,66,67,68,69};*/
	struct Packet pkt = {0xAA,300, 1};
 8000152:	4a21      	ldr	r2, [pc, #132]	; (80001d8 <main+0x8c>)
 8000154:	1d3b      	adds	r3, r7, #4
=======

	struct Paket pkt = {0xAA,300, 1};
 8000152:	4a27      	ldr	r2, [pc, #156]	; (80001f0 <main+0xa4>)
 8000154:	463b      	mov	r3, r7
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
 8000156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800015a:	6018      	str	r0, [r3, #0]
 800015c:	3304      	adds	r3, #4
 800015e:	8019      	strh	r1, [r3, #0]
	uint8_t* x = (uint8_t*)&pkt;
 8000160:	463b      	mov	r3, r7
 8000162:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < (sizeof(struct Paket)); i++){
 8000164:	2300      	movs	r3, #0
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	e007      	b.n	800017a <main+0x2e>
		UART1_rxBuffer[i] = 5;
 800016a:	4a22      	ldr	r2, [pc, #136]	; (80001f4 <main+0xa8>)
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4413      	add	r3, r2
 8000170:	2205      	movs	r2, #5
 8000172:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < (sizeof(struct Paket)); i++){
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	3301      	adds	r3, #1
 8000178:	60fb      	str	r3, [r7, #12]
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	2b05      	cmp	r3, #5
 800017e:	d9f4      	bls.n	800016a <main+0x1e>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000164:	f000 fa24 	bl	80005b0 <HAL_Init>
=======
 8000180:	f000 fa1a 	bl	80005b8 <HAL_Init>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000168:	f000 f840 	bl	80001ec <SystemClock_Config>
=======
 8000184:	f000 f83e 	bl	8000204 <SystemClock_Config>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800016c:	f000 f8c2 	bl	80002f4 <MX_GPIO_Init>
=======
 8000188:	f000 f8ac 	bl	80002e4 <MX_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  MX_USART1_UART_Init();
<<<<<<< HEAD
 8000170:	f000 f896 	bl	80002a0 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000174:	f000 f880 	bl	8000278 <MX_CRC_Init>
=======
 800018c:	f000 f880 	bl	8000290 <MX_USART1_UART_Init>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN 2 */
<<<<<<< HEAD
  HAL_UART_Receive_IT (&huart1, UART1_rxBuffer, sizeof(struct Packet));
 8000178:	2206      	movs	r2, #6
 800017a:	4918      	ldr	r1, [pc, #96]	; (80001dc <main+0x90>)
 800017c:	4818      	ldr	r0, [pc, #96]	; (80001e0 <main+0x94>)
 800017e:	f001 fa20 	bl	80015c2 <HAL_UART_Receive_IT>
=======
  HAL_UART_Receive_IT (&huart1, UART1_rxBuffer, sizeof(struct Paket));
 8000190:	2206      	movs	r2, #6
 8000192:	4918      	ldr	r1, [pc, #96]	; (80001f4 <main+0xa8>)
 8000194:	4818      	ldr	r0, [pc, #96]	; (80001f8 <main+0xac>)
 8000196:	f001 fab4 	bl	8001702 <HAL_UART_Receive_IT>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
<<<<<<< HEAD
	  /* USER CODE END WHILE */
	  	  		if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==0)&&(sendF == 0)){
 8000182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000186:	4817      	ldr	r0, [pc, #92]	; (80001e4 <main+0x98>)
 8000188:	f000 fcf0 	bl	8000b6c <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d10f      	bne.n	80001b2 <main+0x66>
 8000192:	4b15      	ldr	r3, [pc, #84]	; (80001e8 <main+0x9c>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d10b      	bne.n	80001b2 <main+0x66>
	  	  			sendF = 1;
 800019a:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <main+0x9c>)
 800019c:	2201      	movs	r2, #1
 800019e:	601a      	str	r2, [r3, #0]
	  	  			HAL_UART_Transmit(&huart1, x, sizeof(struct Packet), 100);
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	2206      	movs	r2, #6
 80001a4:	68f9      	ldr	r1, [r7, #12]
 80001a6:	480e      	ldr	r0, [pc, #56]	; (80001e0 <main+0x94>)
 80001a8:	f001 f979 	bl	800149e <HAL_UART_Transmit>
	  	  			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  	  			HAL_Delay(100);
 80001ac:	2064      	movs	r0, #100	; 0x64
 80001ae:	f000 fa61 	bl	8000674 <HAL_Delay>
	  	  			}
	  	  			if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==1)&&(sendF == 1)){
 80001b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001b6:	480b      	ldr	r0, [pc, #44]	; (80001e4 <main+0x98>)
 80001b8:	f000 fcd8 	bl	8000b6c <HAL_GPIO_ReadPin>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d1df      	bne.n	8000182 <main+0x36>
 80001c2:	4b09      	ldr	r3, [pc, #36]	; (80001e8 <main+0x9c>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2b01      	cmp	r3, #1
 80001c8:	d1db      	bne.n	8000182 <main+0x36>
	  	  			sendF = 0;
 80001ca:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <main+0x9c>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
	  	  			HAL_Delay(100);
 80001d0:	2064      	movs	r0, #100	; 0x64
 80001d2:	f000 fa4f 	bl	8000674 <HAL_Delay>
	  	  		if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==0)&&(sendF == 0)){
 80001d6:	e7d4      	b.n	8000182 <main+0x36>
 80001d8:	0800188c 	.word	0x0800188c
 80001dc:	20000028 	.word	0x20000028
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	40010c00 	.word	0x40010c00
 80001e8:	20000030 	.word	0x20000030
=======
    /* USER CODE END WHILE */
	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==0)&&(sendF == 0)){
 800019a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800019e:	4817      	ldr	r0, [pc, #92]	; (80001fc <main+0xb0>)
 80001a0:	f000 fd6c 	bl	8000c7c <HAL_GPIO_ReadPin>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d10f      	bne.n	80001ca <main+0x7e>
 80001aa:	4b15      	ldr	r3, [pc, #84]	; (8000200 <main+0xb4>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d10b      	bne.n	80001ca <main+0x7e>
	  	  			sendF = 1;
 80001b2:	4b13      	ldr	r3, [pc, #76]	; (8000200 <main+0xb4>)
 80001b4:	2201      	movs	r2, #1
 80001b6:	601a      	str	r2, [r3, #0]
	  	  			HAL_UART_Transmit(&huart1, x, sizeof(struct Paket), 100);
 80001b8:	2364      	movs	r3, #100	; 0x64
 80001ba:	2206      	movs	r2, #6
 80001bc:	68b9      	ldr	r1, [r7, #8]
 80001be:	480e      	ldr	r0, [pc, #56]	; (80001f8 <main+0xac>)
 80001c0:	f001 fa0d 	bl	80015de <HAL_UART_Transmit>
	  	  			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  	  			HAL_Delay(100);
 80001c4:	2064      	movs	r0, #100	; 0x64
 80001c6:	f000 fa59 	bl	800067c <HAL_Delay>
	  	  			}
	  	  			if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==1)&&(sendF == 1)){
 80001ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001ce:	480b      	ldr	r0, [pc, #44]	; (80001fc <main+0xb0>)
 80001d0:	f000 fd54 	bl	8000c7c <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d1df      	bne.n	800019a <main+0x4e>
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <main+0xb4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d1db      	bne.n	800019a <main+0x4e>
	  	  			sendF = 0;
 80001e2:	4b07      	ldr	r3, [pc, #28]	; (8000200 <main+0xb4>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
	  	  			HAL_Delay(100);
 80001e8:	2064      	movs	r0, #100	; 0x64
 80001ea:	f000 fa47 	bl	800067c <HAL_Delay>
	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==0)&&(sendF == 0)){
 80001ee:	e7d4      	b.n	800019a <main+0x4e>
 80001f0:	08001e20 	.word	0x08001e20
 80001f4:	20000028 	.word	0x20000028
 80001f8:	20000034 	.word	0x20000034
 80001fc:	40010c00 	.word	0x40010c00
 8000200:	20000030 	.word	0x20000030
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080001ec <SystemClock_Config>:
=======
08000204 <SystemClock_Config>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b090      	sub	sp, #64	; 0x40
 80001f0:	af00      	add	r7, sp, #0
=======
 8000204:	b580      	push	{r7, lr}
 8000206:	b090      	sub	sp, #64	; 0x40
 8000208:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fb32 	bl	8001864 <memset>
=======
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fdf0 	bl	8001df8 <memset>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
<<<<<<< HEAD
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]
=======
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 800020e:	2301      	movs	r3, #1
 8000210:	61bb      	str	r3, [r7, #24]
=======
 8000226:	2301      	movs	r3, #1
 8000228:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
<<<<<<< HEAD
 8000212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000216:	61fb      	str	r3, [r7, #28]
=======
 800022a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022e:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
<<<<<<< HEAD
 8000218:	2300      	movs	r3, #0
 800021a:	623b      	str	r3, [r7, #32]
=======
 8000230:	2300      	movs	r3, #0
 8000232:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
<<<<<<< HEAD
 800021c:	2301      	movs	r3, #1
 800021e:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
<<<<<<< HEAD
 8000220:	2302      	movs	r3, #2
 8000222:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8000238:	2302      	movs	r3, #2
 800023a:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
<<<<<<< HEAD
 8000224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000228:	63bb      	str	r3, [r7, #56]	; 0x38
=======
 800023c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
<<<<<<< HEAD
 800022a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800022e:	63fb      	str	r3, [r7, #60]	; 0x3c
=======
 8000242:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fcc9 	bl	8000bcc <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x58>
=======
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fd5d 	bl	8000d0c <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x58>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    Error_Handler();
<<<<<<< HEAD
 8000240:	f000 f8be 	bl	80003c0 <Error_Handler>
=======
 8000258:	f000 f8c2 	bl	80003e0 <Error_Handler>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000244:	230f      	movs	r3, #15
 8000246:	607b      	str	r3, [r7, #4]
=======
 800025c:	230f      	movs	r3, #15
 800025e:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
<<<<<<< HEAD
 8000248:	2302      	movs	r3, #2
 800024a:	60bb      	str	r3, [r7, #8]
=======
 8000260:	2302      	movs	r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
<<<<<<< HEAD
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
=======
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
<<<<<<< HEAD
 8000250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000254:	613b      	str	r3, [r7, #16]
=======
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
<<<<<<< HEAD
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]
=======
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
<<<<<<< HEAD
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f000 ff34 	bl	80010cc <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x82>
=======
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2102      	movs	r1, #2
 8000276:	4618      	mov	r0, r3
 8000278:	f000 ffc8 	bl	800120c <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x82>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    Error_Handler();
<<<<<<< HEAD
 800026a:	f000 f8a9 	bl	80003c0 <Error_Handler>
=======
 8000282:	f000 f8ad 	bl	80003e0 <Error_Handler>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
}
<<<<<<< HEAD
 800026e:	bf00      	nop
 8000270:	3740      	adds	r7, #64	; 0x40
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
=======
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
	...

<<<<<<< HEAD
08000278 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <MX_CRC_Init+0x20>)
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <MX_CRC_Init+0x24>)
 8000280:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <MX_CRC_Init+0x20>)
 8000284:	f000 fafb 	bl	800087e <HAL_CRC_Init>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800028e:	f000 f897 	bl	80003c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000034 	.word	0x20000034
 800029c:	40023000 	.word	0x40023000

080002a0 <MX_USART1_UART_Init>:
=======
08000290 <MX_USART1_UART_Init>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
=======
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 80002a4:	4b11      	ldr	r3, [pc, #68]	; (80002ec <MX_USART1_UART_Init+0x4c>)
 80002a6:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <MX_USART1_UART_Init+0x50>)
 80002a8:	601a      	str	r2, [r3, #0]
=======
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_USART1_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  huart1.Init.BaudRate = 9600;
<<<<<<< HEAD
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <MX_USART1_UART_Init+0x4c>)
 80002ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002b0:	605a      	str	r2, [r3, #4]
=======
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 800029c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002a0:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
<<<<<<< HEAD
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <MX_USART1_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
=======
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  huart1.Init.StopBits = UART_STOPBITS_1;
<<<<<<< HEAD
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <MX_USART1_UART_Init+0x4c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
=======
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  huart1.Init.Parity = UART_PARITY_NONE;
<<<<<<< HEAD
 80002be:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <MX_USART1_UART_Init+0x4c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
=======
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  huart1.Init.Mode = UART_MODE_TX_RX;
<<<<<<< HEAD
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <MX_USART1_UART_Init+0x4c>)
 80002c6:	220c      	movs	r2, #12
 80002c8:	615a      	str	r2, [r3, #20]
=======
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
<<<<<<< HEAD
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_USART1_UART_Init+0x4c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
=======
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
<<<<<<< HEAD
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <MX_USART1_UART_Init+0x4c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	61da      	str	r2, [r3, #28]
=======
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  if (HAL_UART_Init(&huart1) != HAL_OK)
<<<<<<< HEAD
 80002d6:	4805      	ldr	r0, [pc, #20]	; (80002ec <MX_USART1_UART_Init+0x4c>)
 80002d8:	f001 f894 	bl	8001404 <HAL_UART_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_USART1_UART_Init+0x46>
=======
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c8:	f001 f93c 	bl	8001544 <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART1_UART_Init+0x46>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    Error_Handler();
<<<<<<< HEAD
 80002e2:	f000 f86d 	bl	80003c0 <Error_Handler>
=======
 80002d2:	f000 f885 	bl	80003e0 <Error_Handler>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	2000003c 	.word	0x2000003c
 80002f0:	40013800 	.word	0x40013800
=======
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000034 	.word	0x20000034
 80002e0:	40013800 	.word	0x40013800
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080002f4 <MX_GPIO_Init>:
=======
080002e4 <MX_GPIO_Init>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af00      	add	r7, sp, #0
=======
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  GPIO_InitTypeDef GPIO_InitStruct = {0};
<<<<<<< HEAD
 80002fa:	f107 0310 	add.w	r3, r7, #16
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
=======
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 8000308:	4b2a      	ldr	r3, [pc, #168]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a29      	ldr	r2, [pc, #164]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0310 	and.w	r3, r3, #16
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fb      	ldr	r3, [r7, #12]
=======
 80002f8:	4b2a      	ldr	r3, [pc, #168]	; (80003a4 <MX_GPIO_Init+0xc0>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a29      	ldr	r2, [pc, #164]	; (80003a4 <MX_GPIO_Init+0xc0>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <MX_GPIO_Init+0xc0>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  __HAL_RCC_GPIOD_CLK_ENABLE();
<<<<<<< HEAD
 8000320:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a23      	ldr	r2, [pc, #140]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	68bb      	ldr	r3, [r7, #8]
=======
 8000310:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <MX_GPIO_Init+0xc0>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a23      	ldr	r2, [pc, #140]	; (80003a4 <MX_GPIO_Init+0xc0>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <MX_GPIO_Init+0xc0>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8000338:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a1d      	ldr	r2, [pc, #116]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800033e:	f043 0308 	orr.w	r3, r3, #8
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0308 	and.w	r3, r3, #8
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
=======
 8000328:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <MX_GPIO_Init+0xc0>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a1d      	ldr	r2, [pc, #116]	; (80003a4 <MX_GPIO_Init+0xc0>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_GPIO_Init+0xc0>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0308 	and.w	r3, r3, #8
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a17      	ldr	r2, [pc, #92]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	603b      	str	r3, [r7, #0]
 8000366:	683b      	ldr	r3, [r7, #0]
=======
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_GPIO_Init+0xc0>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a17      	ldr	r2, [pc, #92]	; (80003a4 <MX_GPIO_Init+0xc0>)
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_GPIO_Init+0xc0>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0304 	and.w	r3, r3, #4
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
<<<<<<< HEAD
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036e:	4812      	ldr	r0, [pc, #72]	; (80003b8 <MX_GPIO_Init+0xc4>)
 8000370:	f000 fc13 	bl	8000b9a <HAL_GPIO_WritePin>
=======
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	4812      	ldr	r0, [pc, #72]	; (80003a8 <MX_GPIO_Init+0xc4>)
 8000360:	f000 fca3 	bl	8000caa <HAL_GPIO_WritePin>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
<<<<<<< HEAD
 8000374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000378:	613b      	str	r3, [r7, #16]
=======
 8000364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000368:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
<<<<<<< HEAD
 800037a:	2301      	movs	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
=======
 800036a:	2301      	movs	r3, #1
 800036c:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
=======
 800036e:	2300      	movs	r3, #0
 8000370:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
<<<<<<< HEAD
 8000382:	2302      	movs	r3, #2
 8000384:	61fb      	str	r3, [r7, #28]
=======
 8000372:	2302      	movs	r3, #2
 8000374:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< HEAD
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4619      	mov	r1, r3
 800038c:	480a      	ldr	r0, [pc, #40]	; (80003b8 <MX_GPIO_Init+0xc4>)
 800038e:	f000 fa93 	bl	80008b8 <HAL_GPIO_Init>
=======
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	4619      	mov	r1, r3
 800037c:	480a      	ldr	r0, [pc, #40]	; (80003a8 <MX_GPIO_Init+0xc4>)
 800037e:	f000 fb23 	bl	80009c8 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
<<<<<<< HEAD
 8000392:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000396:	613b      	str	r3, [r7, #16]
=======
 8000382:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000386:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
<<<<<<< HEAD
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]
=======
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  GPIO_InitStruct.Pull = GPIO_PULLUP;
<<<<<<< HEAD
 800039c:	2301      	movs	r3, #1
 800039e:	61bb      	str	r3, [r7, #24]
=======
 800038c:	2301      	movs	r3, #1
 800038e:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	4619      	mov	r1, r3
 80003a6:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_GPIO_Init+0xc8>)
 80003a8:	f000 fa86 	bl	80008b8 <HAL_GPIO_Init>
=======
 8000390:	f107 0310 	add.w	r3, r7, #16
 8000394:	4619      	mov	r1, r3
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_GPIO_Init+0xc8>)
 8000398:	f000 fb16 	bl	80009c8 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

}
<<<<<<< HEAD
 80003ac:	bf00      	nop
 80003ae:	3720      	adds	r7, #32
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40011000 	.word	0x40011000
 80003bc:	40010c00 	.word	0x40010c00
=======
 800039c:	bf00      	nop
 800039e:	3720      	adds	r7, #32
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40011000 	.word	0x40011000
 80003ac:	40010c00 	.word	0x40010c00
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080003c0 <Error_Handler>:
=======
080003b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003bc:	4805      	ldr	r0, [pc, #20]	; (80003d4 <HAL_UART_RxCpltCallback+0x24>)
 80003be:	f000 fc8c 	bl	8000cda <HAL_GPIO_TogglePin>
    HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(struct Paket));
 80003c2:	2206      	movs	r2, #6
 80003c4:	4904      	ldr	r1, [pc, #16]	; (80003d8 <HAL_UART_RxCpltCallback+0x28>)
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <HAL_UART_RxCpltCallback+0x2c>)
 80003c8:	f001 f99b 	bl	8001702 <HAL_UART_Receive_IT>


}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40011000 	.word	0x40011000
 80003d8:	20000028 	.word	0x20000028
 80003dc:	20000034 	.word	0x20000034

080003e0 <Error_Handler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
=======
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< HEAD
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
=======
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080003cc <HAL_MspInit>:
=======
080003ec <HAL_MspInit>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
=======
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <HAL_MspInit+0x5c>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a14      	ldr	r2, [pc, #80]	; (8000428 <HAL_MspInit+0x5c>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <HAL_MspInit+0x5c>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
=======
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a14      	ldr	r2, [pc, #80]	; (8000448 <HAL_MspInit+0x5c>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <HAL_MspInit+0x5c>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <HAL_MspInit+0x5c>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <HAL_MspInit+0x5c>)
 80003f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <HAL_MspInit+0x5c>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
=======
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a0e      	ldr	r2, [pc, #56]	; (8000448 <HAL_MspInit+0x5c>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <HAL_MspInit+0x5c>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <HAL_MspInit+0x60>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <HAL_MspInit+0x60>)
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	6053      	str	r3, [r2, #4]
=======
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <HAL_MspInit+0x60>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <HAL_MspInit+0x60>)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	6053      	str	r3, [r2, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000
 800042c:	40010000 	.word	0x40010000
=======
 800043e:	bf00      	nop
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000
 800044c:	40010000 	.word	0x40010000
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000430 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a09      	ldr	r2, [pc, #36]	; (8000464 <HAL_CRC_MspInit+0x34>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d10b      	bne.n	800045a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <HAL_CRC_MspInit+0x38>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <HAL_CRC_MspInit+0x38>)
 8000448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <HAL_CRC_MspInit+0x38>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800045a:	bf00      	nop
 800045c:	3714      	adds	r7, #20
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40023000 	.word	0x40023000
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_UART_MspInit>:
=======
08000450 <HAL_UART_MspInit>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
=======
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  GPIO_InitTypeDef GPIO_InitStruct = {0};
<<<<<<< HEAD
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
=======
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  if(huart->Instance==USART1)
<<<<<<< HEAD
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a1c      	ldr	r2, [pc, #112]	; (80004f8 <HAL_UART_MspInit+0x8c>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d131      	bne.n	80004f0 <HAL_UART_MspInit+0x84>
=======
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a20      	ldr	r2, [pc, #128]	; (80004ec <HAL_UART_MspInit+0x9c>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d139      	bne.n	80004e4 <HAL_UART_MspInit+0x94>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <HAL_UART_MspInit+0x90>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <HAL_UART_MspInit+0x90>)
 8000492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b18      	ldr	r3, [pc, #96]	; (80004fc <HAL_UART_MspInit+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
=======
 8000470:	4b1f      	ldr	r3, [pc, #124]	; (80004f0 <HAL_UART_MspInit+0xa0>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a1e      	ldr	r2, [pc, #120]	; (80004f0 <HAL_UART_MspInit+0xa0>)
 8000476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <HAL_UART_MspInit+0xa0>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80004a4:	4b15      	ldr	r3, [pc, #84]	; (80004fc <HAL_UART_MspInit+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a14      	ldr	r2, [pc, #80]	; (80004fc <HAL_UART_MspInit+0x90>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <HAL_UART_MspInit+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0304 	and.w	r3, r3, #4
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	68bb      	ldr	r3, [r7, #8]
=======
 8000488:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <HAL_UART_MspInit+0xa0>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a18      	ldr	r2, [pc, #96]	; (80004f0 <HAL_UART_MspInit+0xa0>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <HAL_UART_MspInit+0xa0>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< HEAD
 80004bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c0:	613b      	str	r3, [r7, #16]
=======
 80004a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004a4:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
<<<<<<< HEAD
 80004c2:	2302      	movs	r3, #2
 80004c4:	617b      	str	r3, [r7, #20]
=======
 80004a6:	2302      	movs	r3, #2
 80004a8:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
<<<<<<< HEAD
 80004c6:	2303      	movs	r3, #3
 80004c8:	61fb      	str	r3, [r7, #28]
=======
 80004aa:	2303      	movs	r3, #3
 80004ac:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	4619      	mov	r1, r3
 80004d0:	480b      	ldr	r0, [pc, #44]	; (8000500 <HAL_UART_MspInit+0x94>)
 80004d2:	f000 f9f1 	bl	80008b8 <HAL_GPIO_Init>
=======
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4619      	mov	r1, r3
 80004b4:	480f      	ldr	r0, [pc, #60]	; (80004f4 <HAL_UART_MspInit+0xa4>)
 80004b6:	f000 fa87 	bl	80009c8 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    GPIO_InitStruct.Pin = GPIO_PIN_10;
<<<<<<< HEAD
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	613b      	str	r3, [r7, #16]
=======
 80004ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004be:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
<<<<<<< HEAD
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
=======
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
=======
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <HAL_UART_MspInit+0x94>)
 80004ec:	f000 f9e4 	bl	80008b8 <HAL_GPIO_Init>
=======
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	4809      	ldr	r0, [pc, #36]	; (80004f4 <HAL_UART_MspInit+0xa4>)
 80004d0:	f000 fa7a 	bl	80009c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2100      	movs	r1, #0
 80004d8:	2025      	movs	r0, #37	; 0x25
 80004da:	f000 f9c8 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004de:	2025      	movs	r0, #37	; 0x25
 80004e0:	f000 f9e1 	bl	80008a6 <HAL_NVIC_EnableIRQ>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
<<<<<<< HEAD
 80004f0:	bf00      	nop
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40013800 	.word	0x40013800
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800
=======
 80004e4:	bf00      	nop
 80004e6:	3720      	adds	r7, #32
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40013800 	.word	0x40013800
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010800 	.word	0x40010800
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000504 <NMI_Handler>:
=======
080004f8 <NMI_Handler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
=======
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< HEAD
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
=======
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000510 <HardFault_Handler>:
=======
08000504 <HardFault_Handler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
=======
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000514:	e7fe      	b.n	8000514 <HardFault_Handler+0x4>
=======
 8000508:	e7fe      	b.n	8000508 <HardFault_Handler+0x4>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000516 <MemManage_Handler>:
=======
0800050a <MemManage_Handler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
=======
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800051a:	e7fe      	b.n	800051a <MemManage_Handler+0x4>
=======
 800050e:	e7fe      	b.n	800050e <MemManage_Handler+0x4>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
0800051c <BusFault_Handler>:
=======
08000510 <BusFault_Handler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
=======
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000520:	e7fe      	b.n	8000520 <BusFault_Handler+0x4>
=======
 8000514:	e7fe      	b.n	8000514 <BusFault_Handler+0x4>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000522 <UsageFault_Handler>:
=======
08000516 <UsageFault_Handler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
=======
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000526:	e7fe      	b.n	8000526 <UsageFault_Handler+0x4>
=======
 800051a:	e7fe      	b.n	800051a <UsageFault_Handler+0x4>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000528 <SVC_Handler>:
=======
0800051c <SVC_Handler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
=======
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
=======
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000534 <DebugMon_Handler>:
=======
08000528 <DebugMon_Handler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
=======
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
=======
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000540 <PendSV_Handler>:
=======
08000534 <PendSV_Handler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
=======
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
=======
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
0800054c <SysTick_Handler>:
=======
08000540 <SysTick_Handler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
=======
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8000550:	f000 f874 	bl	800063c <HAL_IncTick>
=======
 8000544:	f000 f87e 	bl	8000644 <HAL_IncTick>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
=======
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000558 <SystemInit>:
=======
0800054c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <USART1_IRQHandler+0x10>)
 8000552:	f001 f92b 	bl	80017ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000034 	.word	0x20000034

08000560 <SystemInit>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
=======
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
=======
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000564 <Reset_Handler>:
=======
0800056c <Reset_Handler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
<<<<<<< HEAD
 8000564:	2100      	movs	r1, #0
=======
 800056c:	2100      	movs	r1, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  b LoopCopyDataInit
<<<<<<< HEAD
 8000566:	e003      	b.n	8000570 <LoopCopyDataInit>
=======
 800056e:	e003      	b.n	8000578 <LoopCopyDataInit>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000568 <CopyDataInit>:
=======
08000570 <CopyDataInit>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

CopyDataInit:
  ldr r3, =_sidata
<<<<<<< HEAD
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <LoopFillZerobss+0x14>)
=======
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <LoopFillZerobss+0x14>)
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  ldr r3, [r3, r1]
<<<<<<< HEAD
 800056a:	585b      	ldr	r3, [r3, r1]
=======
 8000572:	585b      	ldr	r3, [r3, r1]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  str r3, [r0, r1]
<<<<<<< HEAD
 800056c:	5043      	str	r3, [r0, r1]
=======
 8000574:	5043      	str	r3, [r0, r1]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  adds r1, r1, #4
<<<<<<< HEAD
 800056e:	3104      	adds	r1, #4
=======
 8000576:	3104      	adds	r1, #4
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000570 <LoopCopyDataInit>:
=======
08000578 <LoopCopyDataInit>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

LoopCopyDataInit:
  ldr r0, =_sdata
<<<<<<< HEAD
 8000570:	480a      	ldr	r0, [pc, #40]	; (800059c <LoopFillZerobss+0x18>)
=======
 8000578:	480a      	ldr	r0, [pc, #40]	; (80005a4 <LoopFillZerobss+0x18>)
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  ldr r3, =_edata
<<<<<<< HEAD
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <LoopFillZerobss+0x1c>)
=======
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopFillZerobss+0x1c>)
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  adds r2, r0, r1
<<<<<<< HEAD
 8000574:	1842      	adds	r2, r0, r1
=======
 800057c:	1842      	adds	r2, r0, r1
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  cmp r2, r3
<<<<<<< HEAD
 8000576:	429a      	cmp	r2, r3
=======
 800057e:	429a      	cmp	r2, r3
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  bcc CopyDataInit
<<<<<<< HEAD
 8000578:	d3f6      	bcc.n	8000568 <CopyDataInit>
=======
 8000580:	d3f6      	bcc.n	8000570 <CopyDataInit>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  ldr r2, =_sbss
<<<<<<< HEAD
 800057a:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <LoopFillZerobss+0x20>)
=======
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <LoopFillZerobss+0x20>)
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  b LoopFillZerobss
<<<<<<< HEAD
 800057c:	e002      	b.n	8000584 <LoopFillZerobss>
=======
 8000584:	e002      	b.n	800058c <LoopFillZerobss>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
0800057e <FillZerobss>:
=======
08000586 <FillZerobss>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
<<<<<<< HEAD
 800057e:	2300      	movs	r3, #0
=======
 8000586:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  str r3, [r2], #4
<<<<<<< HEAD
 8000580:	f842 3b04 	str.w	r3, [r2], #4
=======
 8000588:	f842 3b04 	str.w	r3, [r2], #4
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000584 <LoopFillZerobss>:
=======
0800058c <LoopFillZerobss>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

LoopFillZerobss:
  ldr r3, = _ebss
<<<<<<< HEAD
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <LoopFillZerobss+0x24>)
=======
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LoopFillZerobss+0x24>)
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  cmp r2, r3
<<<<<<< HEAD
 8000586:	429a      	cmp	r2, r3
=======
 800058e:	429a      	cmp	r2, r3
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  bcc FillZerobss
<<<<<<< HEAD
 8000588:	d3f9      	bcc.n	800057e <FillZerobss>
=======
 8000590:	d3f9      	bcc.n	8000586 <FillZerobss>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

/* Call the clock system intitialization function.*/
    bl  SystemInit
<<<<<<< HEAD
 800058a:	f7ff ffe5 	bl	8000558 <SystemInit>
=======
 8000592:	f7ff ffe5 	bl	8000560 <SystemInit>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
/* Call static constructors */
    bl __libc_init_array
<<<<<<< HEAD
 800058e:	f001 f945 	bl	800181c <__libc_init_array>
=======
 8000596:	f001 fc0b 	bl	8001db0 <__libc_init_array>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
/* Call the application's entry point.*/
  bl main
<<<<<<< HEAD
 8000592:	f7ff fddb 	bl	800014c <main>
=======
 800059a:	f7ff fdd7 	bl	800014c <main>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  bx lr
<<<<<<< HEAD
 8000596:	4770      	bx	lr
=======
 800059e:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  ldr r3, =_sidata
<<<<<<< HEAD
 8000598:	080018c8 	.word	0x080018c8
=======
 80005a0:	08001e5c 	.word	0x08001e5c
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  ldr r0, =_sdata
<<<<<<< HEAD
 800059c:	20000000 	.word	0x20000000
=======
 80005a4:	20000000 	.word	0x20000000
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  ldr r3, =_edata
<<<<<<< HEAD
 80005a0:	2000000c 	.word	0x2000000c
=======
 80005a8:	2000000c 	.word	0x2000000c
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  ldr r2, =_sbss
<<<<<<< HEAD
 80005a4:	2000000c 	.word	0x2000000c
=======
 80005ac:	2000000c 	.word	0x2000000c
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  ldr r3, = _ebss
<<<<<<< HEAD
 80005a8:	20000080 	.word	0x20000080
=======
 80005b0:	20000078 	.word	0x20000078
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080005ac <ADC1_2_IRQHandler>:
=======
080005b4 <ADC1_2_IRQHandler>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 80005ac:	e7fe      	b.n	80005ac <ADC1_2_IRQHandler>
=======
 80005b4:	e7fe      	b.n	80005b4 <ADC1_2_IRQHandler>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
	...

<<<<<<< HEAD
080005b0 <HAL_Init>:
=======
080005b8 <HAL_Init>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
=======
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <HAL_Init+0x28>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <HAL_Init+0x28>)
 80005ba:	f043 0310 	orr.w	r3, r3, #16
 80005be:	6013      	str	r3, [r2, #0]
=======
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x28>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_Init+0x28>)
 80005c2:	f043 0310 	orr.w	r3, r3, #16
 80005c6:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80005c0:	2003      	movs	r0, #3
 80005c2:	f000 f929 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>
=======
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f945 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
<<<<<<< HEAD
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 f808 	bl	80005dc <HAL_InitTick>
=======
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Init the low level hardware */
  HAL_MspInit();
<<<<<<< HEAD
 80005cc:	f7ff fefe 	bl	80003cc <HAL_MspInit>
=======
 80005d4:	f7ff ff0a 	bl	80003ec <HAL_MspInit>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80005d0:	2300      	movs	r3, #0
=======
 80005d8:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 80005d2:	4618      	mov	r0, r3
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40022000 	.word	0x40022000
=======
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40022000 	.word	0x40022000
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080005dc <HAL_InitTick>:
=======
080005e4 <HAL_InitTick>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
=======
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
<<<<<<< HEAD
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x54>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_InitTick+0x58>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f933 	bl	8000866 <HAL_SYSTICK_Config>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_InitTick+0x2e>
=======
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f95d 	bl	80008c2 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8000606:	2301      	movs	r3, #1
 8000608:	e00e      	b.n	8000628 <HAL_InitTick+0x4c>
=======
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d80a      	bhi.n	8000626 <HAL_InitTick+0x4a>
=======
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
<<<<<<< HEAD
 8000610:	2200      	movs	r2, #0
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
 8000618:	f000 f909 	bl	800082e <HAL_NVIC_SetPriority>
=======
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f925 	bl	800086e <HAL_NVIC_SetPriority>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    uwTickPrio = TickPriority;
<<<<<<< HEAD
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <HAL_InitTick+0x5c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
=======
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <HAL_InitTick+0x4c>
=======
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    return HAL_ERROR;
<<<<<<< HEAD
 8000626:	2301      	movs	r3, #1
=======
 800062e:	2301      	movs	r3, #1
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000000 	.word	0x20000000
 8000634:	20000008 	.word	0x20000008
 8000638:	20000004 	.word	0x20000004
=======
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	20000008 	.word	0x20000008
 8000640:	20000004 	.word	0x20000004
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
0800063c <HAL_IncTick>:
=======
08000644 <HAL_IncTick>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
=======
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uwTick += uwTickFreq;
<<<<<<< HEAD
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_IncTick+0x1c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_IncTick+0x20>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <HAL_IncTick+0x20>)
 800064e:	6013      	str	r3, [r2, #0]
=======
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x1c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x20>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x20>)
 8000656:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000008 	.word	0x20000008
 800065c:	2000007c 	.word	0x2000007c
=======
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000008 	.word	0x20000008
 8000664:	20000074 	.word	0x20000074
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000660 <HAL_GetTick>:
=======
08000668 <HAL_GetTick>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
=======
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  return uwTick;
<<<<<<< HEAD
 8000664:	4b02      	ldr	r3, [pc, #8]	; (8000670 <HAL_GetTick+0x10>)
 8000666:	681b      	ldr	r3, [r3, #0]
=======
 800066c:	4b02      	ldr	r3, [pc, #8]	; (8000678 <HAL_GetTick+0x10>)
 800066e:	681b      	ldr	r3, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	2000007c 	.word	0x2000007c
=======
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000074 	.word	0x20000074
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000674 <HAL_Delay>:
=======
0800067c <HAL_Delay>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
=======
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint32_t tickstart = HAL_GetTick();
<<<<<<< HEAD
 800067c:	f7ff fff0 	bl	8000660 <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
=======
 8000684:	f7ff fff0 	bl	8000668 <HAL_GetTick>
 8000688:	60b8      	str	r0, [r7, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint32_t wait = Delay;
<<<<<<< HEAD
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]
=======
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
<<<<<<< HEAD
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
=======
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000694:	d005      	beq.n	80006a2 <HAL_Delay+0x26>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    wait += (uint32_t)(uwTickFreq);
<<<<<<< HEAD
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
=======
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_Delay+0x40>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }

  while ((HAL_GetTick() - tickstart) < wait)
<<<<<<< HEAD
 800069a:	bf00      	nop
 800069c:	f7ff ffe0 	bl	8000660 <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f7      	bhi.n	800069c <HAL_Delay+0x28>
=======
 80006a2:	bf00      	nop
 80006a4:	f7ff ffe0 	bl	8000668 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d8f7      	bhi.n	80006a4 <HAL_Delay+0x28>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
  }
}
<<<<<<< HEAD
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000008 	.word	0x20000008
=======
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000008 	.word	0x20000008
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080006b8 <__NVIC_SetPriorityGrouping>:
=======
080006c0 <__NVIC_SetPriorityGrouping>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
=======
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
<<<<<<< HEAD
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]
=======
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
<<<<<<< HEAD
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
=======
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
<<<<<<< HEAD
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
=======
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
<<<<<<< HEAD
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
=======
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	021a      	lsls	r2, r3, #8
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
<<<<<<< HEAD
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
=======
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	4313      	orrs	r3, r2
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  reg_value  =  (reg_value                                   |
<<<<<<< HEAD
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
=======
 80006e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  SCB->AIRCR =  reg_value;
<<<<<<< HEAD
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
=======
 80006f2:	4a04      	ldr	r2, [pc, #16]	; (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	60d3      	str	r3, [r2, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
=======
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000700 <__NVIC_GetPriorityGrouping>:
=======
08000708 <__NVIC_GetPriorityGrouping>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
=======
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
<<<<<<< HEAD
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
=======
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <__NVIC_GetPriorityGrouping+0x18>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	f003 0307 	and.w	r3, r3, #7
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00
=======
 8000716:	4618      	mov	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
0800071c <__NVIC_SetPriority>:
=======
08000724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	2b00      	cmp	r3, #0
 8000734:	db0b      	blt.n	800074e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 021f 	and.w	r2, r3, #31
 800073c:	4906      	ldr	r1, [pc, #24]	; (8000758 <__NVIC_EnableIRQ+0x34>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100

0800075c <__NVIC_SetPriority>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
=======
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  if ((int32_t)(IRQn) >= 0)
<<<<<<< HEAD
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db0a      	blt.n	8000746 <__NVIC_SetPriority+0x2a>
=======
 8000768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	db0a      	blt.n	8000786 <__NVIC_SetPriority+0x2a>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	490c      	ldr	r1, [pc, #48]	; (8000768 <__NVIC_SetPriority+0x4c>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	440b      	add	r3, r1
 8000740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	490c      	ldr	r1, [pc, #48]	; (80007a8 <__NVIC_SetPriority+0x4c>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	b2d2      	uxtb	r2, r2
 800077e:	440b      	add	r3, r1
 8000780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8000744:	e00a      	b.n	800075c <__NVIC_SetPriority+0x40>
=======
 8000784:	e00a      	b.n	800079c <__NVIC_SetPriority+0x40>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4908      	ldr	r1, [pc, #32]	; (800076c <__NVIC_SetPriority+0x50>)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	3b04      	subs	r3, #4
 8000754:	0112      	lsls	r2, r2, #4
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	440b      	add	r3, r1
 800075a:	761a      	strb	r2, [r3, #24]
=======
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4908      	ldr	r1, [pc, #32]	; (80007ac <__NVIC_SetPriority+0x50>)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	3b04      	subs	r3, #4
 8000794:	0112      	lsls	r2, r2, #4
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	440b      	add	r3, r1
 800079a:	761a      	strb	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000e100 	.word	0xe000e100
 800076c:	e000ed00 	.word	0xe000ed00
=======
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000e100 	.word	0xe000e100
 80007ac:	e000ed00 	.word	0xe000ed00
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000770 <NVIC_EncodePriority>:
=======
080007b0 <NVIC_EncodePriority>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
=======
 80007b0:	b480      	push	{r7}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
<<<<<<< HEAD
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
=======
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
=======
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f1c3 0307 	rsb	r3, r3, #7
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	bf28      	it	cs
 80007ce:	2304      	movcs	r3, #4
 80007d0:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
<<<<<<< HEAD
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
=======
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3304      	adds	r3, #4
 80007d6:	2b06      	cmp	r3, #6
 80007d8:	d902      	bls.n	80007e0 <NVIC_EncodePriority+0x30>
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3b03      	subs	r3, #3
 80007de:	e000      	b.n	80007e2 <NVIC_EncodePriority+0x32>
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
<<<<<<< HEAD
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43da      	mvns	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	401a      	ands	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	409a      	lsls	r2, r3
=======
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	43da      	mvns	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	401a      	ands	r2, r3
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	409a      	lsls	r2, r3
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
<<<<<<< HEAD
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	400b      	ands	r3, r1
=======
 80007f8:	f04f 31ff 	mov.w	r1, #4294967295
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	43d9      	mvns	r1, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	400b      	ands	r3, r1
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
<<<<<<< HEAD
 80007c8:	4313      	orrs	r3, r2
=======
 8000808:	4313      	orrs	r3, r2
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
         );
}
<<<<<<< HEAD
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	; 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
=======
 800080a:	4618      	mov	r0, r3
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080007d4 <SysTick_Config>:
=======
08000814 <SysTick_Config>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
=======
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
<<<<<<< HEAD
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
=======
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000824:	d301      	bcc.n	800082a <SysTick_Config+0x16>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    return (1UL);                                                   /* Reload value impossible */
<<<<<<< HEAD
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
=======
 8000826:	2301      	movs	r3, #1
 8000828:	e00f      	b.n	800084a <SysTick_Config+0x36>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
<<<<<<< HEAD
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
=======
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <SysTick_Config+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	6053      	str	r3, [r2, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
<<<<<<< HEAD
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f7ff ff90 	bl	800071c <__NVIC_SetPriority>
=======
 8000832:	210f      	movs	r1, #15
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f7ff ff90 	bl	800075c <__NVIC_SetPriority>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
<<<<<<< HEAD
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
=======
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SysTick_Config+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
<<<<<<< HEAD
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
=======
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SysTick_Config+0x40>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
<<<<<<< HEAD
 8000808:	2300      	movs	r3, #0
=======
 8000848:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010
=======
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000818 <HAL_NVIC_SetPriorityGrouping>:
=======
08000858 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
=======
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff49 	bl	80006b8 <__NVIC_SetPriorityGrouping>
=======
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff2d 	bl	80006c0 <__NVIC_SetPriorityGrouping>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
=======
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
0800082e <HAL_NVIC_SetPriority>:
=======
0800086e <HAL_NVIC_SetPriority>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
=======
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint32_t prioritygroup = 0x00U;
<<<<<<< HEAD
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
=======
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8000840:	f7ff ff5e 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]
=======
 8000880:	f7ff ff42 	bl	8000708 <__NVIC_GetPriorityGrouping>
 8000884:	6178      	str	r0, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
<<<<<<< HEAD
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff90 	bl	8000770 <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5f 	bl	800071c <__NVIC_SetPriority>
=======
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	f7ff ff90 	bl	80007b0 <NVIC_EncodePriority>
 8000890:	4602      	mov	r2, r0
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff5f 	bl	800075c <__NVIC_SetPriority>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
=======
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000866 <HAL_SYSTICK_Config>:
=======
080008a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff35 	bl	8000724 <__NVIC_EnableIRQ>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
=======
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
   return SysTick_Config(TicksNumb);
<<<<<<< HEAD
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffb0 	bl	80007d4 <SysTick_Config>
 8000874:	4603      	mov	r3, r0
=======
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffa2 	bl	8000814 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	e00e      	b.n	80008ae <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	795b      	ldrb	r3, [r3, #5]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d105      	bne.n	80008a6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff fdc5 	bl	8000430 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2201      	movs	r2, #1
 80008aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
=======
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
	...

<<<<<<< HEAD
080008b8 <HAL_GPIO_Init>:
=======
080008dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d005      	beq.n	80008fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2204      	movs	r2, #4
 80008f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	e051      	b.n	80009a2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f022 020e 	bic.w	r2, r2, #14
 800090c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f022 0201 	bic.w	r2, r2, #1
 800091c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <HAL_DMA_Abort_IT+0xd0>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d029      	beq.n	800097c <HAL_DMA_Abort_IT+0xa0>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <HAL_DMA_Abort_IT+0xd4>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d022      	beq.n	8000978 <HAL_DMA_Abort_IT+0x9c>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <HAL_DMA_Abort_IT+0xd8>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d01a      	beq.n	8000972 <HAL_DMA_Abort_IT+0x96>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <HAL_DMA_Abort_IT+0xdc>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d012      	beq.n	800096c <HAL_DMA_Abort_IT+0x90>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <HAL_DMA_Abort_IT+0xe0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d00a      	beq.n	8000966 <HAL_DMA_Abort_IT+0x8a>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a1a      	ldr	r2, [pc, #104]	; (80009c0 <HAL_DMA_Abort_IT+0xe4>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d102      	bne.n	8000960 <HAL_DMA_Abort_IT+0x84>
 800095a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800095e:	e00e      	b.n	800097e <HAL_DMA_Abort_IT+0xa2>
 8000960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000964:	e00b      	b.n	800097e <HAL_DMA_Abort_IT+0xa2>
 8000966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096a:	e008      	b.n	800097e <HAL_DMA_Abort_IT+0xa2>
 800096c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000970:	e005      	b.n	800097e <HAL_DMA_Abort_IT+0xa2>
 8000972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000976:	e002      	b.n	800097e <HAL_DMA_Abort_IT+0xa2>
 8000978:	2310      	movs	r3, #16
 800097a:	e000      	b.n	800097e <HAL_DMA_Abort_IT+0xa2>
 800097c:	2301      	movs	r3, #1
 800097e:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <HAL_DMA_Abort_IT+0xe8>)
 8000980:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	4798      	blx	r3
    } 
  }
  return status;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40020008 	.word	0x40020008
 80009b0:	4002001c 	.word	0x4002001c
 80009b4:	40020030 	.word	0x40020030
 80009b8:	40020044 	.word	0x40020044
 80009bc:	40020058 	.word	0x40020058
 80009c0:	4002006c 	.word	0x4002006c
 80009c4:	40020000 	.word	0x40020000

080009c8 <HAL_GPIO_Init>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80008b8:	b480      	push	{r7}
 80008ba:	b08b      	sub	sp, #44	; 0x2c
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
=======
 80009c8:	b480      	push	{r7}
 80009ca:	b08b      	sub	sp, #44	; 0x2c
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint32_t position = 0x00u;
<<<<<<< HEAD
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
=======
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 80008ca:	e127      	b.n	8000b1c <HAL_GPIO_Init+0x264>
=======
 80009da:	e127      	b.n	8000c2c <HAL_GPIO_Init+0x264>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
<<<<<<< HEAD
 80008cc:	2201      	movs	r2, #1
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	61fb      	str	r3, [r7, #28]
=======
 80009dc:	2201      	movs	r2, #1
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
<<<<<<< HEAD
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
=======
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	69fa      	ldr	r2, [r7, #28]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    if (iocurrent == ioposition)
<<<<<<< HEAD
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	f040 8116 	bne.w	8000b16 <HAL_GPIO_Init+0x25e>
=======
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	f040 8116 	bne.w	8000c26 <HAL_GPIO_Init+0x25e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b12      	cmp	r3, #18
 80008f0:	d034      	beq.n	800095c <HAL_GPIO_Init+0xa4>
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d80d      	bhi.n	8000912 <HAL_GPIO_Init+0x5a>
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d02b      	beq.n	8000952 <HAL_GPIO_Init+0x9a>
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d804      	bhi.n	8000908 <HAL_GPIO_Init+0x50>
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d031      	beq.n	8000966 <HAL_GPIO_Init+0xae>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d01c      	beq.n	8000940 <HAL_GPIO_Init+0x88>
=======
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d034      	beq.n	8000a6c <HAL_GPIO_Init+0xa4>
 8000a02:	2b12      	cmp	r3, #18
 8000a04:	d80d      	bhi.n	8000a22 <HAL_GPIO_Init+0x5a>
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d02b      	beq.n	8000a62 <HAL_GPIO_Init+0x9a>
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d804      	bhi.n	8000a18 <HAL_GPIO_Init+0x50>
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d031      	beq.n	8000a76 <HAL_GPIO_Init+0xae>
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d01c      	beq.n	8000a50 <HAL_GPIO_Init+0x88>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8000906:	e048      	b.n	800099a <HAL_GPIO_Init+0xe2>
=======
 8000a16:	e048      	b.n	8000aaa <HAL_GPIO_Init+0xe2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8000908:	2b03      	cmp	r3, #3
 800090a:	d043      	beq.n	8000994 <HAL_GPIO_Init+0xdc>
 800090c:	2b11      	cmp	r3, #17
 800090e:	d01b      	beq.n	8000948 <HAL_GPIO_Init+0x90>
=======
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d043      	beq.n	8000aa4 <HAL_GPIO_Init+0xdc>
 8000a1c:	2b11      	cmp	r3, #17
 8000a1e:	d01b      	beq.n	8000a58 <HAL_GPIO_Init+0x90>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          break;
<<<<<<< HEAD
 8000910:	e043      	b.n	800099a <HAL_GPIO_Init+0xe2>
=======
 8000a20:	e043      	b.n	8000aaa <HAL_GPIO_Init+0xe2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8000912:	4a89      	ldr	r2, [pc, #548]	; (8000b38 <HAL_GPIO_Init+0x280>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d026      	beq.n	8000966 <HAL_GPIO_Init+0xae>
 8000918:	4a87      	ldr	r2, [pc, #540]	; (8000b38 <HAL_GPIO_Init+0x280>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d806      	bhi.n	800092c <HAL_GPIO_Init+0x74>
 800091e:	4a87      	ldr	r2, [pc, #540]	; (8000b3c <HAL_GPIO_Init+0x284>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d020      	beq.n	8000966 <HAL_GPIO_Init+0xae>
 8000924:	4a86      	ldr	r2, [pc, #536]	; (8000b40 <HAL_GPIO_Init+0x288>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d01d      	beq.n	8000966 <HAL_GPIO_Init+0xae>
=======
 8000a22:	4a89      	ldr	r2, [pc, #548]	; (8000c48 <HAL_GPIO_Init+0x280>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d026      	beq.n	8000a76 <HAL_GPIO_Init+0xae>
 8000a28:	4a87      	ldr	r2, [pc, #540]	; (8000c48 <HAL_GPIO_Init+0x280>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d806      	bhi.n	8000a3c <HAL_GPIO_Init+0x74>
 8000a2e:	4a87      	ldr	r2, [pc, #540]	; (8000c4c <HAL_GPIO_Init+0x284>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d020      	beq.n	8000a76 <HAL_GPIO_Init+0xae>
 8000a34:	4a86      	ldr	r2, [pc, #536]	; (8000c50 <HAL_GPIO_Init+0x288>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d01d      	beq.n	8000a76 <HAL_GPIO_Init+0xae>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          break;
<<<<<<< HEAD
 800092a:	e036      	b.n	800099a <HAL_GPIO_Init+0xe2>
=======
 8000a3a:	e036      	b.n	8000aaa <HAL_GPIO_Init+0xe2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 800092c:	4a85      	ldr	r2, [pc, #532]	; (8000b44 <HAL_GPIO_Init+0x28c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d019      	beq.n	8000966 <HAL_GPIO_Init+0xae>
 8000932:	4a85      	ldr	r2, [pc, #532]	; (8000b48 <HAL_GPIO_Init+0x290>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d016      	beq.n	8000966 <HAL_GPIO_Init+0xae>
 8000938:	4a84      	ldr	r2, [pc, #528]	; (8000b4c <HAL_GPIO_Init+0x294>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d013      	beq.n	8000966 <HAL_GPIO_Init+0xae>
=======
 8000a3c:	4a85      	ldr	r2, [pc, #532]	; (8000c54 <HAL_GPIO_Init+0x28c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d019      	beq.n	8000a76 <HAL_GPIO_Init+0xae>
 8000a42:	4a85      	ldr	r2, [pc, #532]	; (8000c58 <HAL_GPIO_Init+0x290>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d016      	beq.n	8000a76 <HAL_GPIO_Init+0xae>
 8000a48:	4a84      	ldr	r2, [pc, #528]	; (8000c5c <HAL_GPIO_Init+0x294>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d013      	beq.n	8000a76 <HAL_GPIO_Init+0xae>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          break;
<<<<<<< HEAD
 800093e:	e02c      	b.n	800099a <HAL_GPIO_Init+0xe2>
=======
 8000a4e:	e02c      	b.n	8000aaa <HAL_GPIO_Init+0xe2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
<<<<<<< HEAD
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	623b      	str	r3, [r7, #32]
=======
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          break;
<<<<<<< HEAD
 8000946:	e028      	b.n	800099a <HAL_GPIO_Init+0xe2>
=======
 8000a56:	e028      	b.n	8000aaa <HAL_GPIO_Init+0xe2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
<<<<<<< HEAD
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	3304      	adds	r3, #4
 800094e:	623b      	str	r3, [r7, #32]
=======
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          break;
<<<<<<< HEAD
 8000950:	e023      	b.n	800099a <HAL_GPIO_Init+0xe2>
=======
 8000a60:	e023      	b.n	8000aaa <HAL_GPIO_Init+0xe2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
<<<<<<< HEAD
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	3308      	adds	r3, #8
 8000958:	623b      	str	r3, [r7, #32]
=======
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	3308      	adds	r3, #8
 8000a68:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          break;
<<<<<<< HEAD
 800095a:	e01e      	b.n	800099a <HAL_GPIO_Init+0xe2>
=======
 8000a6a:	e01e      	b.n	8000aaa <HAL_GPIO_Init+0xe2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
<<<<<<< HEAD
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	330c      	adds	r3, #12
 8000962:	623b      	str	r3, [r7, #32]
=======
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	330c      	adds	r3, #12
 8000a72:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          break;
<<<<<<< HEAD
 8000964:	e019      	b.n	800099a <HAL_GPIO_Init+0xe2>
=======
 8000a74:	e019      	b.n	8000aaa <HAL_GPIO_Init+0xe2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          if (GPIO_Init->Pull == GPIO_NOPULL)
<<<<<<< HEAD
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <HAL_GPIO_Init+0xbc>
=======
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <HAL_GPIO_Init+0xbc>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
<<<<<<< HEAD
 800096e:	2304      	movs	r3, #4
 8000970:	623b      	str	r3, [r7, #32]
=======
 8000a7e:	2304      	movs	r3, #4
 8000a80:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          break;
<<<<<<< HEAD
 8000972:	e012      	b.n	800099a <HAL_GPIO_Init+0xe2>
=======
 8000a82:	e012      	b.n	8000aaa <HAL_GPIO_Init+0xe2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          else if (GPIO_Init->Pull == GPIO_PULLUP)
<<<<<<< HEAD
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d105      	bne.n	8000988 <HAL_GPIO_Init+0xd0>
=======
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d105      	bne.n	8000a98 <HAL_GPIO_Init+0xd0>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
<<<<<<< HEAD
 800097c:	2308      	movs	r3, #8
 800097e:	623b      	str	r3, [r7, #32]
=======
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
            GPIOx->BSRR = ioposition;
<<<<<<< HEAD
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	611a      	str	r2, [r3, #16]
=======
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          break;
<<<<<<< HEAD
 8000986:	e008      	b.n	800099a <HAL_GPIO_Init+0xe2>
=======
 8000a96:	e008      	b.n	8000aaa <HAL_GPIO_Init+0xe2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
<<<<<<< HEAD
 8000988:	2308      	movs	r3, #8
 800098a:	623b      	str	r3, [r7, #32]
=======
 8000a98:	2308      	movs	r3, #8
 8000a9a:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
            GPIOx->BRR = ioposition;
<<<<<<< HEAD
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	69fa      	ldr	r2, [r7, #28]
 8000990:	615a      	str	r2, [r3, #20]
=======
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	69fa      	ldr	r2, [r7, #28]
 8000aa0:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          break;
<<<<<<< HEAD
 8000992:	e002      	b.n	800099a <HAL_GPIO_Init+0xe2>
=======
 8000aa2:	e002      	b.n	8000aaa <HAL_GPIO_Init+0xe2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
<<<<<<< HEAD
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
=======
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          break;
<<<<<<< HEAD
 8000998:	bf00      	nop
=======
 8000aa8:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	2bff      	cmp	r3, #255	; 0xff
 800099e:	d801      	bhi.n	80009a4 <HAL_GPIO_Init+0xec>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	e001      	b.n	80009a8 <HAL_GPIO_Init+0xf0>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3304      	adds	r3, #4
 80009a8:	617b      	str	r3, [r7, #20]
=======
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	2bff      	cmp	r3, #255	; 0xff
 8000aae:	d801      	bhi.n	8000ab4 <HAL_GPIO_Init+0xec>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	e001      	b.n	8000ab8 <HAL_GPIO_Init+0xf0>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
<<<<<<< HEAD
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	2bff      	cmp	r3, #255	; 0xff
 80009ae:	d802      	bhi.n	80009b6 <HAL_GPIO_Init+0xfe>
 80009b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	e002      	b.n	80009bc <HAL_GPIO_Init+0x104>
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	3b08      	subs	r3, #8
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	613b      	str	r3, [r7, #16]
=======
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	2bff      	cmp	r3, #255	; 0xff
 8000abe:	d802      	bhi.n	8000ac6 <HAL_GPIO_Init+0xfe>
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	e002      	b.n	8000acc <HAL_GPIO_Init+0x104>
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	3b08      	subs	r3, #8
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
<<<<<<< HEAD
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	210f      	movs	r1, #15
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	401a      	ands	r2, r3
 80009ce:	6a39      	ldr	r1, [r7, #32]
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	431a      	orrs	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	601a      	str	r2, [r3, #0]
=======
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	401a      	ands	r2, r3
 8000ade:	6a39      	ldr	r1, [r7, #32]
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 8096 	beq.w	8000b16 <HAL_GPIO_Init+0x25e>
=======
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f000 8096 	beq.w	8000c26 <HAL_GPIO_Init+0x25e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 80009ea:	4b59      	ldr	r3, [pc, #356]	; (8000b50 <HAL_GPIO_Init+0x298>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a58      	ldr	r2, [pc, #352]	; (8000b50 <HAL_GPIO_Init+0x298>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b56      	ldr	r3, [pc, #344]	; (8000b50 <HAL_GPIO_Init+0x298>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
=======
 8000afa:	4b59      	ldr	r3, [pc, #356]	; (8000c60 <HAL_GPIO_Init+0x298>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	4a58      	ldr	r2, [pc, #352]	; (8000c60 <HAL_GPIO_Init+0x298>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6193      	str	r3, [r2, #24]
 8000b06:	4b56      	ldr	r3, [pc, #344]	; (8000c60 <HAL_GPIO_Init+0x298>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        temp = AFIO->EXTICR[position >> 2u];
<<<<<<< HEAD
 8000a02:	4a54      	ldr	r2, [pc, #336]	; (8000b54 <HAL_GPIO_Init+0x29c>)
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	3302      	adds	r3, #2
 8000a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0e:	60fb      	str	r3, [r7, #12]
=======
 8000b12:	4a54      	ldr	r2, [pc, #336]	; (8000c64 <HAL_GPIO_Init+0x29c>)
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3302      	adds	r3, #2
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
<<<<<<< HEAD
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	f003 0303 	and.w	r3, r3, #3
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	220f      	movs	r2, #15
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4013      	ands	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
=======
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	220f      	movs	r2, #15
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	4013      	ands	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
<<<<<<< HEAD
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4b      	ldr	r2, [pc, #300]	; (8000b58 <HAL_GPIO_Init+0x2a0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d013      	beq.n	8000a56 <HAL_GPIO_Init+0x19e>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4a      	ldr	r2, [pc, #296]	; (8000b5c <HAL_GPIO_Init+0x2a4>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d00d      	beq.n	8000a52 <HAL_GPIO_Init+0x19a>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a49      	ldr	r2, [pc, #292]	; (8000b60 <HAL_GPIO_Init+0x2a8>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d007      	beq.n	8000a4e <HAL_GPIO_Init+0x196>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a48      	ldr	r2, [pc, #288]	; (8000b64 <HAL_GPIO_Init+0x2ac>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d101      	bne.n	8000a4a <HAL_GPIO_Init+0x192>
 8000a46:	2303      	movs	r3, #3
 8000a48:	e006      	b.n	8000a58 <HAL_GPIO_Init+0x1a0>
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	e004      	b.n	8000a58 <HAL_GPIO_Init+0x1a0>
 8000a4e:	2302      	movs	r3, #2
 8000a50:	e002      	b.n	8000a58 <HAL_GPIO_Init+0x1a0>
 8000a52:	2301      	movs	r3, #1
 8000a54:	e000      	b.n	8000a58 <HAL_GPIO_Init+0x1a0>
 8000a56:	2300      	movs	r3, #0
 8000a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a5a:	f002 0203 	and.w	r2, r2, #3
 8000a5e:	0092      	lsls	r2, r2, #2
 8000a60:	4093      	lsls	r3, r2
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
=======
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a4b      	ldr	r2, [pc, #300]	; (8000c68 <HAL_GPIO_Init+0x2a0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d013      	beq.n	8000b66 <HAL_GPIO_Init+0x19e>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a4a      	ldr	r2, [pc, #296]	; (8000c6c <HAL_GPIO_Init+0x2a4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d00d      	beq.n	8000b62 <HAL_GPIO_Init+0x19a>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a49      	ldr	r2, [pc, #292]	; (8000c70 <HAL_GPIO_Init+0x2a8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d007      	beq.n	8000b5e <HAL_GPIO_Init+0x196>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a48      	ldr	r2, [pc, #288]	; (8000c74 <HAL_GPIO_Init+0x2ac>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d101      	bne.n	8000b5a <HAL_GPIO_Init+0x192>
 8000b56:	2303      	movs	r3, #3
 8000b58:	e006      	b.n	8000b68 <HAL_GPIO_Init+0x1a0>
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	e004      	b.n	8000b68 <HAL_GPIO_Init+0x1a0>
 8000b5e:	2302      	movs	r3, #2
 8000b60:	e002      	b.n	8000b68 <HAL_GPIO_Init+0x1a0>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <HAL_GPIO_Init+0x1a0>
 8000b66:	2300      	movs	r3, #0
 8000b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b6a:	f002 0203 	and.w	r2, r2, #3
 8000b6e:	0092      	lsls	r2, r2, #2
 8000b70:	4093      	lsls	r3, r2
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        AFIO->EXTICR[position >> 2u] = temp;
<<<<<<< HEAD
 8000a68:	493a      	ldr	r1, [pc, #232]	; (8000b54 <HAL_GPIO_Init+0x29c>)
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	3302      	adds	r3, #2
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8000b78:	493a      	ldr	r1, [pc, #232]	; (8000c64 <HAL_GPIO_Init+0x29c>)
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	3302      	adds	r3, #2
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d006      	beq.n	8000a90 <HAL_GPIO_Init+0x1d8>
=======
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d006      	beq.n	8000ba0 <HAL_GPIO_Init+0x1d8>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          SET_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8000a82:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4938      	ldr	r1, [pc, #224]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	600b      	str	r3, [r1, #0]
 8000a8e:	e006      	b.n	8000a9e <HAL_GPIO_Init+0x1e6>
=======
 8000b92:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4938      	ldr	r1, [pc, #224]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]
 8000b9e:	e006      	b.n	8000bae <HAL_GPIO_Init+0x1e6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8000a90:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	4933      	ldr	r1, [pc, #204]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	600b      	str	r3, [r1, #0]
=======
 8000ba0:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4933      	ldr	r1, [pc, #204]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	600b      	str	r3, [r1, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d006      	beq.n	8000ab8 <HAL_GPIO_Init+0x200>
=======
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <HAL_GPIO_Init+0x200>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          SET_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	492e      	ldr	r1, [pc, #184]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	604b      	str	r3, [r1, #4]
 8000ab6:	e006      	b.n	8000ac6 <HAL_GPIO_Init+0x20e>
=======
 8000bba:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	492e      	ldr	r1, [pc, #184]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	604b      	str	r3, [r1, #4]
 8000bc6:	e006      	b.n	8000bd6 <HAL_GPIO_Init+0x20e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	4929      	ldr	r1, [pc, #164]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	604b      	str	r3, [r1, #4]
=======
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	4929      	ldr	r1, [pc, #164]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	604b      	str	r3, [r1, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <HAL_GPIO_Init+0x228>
=======
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <HAL_GPIO_Init+0x228>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          SET_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	4924      	ldr	r1, [pc, #144]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	608b      	str	r3, [r1, #8]
 8000ade:	e006      	b.n	8000aee <HAL_GPIO_Init+0x236>
=======
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	4924      	ldr	r1, [pc, #144]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	608b      	str	r3, [r1, #8]
 8000bee:	e006      	b.n	8000bfe <HAL_GPIO_Init+0x236>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000ae2:	689a      	ldr	r2, [r3, #8]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	491f      	ldr	r1, [pc, #124]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	608b      	str	r3, [r1, #8]
=======
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	491f      	ldr	r1, [pc, #124]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	608b      	str	r3, [r1, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <HAL_GPIO_Init+0x250>
=======
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_GPIO_Init+0x250>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          SET_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000afc:	68da      	ldr	r2, [r3, #12]
 8000afe:	491a      	ldr	r1, [pc, #104]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60cb      	str	r3, [r1, #12]
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x25e>
=======
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	491a      	ldr	r1, [pc, #104]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60cb      	str	r3, [r1, #12]
 8000c16:	e006      	b.n	8000c26 <HAL_GPIO_Init+0x25e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	4915      	ldr	r1, [pc, #84]	; (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000b12:	4013      	ands	r3, r2
 8000b14:	60cb      	str	r3, [r1, #12]
=======
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4915      	ldr	r1, [pc, #84]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	60cb      	str	r3, [r1, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
      }
    }

	position++;
<<<<<<< HEAD
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	3301      	adds	r3, #1
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	3301      	adds	r3, #1
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	fa22 f303 	lsr.w	r3, r2, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f47f aed0 	bne.w	80008cc <HAL_GPIO_Init+0x14>
=======
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	fa22 f303 	lsr.w	r3, r2, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f47f aed0 	bne.w	80009dc <HAL_GPIO_Init+0x14>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
}
<<<<<<< HEAD
 8000b2c:	bf00      	nop
 8000b2e:	372c      	adds	r7, #44	; 0x2c
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	10210000 	.word	0x10210000
 8000b3c:	10110000 	.word	0x10110000
 8000b40:	10120000 	.word	0x10120000
 8000b44:	10310000 	.word	0x10310000
 8000b48:	10320000 	.word	0x10320000
 8000b4c:	10220000 	.word	0x10220000
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010000 	.word	0x40010000
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	40010c00 	.word	0x40010c00
 8000b60:	40011000 	.word	0x40011000
 8000b64:	40011400 	.word	0x40011400
 8000b68:	40010400 	.word	0x40010400
=======
 8000c3c:	bf00      	nop
 8000c3e:	372c      	adds	r7, #44	; 0x2c
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	10210000 	.word	0x10210000
 8000c4c:	10110000 	.word	0x10110000
 8000c50:	10120000 	.word	0x10120000
 8000c54:	10310000 	.word	0x10310000
 8000c58:	10320000 	.word	0x10320000
 8000c5c:	10220000 	.word	0x10220000
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010000 	.word	0x40010000
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	40010c00 	.word	0x40010c00
 8000c70:	40011000 	.word	0x40011000
 8000c74:	40011400 	.word	0x40011400
 8000c78:	40010400 	.word	0x40010400
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000b6c <HAL_GPIO_ReadPin>:
=======
08000c7c <HAL_GPIO_ReadPin>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
=======
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	807b      	strh	r3, [r7, #2]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <HAL_GPIO_ReadPin+0x1e>
=======
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <HAL_GPIO_ReadPin+0x1e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    bitstatus = GPIO_PIN_SET;
<<<<<<< HEAD
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	e001      	b.n	8000b8e <HAL_GPIO_ReadPin+0x22>
=======
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e001      	b.n	8000c9e <HAL_GPIO_ReadPin+0x22>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]
=======
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
  return bitstatus;
<<<<<<< HEAD
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
=======
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
=======
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000b9a <HAL_GPIO_WritePin>:
=======
08000caa <HAL_GPIO_WritePin>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	807b      	strh	r3, [r7, #2]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	707b      	strb	r3, [r7, #1]
=======
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	807b      	strh	r3, [r7, #2]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	707b      	strb	r3, [r7, #1]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8000baa:	787b      	ldrb	r3, [r7, #1]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <HAL_GPIO_WritePin+0x1e>
=======
 8000cba:	787b      	ldrb	r3, [r7, #1]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_WritePin+0x1e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    GPIOx->BSRR = GPIO_Pin;
<<<<<<< HEAD
 8000bb0:	887a      	ldrh	r2, [r7, #2]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	611a      	str	r2, [r3, #16]
=======
 8000cc0:	887a      	ldrh	r2, [r7, #2]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8000bb6:	e003      	b.n	8000bc0 <HAL_GPIO_WritePin+0x26>
=======
 8000cc6:	e003      	b.n	8000cd0 <HAL_GPIO_WritePin+0x26>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
<<<<<<< HEAD
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	041a      	lsls	r2, r3, #16
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	611a      	str	r2, [r3, #16]
=======
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	041a      	lsls	r2, r3, #16
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
	...
=======
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08000bcc <HAL_RCC_OscConfig>:
=======
08000cda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b085      	sub	sp, #20
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cec:	887a      	ldrh	r2, [r7, #2]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	041a      	lsls	r2, r3, #16
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	887b      	ldrh	r3, [r7, #2]
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	611a      	str	r2, [r3, #16]
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <HAL_RCC_OscConfig>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
=======
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <HAL_RCC_OscConfig+0x12>
=======
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_RCC_OscConfig+0x12>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e26c      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e26c      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 8087 	beq.w	8000cfa <HAL_RCC_OscConfig+0x12e>
=======
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8087 	beq.w	8000e3a <HAL_RCC_OscConfig+0x12e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8000bec:	4b92      	ldr	r3, [pc, #584]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 030c 	and.w	r3, r3, #12
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d00c      	beq.n	8000c12 <HAL_RCC_OscConfig+0x46>
=======
 8000d2c:	4b92      	ldr	r3, [pc, #584]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 030c 	and.w	r3, r3, #12
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	d00c      	beq.n	8000d52 <HAL_RCC_OscConfig+0x46>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
<<<<<<< HEAD
 8000bf8:	4b8f      	ldr	r3, [pc, #572]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 030c 	and.w	r3, r3, #12
 8000c00:	2b08      	cmp	r3, #8
 8000c02:	d112      	bne.n	8000c2a <HAL_RCC_OscConfig+0x5e>
 8000c04:	4b8c      	ldr	r3, [pc, #560]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c10:	d10b      	bne.n	8000c2a <HAL_RCC_OscConfig+0x5e>
=======
 8000d38:	4b8f      	ldr	r3, [pc, #572]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	2b08      	cmp	r3, #8
 8000d42:	d112      	bne.n	8000d6a <HAL_RCC_OscConfig+0x5e>
 8000d44:	4b8c      	ldr	r3, [pc, #560]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d50:	d10b      	bne.n	8000d6a <HAL_RCC_OscConfig+0x5e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8000c12:	4b89      	ldr	r3, [pc, #548]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d06c      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x12c>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d168      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x12c>
=======
 8000d52:	4b89      	ldr	r3, [pc, #548]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d06c      	beq.n	8000e38 <HAL_RCC_OscConfig+0x12c>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d168      	bne.n	8000e38 <HAL_RCC_OscConfig+0x12c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8000c26:	2301      	movs	r3, #1
 8000c28:	e246      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 8000d66:	2301      	movs	r3, #1
 8000d68:	e246      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c32:	d106      	bne.n	8000c42 <HAL_RCC_OscConfig+0x76>
 8000c34:	4b80      	ldr	r3, [pc, #512]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a7f      	ldr	r2, [pc, #508]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e02e      	b.n	8000ca0 <HAL_RCC_OscConfig+0xd4>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10c      	bne.n	8000c64 <HAL_RCC_OscConfig+0x98>
 8000c4a:	4b7b      	ldr	r3, [pc, #492]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a7a      	ldr	r2, [pc, #488]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	4b78      	ldr	r3, [pc, #480]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a77      	ldr	r2, [pc, #476]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	e01d      	b.n	8000ca0 <HAL_RCC_OscConfig+0xd4>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c6c:	d10c      	bne.n	8000c88 <HAL_RCC_OscConfig+0xbc>
 8000c6e:	4b72      	ldr	r3, [pc, #456]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a71      	ldr	r2, [pc, #452]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	4b6f      	ldr	r3, [pc, #444]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a6e      	ldr	r2, [pc, #440]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e00b      	b.n	8000ca0 <HAL_RCC_OscConfig+0xd4>
 8000c88:	4b6b      	ldr	r3, [pc, #428]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a6a      	ldr	r2, [pc, #424]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b68      	ldr	r3, [pc, #416]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a67      	ldr	r2, [pc, #412]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c9e:	6013      	str	r3, [r2, #0]
=======
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d72:	d106      	bne.n	8000d82 <HAL_RCC_OscConfig+0x76>
 8000d74:	4b80      	ldr	r3, [pc, #512]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a7f      	ldr	r2, [pc, #508]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	e02e      	b.n	8000de0 <HAL_RCC_OscConfig+0xd4>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0x98>
 8000d8a:	4b7b      	ldr	r3, [pc, #492]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a7a      	ldr	r2, [pc, #488]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b78      	ldr	r3, [pc, #480]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a77      	ldr	r2, [pc, #476]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e01d      	b.n	8000de0 <HAL_RCC_OscConfig+0xd4>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dac:	d10c      	bne.n	8000dc8 <HAL_RCC_OscConfig+0xbc>
 8000dae:	4b72      	ldr	r3, [pc, #456]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a71      	ldr	r2, [pc, #452]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	4b6f      	ldr	r3, [pc, #444]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a6e      	ldr	r2, [pc, #440]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e00b      	b.n	8000de0 <HAL_RCC_OscConfig+0xd4>
 8000dc8:	4b6b      	ldr	r3, [pc, #428]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a6a      	ldr	r2, [pc, #424]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b68      	ldr	r3, [pc, #416]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a67      	ldr	r2, [pc, #412]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dde:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d013      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x104>
=======
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d013      	beq.n	8000e10 <HAL_RCC_OscConfig+0x104>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8000ca8:	f7ff fcda 	bl	8000660 <HAL_GetTick>
 8000cac:	6138      	str	r0, [r7, #16]
=======
 8000de8:	f7ff fc3e 	bl	8000668 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 8000cae:	e008      	b.n	8000cc2 <HAL_RCC_OscConfig+0xf6>
=======
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0xf6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 8000cb0:	f7ff fcd6 	bl	8000660 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b64      	cmp	r3, #100	; 0x64
 8000cbc:	d901      	bls.n	8000cc2 <HAL_RCC_OscConfig+0xf6>
=======
 8000df0:	f7ff fc3a 	bl	8000668 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b64      	cmp	r3, #100	; 0x64
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0xf6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e1fa      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e1fa      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 8000cc2:	4b5d      	ldr	r3, [pc, #372]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f0      	beq.n	8000cb0 <HAL_RCC_OscConfig+0xe4>
 8000cce:	e014      	b.n	8000cfa <HAL_RCC_OscConfig+0x12e>
=======
 8000e02:	4b5d      	ldr	r3, [pc, #372]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f0      	beq.n	8000df0 <HAL_RCC_OscConfig+0xe4>
 8000e0e:	e014      	b.n	8000e3a <HAL_RCC_OscConfig+0x12e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8000cd0:	f7ff fcc6 	bl	8000660 <HAL_GetTick>
 8000cd4:	6138      	str	r0, [r7, #16]
=======
 8000e10:	f7ff fc2a 	bl	8000668 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
<<<<<<< HEAD
 8000cd6:	e008      	b.n	8000cea <HAL_RCC_OscConfig+0x11e>
=======
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0x11e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 8000cd8:	f7ff fcc2 	bl	8000660 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b64      	cmp	r3, #100	; 0x64
 8000ce4:	d901      	bls.n	8000cea <HAL_RCC_OscConfig+0x11e>
=======
 8000e18:	f7ff fc26 	bl	8000668 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b64      	cmp	r3, #100	; 0x64
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0x11e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e1e6      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 8000e26:	2303      	movs	r3, #3
 8000e28:	e1e6      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
<<<<<<< HEAD
 8000cea:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f0      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x10c>
 8000cf6:	e000      	b.n	8000cfa <HAL_RCC_OscConfig+0x12e>
=======
 8000e2a:	4b53      	ldr	r3, [pc, #332]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f0      	bne.n	8000e18 <HAL_RCC_OscConfig+0x10c>
 8000e36:	e000      	b.n	8000e3a <HAL_RCC_OscConfig+0x12e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8000cf8:	bf00      	nop
=======
 8000e38:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d063      	beq.n	8000dce <HAL_RCC_OscConfig+0x202>
=======
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d063      	beq.n	8000f0e <HAL_RCC_OscConfig+0x202>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8000d06:	4b4c      	ldr	r3, [pc, #304]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00b      	beq.n	8000d2a <HAL_RCC_OscConfig+0x15e>
=======
 8000e46:	4b4c      	ldr	r3, [pc, #304]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <HAL_RCC_OscConfig+0x15e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
<<<<<<< HEAD
 8000d12:	4b49      	ldr	r3, [pc, #292]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	2b08      	cmp	r3, #8
 8000d1c:	d11c      	bne.n	8000d58 <HAL_RCC_OscConfig+0x18c>
 8000d1e:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d116      	bne.n	8000d58 <HAL_RCC_OscConfig+0x18c>
=======
 8000e52:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b08      	cmp	r3, #8
 8000e5c:	d11c      	bne.n	8000e98 <HAL_RCC_OscConfig+0x18c>
 8000e5e:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d116      	bne.n	8000e98 <HAL_RCC_OscConfig+0x18c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
<<<<<<< HEAD
 8000d2a:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d005      	beq.n	8000d42 <HAL_RCC_OscConfig+0x176>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d001      	beq.n	8000d42 <HAL_RCC_OscConfig+0x176>
=======
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d005      	beq.n	8000e82 <HAL_RCC_OscConfig+0x176>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d001      	beq.n	8000e82 <HAL_RCC_OscConfig+0x176>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e1ba      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e1ba      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8000d42:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	4939      	ldr	r1, [pc, #228]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	4313      	orrs	r3, r2
 8000d54:	600b      	str	r3, [r1, #0]
=======
 8000e82:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	4939      	ldr	r1, [pc, #228]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	600b      	str	r3, [r1, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
<<<<<<< HEAD
 8000d56:	e03a      	b.n	8000dce <HAL_RCC_OscConfig+0x202>
=======
 8000e96:	e03a      	b.n	8000f0e <HAL_RCC_OscConfig+0x202>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d020      	beq.n	8000da2 <HAL_RCC_OscConfig+0x1d6>
=======
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d020      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x1d6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
<<<<<<< HEAD
 8000d60:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <HAL_RCC_OscConfig+0x270>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
=======
 8000ea0:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <HAL_RCC_OscConfig+0x270>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8000d66:	f7ff fc7b 	bl	8000660 <HAL_GetTick>
 8000d6a:	6138      	str	r0, [r7, #16]
=======
 8000ea6:	f7ff fbdf 	bl	8000668 <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8000d6c:	e008      	b.n	8000d80 <HAL_RCC_OscConfig+0x1b4>
=======
 8000eac:	e008      	b.n	8000ec0 <HAL_RCC_OscConfig+0x1b4>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 8000d6e:	f7ff fc77 	bl	8000660 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d901      	bls.n	8000d80 <HAL_RCC_OscConfig+0x1b4>
=======
 8000eae:	f7ff fbdb 	bl	8000668 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x1b4>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e19b      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e19b      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8000d80:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0f0      	beq.n	8000d6e <HAL_RCC_OscConfig+0x1a2>
=======
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0f0      	beq.n	8000eae <HAL_RCC_OscConfig+0x1a2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8000d8c:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4927      	ldr	r1, [pc, #156]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	600b      	str	r3, [r1, #0]
 8000da0:	e015      	b.n	8000dce <HAL_RCC_OscConfig+0x202>
=======
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4927      	ldr	r1, [pc, #156]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	4313      	orrs	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]
 8000ee0:	e015      	b.n	8000f0e <HAL_RCC_OscConfig+0x202>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <HAL_RCC_OscConfig+0x270>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
=======
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <HAL_RCC_OscConfig+0x270>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8000da8:	f7ff fc5a 	bl	8000660 <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]
=======
 8000ee8:	f7ff fbbe 	bl	8000668 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
<<<<<<< HEAD
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0x1f6>
=======
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x1f6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 8000db0:	f7ff fc56 	bl	8000660 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x1f6>
=======
 8000ef0:	f7ff fbba 	bl	8000668 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x1f6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e17a      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 8000efe:	2303      	movs	r3, #3
 8000f00:	e17a      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
<<<<<<< HEAD
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f0      	bne.n	8000db0 <HAL_RCC_OscConfig+0x1e4>
=======
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d03a      	beq.n	8000e50 <HAL_RCC_OscConfig+0x284>
=======
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d03a      	beq.n	8000f90 <HAL_RCC_OscConfig+0x284>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d019      	beq.n	8000e16 <HAL_RCC_OscConfig+0x24a>
=======
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d019      	beq.n	8000f56 <HAL_RCC_OscConfig+0x24a>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< HEAD
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_RCC_OscConfig+0x274>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
=======
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_RCC_OscConfig+0x274>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8000de8:	f7ff fc3a 	bl	8000660 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]
=======
 8000f28:	f7ff fb9e 	bl	8000668 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
<<<<<<< HEAD
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x236>
=======
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x236>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 8000df0:	f7ff fc36 	bl	8000660 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x236>
=======
 8000f30:	f7ff fb9a 	bl	8000668 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x236>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e15a      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e15a      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
<<<<<<< HEAD
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f0      	beq.n	8000df0 <HAL_RCC_OscConfig+0x224>
=======
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f0      	beq.n	8000f30 <HAL_RCC_OscConfig+0x224>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f000 fada 	bl	80013c8 <RCC_Delay>
 8000e14:	e01c      	b.n	8000e50 <HAL_RCC_OscConfig+0x284>
=======
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f000 fada 	bl	8001508 <RCC_Delay>
 8000f54:	e01c      	b.n	8000f90 <HAL_RCC_OscConfig+0x284>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_RCC_OscConfig+0x274>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
=======
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_RCC_OscConfig+0x274>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8000e1c:	f7ff fc20 	bl	8000660 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]
=======
 8000f5c:	f7ff fb84 	bl	8000668 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
<<<<<<< HEAD
 8000e22:	e00f      	b.n	8000e44 <HAL_RCC_OscConfig+0x278>
=======
 8000f62:	e00f      	b.n	8000f84 <HAL_RCC_OscConfig+0x278>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 8000e24:	f7ff fc1c 	bl	8000660 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d908      	bls.n	8000e44 <HAL_RCC_OscConfig+0x278>
=======
 8000f64:	f7ff fb80 	bl	8000668 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d908      	bls.n	8000f84 <HAL_RCC_OscConfig+0x278>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8000e32:	2303      	movs	r3, #3
 8000e34:	e140      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	42420000 	.word	0x42420000
 8000e40:	42420480 	.word	0x42420480
=======
 8000f72:	2303      	movs	r3, #3
 8000f74:	e140      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	42420000 	.word	0x42420000
 8000f80:	42420480 	.word	0x42420480
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
<<<<<<< HEAD
 8000e44:	4b9e      	ldr	r3, [pc, #632]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1e9      	bne.n	8000e24 <HAL_RCC_OscConfig+0x258>
=======
 8000f84:	4b9e      	ldr	r3, [pc, #632]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1e9      	bne.n	8000f64 <HAL_RCC_OscConfig+0x258>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 80a6 	beq.w	8000faa <HAL_RCC_OscConfig+0x3de>
=======
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80a6 	beq.w	80010ea <HAL_RCC_OscConfig+0x3de>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    FlagStatus       pwrclkchanged = RESET;
<<<<<<< HEAD
 8000e5e:	2300      	movs	r3, #0
 8000e60:	75fb      	strb	r3, [r7, #23]
=======
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	75fb      	strb	r3, [r7, #23]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8000e62:	4b97      	ldr	r3, [pc, #604]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10d      	bne.n	8000e8a <HAL_RCC_OscConfig+0x2be>
=======
 8000fa2:	4b97      	ldr	r3, [pc, #604]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10d      	bne.n	8000fca <HAL_RCC_OscConfig+0x2be>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8000e6e:	4b94      	ldr	r3, [pc, #592]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	4a93      	ldr	r2, [pc, #588]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	61d3      	str	r3, [r2, #28]
 8000e7a:	4b91      	ldr	r3, [pc, #580]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
=======
 8000fae:	4b94      	ldr	r3, [pc, #592]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a93      	ldr	r2, [pc, #588]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b91      	ldr	r3, [pc, #580]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      pwrclkchanged = SET;
<<<<<<< HEAD
 8000e86:	2301      	movs	r3, #1
 8000e88:	75fb      	strb	r3, [r7, #23]
=======
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	75fb      	strb	r3, [r7, #23]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 8000e8a:	4b8e      	ldr	r3, [pc, #568]	; (80010c4 <HAL_RCC_OscConfig+0x4f8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d118      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x2fc>
=======
 8000fca:	4b8e      	ldr	r3, [pc, #568]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d118      	bne.n	8001008 <HAL_RCC_OscConfig+0x2fc>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
<<<<<<< HEAD
 8000e96:	4b8b      	ldr	r3, [pc, #556]	; (80010c4 <HAL_RCC_OscConfig+0x4f8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a8a      	ldr	r2, [pc, #552]	; (80010c4 <HAL_RCC_OscConfig+0x4f8>)
 8000e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea0:	6013      	str	r3, [r2, #0]
=======
 8000fd6:	4b8b      	ldr	r3, [pc, #556]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a8a      	ldr	r2, [pc, #552]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8000ea2:	f7ff fbdd 	bl	8000660 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]
=======
 8000fe2:	f7ff fb41 	bl	8000668 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x2f0>
=======
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x2f0>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
<<<<<<< HEAD
 8000eaa:	f7ff fbd9 	bl	8000660 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b64      	cmp	r3, #100	; 0x64
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x2f0>
=======
 8000fea:	f7ff fb3d 	bl	8000668 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b64      	cmp	r3, #100	; 0x64
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x2f0>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e0fd      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e0fd      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 8000ebc:	4b81      	ldr	r3, [pc, #516]	; (80010c4 <HAL_RCC_OscConfig+0x4f8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f0      	beq.n	8000eaa <HAL_RCC_OscConfig+0x2de>
=======
 8000ffc:	4b81      	ldr	r3, [pc, #516]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x2de>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d106      	bne.n	8000ede <HAL_RCC_OscConfig+0x312>
 8000ed0:	4b7b      	ldr	r3, [pc, #492]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4a7a      	ldr	r2, [pc, #488]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6213      	str	r3, [r2, #32]
 8000edc:	e02d      	b.n	8000f3a <HAL_RCC_OscConfig+0x36e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10c      	bne.n	8000f00 <HAL_RCC_OscConfig+0x334>
 8000ee6:	4b76      	ldr	r3, [pc, #472]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4a75      	ldr	r2, [pc, #468]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000eec:	f023 0301 	bic.w	r3, r3, #1
 8000ef0:	6213      	str	r3, [r2, #32]
 8000ef2:	4b73      	ldr	r3, [pc, #460]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	4a72      	ldr	r2, [pc, #456]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	f023 0304 	bic.w	r3, r3, #4
 8000efc:	6213      	str	r3, [r2, #32]
 8000efe:	e01c      	b.n	8000f3a <HAL_RCC_OscConfig+0x36e>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2b05      	cmp	r3, #5
 8000f06:	d10c      	bne.n	8000f22 <HAL_RCC_OscConfig+0x356>
 8000f08:	4b6d      	ldr	r3, [pc, #436]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4a6c      	ldr	r2, [pc, #432]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6213      	str	r3, [r2, #32]
 8000f14:	4b6a      	ldr	r3, [pc, #424]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	4a69      	ldr	r2, [pc, #420]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6213      	str	r3, [r2, #32]
 8000f20:	e00b      	b.n	8000f3a <HAL_RCC_OscConfig+0x36e>
 8000f22:	4b67      	ldr	r3, [pc, #412]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4a66      	ldr	r2, [pc, #408]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	6213      	str	r3, [r2, #32]
 8000f2e:	4b64      	ldr	r3, [pc, #400]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4a63      	ldr	r2, [pc, #396]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	f023 0304 	bic.w	r3, r3, #4
 8000f38:	6213      	str	r3, [r2, #32]
=======
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d106      	bne.n	800101e <HAL_RCC_OscConfig+0x312>
 8001010:	4b7b      	ldr	r3, [pc, #492]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a7a      	ldr	r2, [pc, #488]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6213      	str	r3, [r2, #32]
 800101c:	e02d      	b.n	800107a <HAL_RCC_OscConfig+0x36e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0x334>
 8001026:	4b76      	ldr	r3, [pc, #472]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a75      	ldr	r2, [pc, #468]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	6213      	str	r3, [r2, #32]
 8001032:	4b73      	ldr	r3, [pc, #460]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4a72      	ldr	r2, [pc, #456]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	f023 0304 	bic.w	r3, r3, #4
 800103c:	6213      	str	r3, [r2, #32]
 800103e:	e01c      	b.n	800107a <HAL_RCC_OscConfig+0x36e>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2b05      	cmp	r3, #5
 8001046:	d10c      	bne.n	8001062 <HAL_RCC_OscConfig+0x356>
 8001048:	4b6d      	ldr	r3, [pc, #436]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a6c      	ldr	r2, [pc, #432]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 800104e:	f043 0304 	orr.w	r3, r3, #4
 8001052:	6213      	str	r3, [r2, #32]
 8001054:	4b6a      	ldr	r3, [pc, #424]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4a69      	ldr	r2, [pc, #420]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6213      	str	r3, [r2, #32]
 8001060:	e00b      	b.n	800107a <HAL_RCC_OscConfig+0x36e>
 8001062:	4b67      	ldr	r3, [pc, #412]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	4a66      	ldr	r2, [pc, #408]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	6213      	str	r3, [r2, #32]
 800106e:	4b64      	ldr	r3, [pc, #400]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4a63      	ldr	r2, [pc, #396]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001074:	f023 0304 	bic.w	r3, r3, #4
 8001078:	6213      	str	r3, [r2, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
<<<<<<< HEAD
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d015      	beq.n	8000f6e <HAL_RCC_OscConfig+0x3a2>
=======
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d015      	beq.n	80010ae <HAL_RCC_OscConfig+0x3a2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8000f42:	f7ff fb8d 	bl	8000660 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]
=======
 8001082:	f7ff faf1 	bl	8000668 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
<<<<<<< HEAD
 8000f48:	e00a      	b.n	8000f60 <HAL_RCC_OscConfig+0x394>
=======
 8001088:	e00a      	b.n	80010a0 <HAL_RCC_OscConfig+0x394>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 8000f4a:	f7ff fb89 	bl	8000660 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x394>
=======
 800108a:	f7ff faed 	bl	8000668 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	f241 3288 	movw	r2, #5000	; 0x1388
 8001098:	4293      	cmp	r3, r2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x394>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e0ab      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 800109c:	2303      	movs	r3, #3
 800109e:	e0ab      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
<<<<<<< HEAD
 8000f60:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0ee      	beq.n	8000f4a <HAL_RCC_OscConfig+0x37e>
 8000f6c:	e014      	b.n	8000f98 <HAL_RCC_OscConfig+0x3cc>
=======
 80010a0:	4b57      	ldr	r3, [pc, #348]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0ee      	beq.n	800108a <HAL_RCC_OscConfig+0x37e>
 80010ac:	e014      	b.n	80010d8 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8000f6e:	f7ff fb77 	bl	8000660 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]
=======
 80010ae:	f7ff fadb 	bl	8000668 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
<<<<<<< HEAD
 8000f74:	e00a      	b.n	8000f8c <HAL_RCC_OscConfig+0x3c0>
=======
 80010b4:	e00a      	b.n	80010cc <HAL_RCC_OscConfig+0x3c0>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 8000f76:	f7ff fb73 	bl	8000660 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x3c0>
=======
 80010b6:	f7ff fad7 	bl	8000668 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x3c0>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e095      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 80010c8:	2303      	movs	r3, #3
 80010ca:	e095      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
<<<<<<< HEAD
 8000f8c:	4b4c      	ldr	r3, [pc, #304]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1ee      	bne.n	8000f76 <HAL_RCC_OscConfig+0x3aa>
=======
 80010cc:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1ee      	bne.n	80010b6 <HAL_RCC_OscConfig+0x3aa>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d105      	bne.n	8000faa <HAL_RCC_OscConfig+0x3de>
=======
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d105      	bne.n	80010ea <HAL_RCC_OscConfig+0x3de>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      __HAL_RCC_PWR_CLK_DISABLE();
<<<<<<< HEAD
 8000f9e:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a47      	ldr	r2, [pc, #284]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
=======
 80010de:	4b48      	ldr	r3, [pc, #288]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a47      	ldr	r2, [pc, #284]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010e8:	61d3      	str	r3, [r2, #28]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 8081 	beq.w	80010b6 <HAL_RCC_OscConfig+0x4ea>
=======
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 8081 	beq.w	80011f6 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
<<<<<<< HEAD
 8000fb4:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d061      	beq.n	8001084 <HAL_RCC_OscConfig+0x4b8>
=======
 80010f4:	4b42      	ldr	r3, [pc, #264]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 030c 	and.w	r3, r3, #12
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d061      	beq.n	80011c4 <HAL_RCC_OscConfig+0x4b8>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
<<<<<<< HEAD
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d146      	bne.n	8001056 <HAL_RCC_OscConfig+0x48a>
=======
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d146      	bne.n	8001196 <HAL_RCC_OscConfig+0x48a>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8000fc8:	4b3f      	ldr	r3, [pc, #252]	; (80010c8 <HAL_RCC_OscConfig+0x4fc>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
=======
 8001108:	4b3f      	ldr	r3, [pc, #252]	; (8001208 <HAL_RCC_OscConfig+0x4fc>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8000fce:	f7ff fb47 	bl	8000660 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]
=======
 800110e:	f7ff faab 	bl	8000668 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
<<<<<<< HEAD
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x41c>
=======
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x41c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
<<<<<<< HEAD
 8000fd6:	f7ff fb43 	bl	8000660 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x41c>
=======
 8001116:	f7ff faa7 	bl	8000668 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x41c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e067      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 8001124:	2303      	movs	r3, #3
 8001126:	e067      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
<<<<<<< HEAD
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f0      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x40a>
=======
 8001128:	4b35      	ldr	r3, [pc, #212]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f0      	bne.n	8001116 <HAL_RCC_OscConfig+0x40a>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffc:	d108      	bne.n	8001010 <HAL_RCC_OscConfig+0x444>
=======
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113c:	d108      	bne.n	8001150 <HAL_RCC_OscConfig+0x444>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 8000ffe:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	492d      	ldr	r1, [pc, #180]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
=======
 800113e:	4b30      	ldr	r3, [pc, #192]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	492d      	ldr	r1, [pc, #180]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a19      	ldr	r1, [r3, #32]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	430b      	orrs	r3, r1
 8001022:	4927      	ldr	r1, [pc, #156]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
=======
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a19      	ldr	r1, [r3, #32]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	430b      	orrs	r3, r1
 8001162:	4927      	ldr	r1, [pc, #156]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_RCC_OscConfig+0x4fc>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]
=======
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <HAL_RCC_OscConfig+0x4fc>)
 800116a:	2201      	movs	r2, #1
 800116c:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800102e:	f7ff fb17 	bl	8000660 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]
=======
 800116e:	f7ff fa7b 	bl	8000668 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
<<<<<<< HEAD
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x47c>
=======
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x47c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
<<<<<<< HEAD
 8001036:	f7ff fb13 	bl	8000660 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x47c>
=======
 8001176:	f7ff fa77 	bl	8000668 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x47c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8001044:	2303      	movs	r3, #3
 8001046:	e037      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 8001184:	2303      	movs	r3, #3
 8001186:	e037      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
<<<<<<< HEAD
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x46a>
 8001054:	e02f      	b.n	80010b6 <HAL_RCC_OscConfig+0x4ea>
=======
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x46a>
 8001194:	e02f      	b.n	80011f6 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <HAL_RCC_OscConfig+0x4fc>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
=======
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_RCC_OscConfig+0x4fc>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800105c:	f7ff fb00 	bl	8000660 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]
=======
 800119c:	f7ff fa64 	bl	8000668 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
<<<<<<< HEAD
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x4aa>
=======
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x4aa>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
<<<<<<< HEAD
 8001064:	f7ff fafc 	bl	8000660 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x4aa>
=======
 80011a4:	f7ff fa60 	bl	8000668 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x4aa>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8001072:	2303      	movs	r3, #3
 8001074:	e020      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 80011b2:	2303      	movs	r3, #3
 80011b4:	e020      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
<<<<<<< HEAD
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x498>
 8001082:	e018      	b.n	80010b6 <HAL_RCC_OscConfig+0x4ea>
=======
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x498>
 80011c2:	e018      	b.n	80011f6 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d101      	bne.n	8001090 <HAL_RCC_OscConfig+0x4c4>
=======
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <HAL_RCC_OscConfig+0x4c4>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        return HAL_ERROR;
<<<<<<< HEAD
 800108c:	2301      	movs	r3, #1
 800108e:	e013      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 80011cc:	2301      	movs	r3, #1
 80011ce:	e013      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	60fb      	str	r3, [r7, #12]
=======
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
<<<<<<< HEAD
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x4e6>
=======
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d106      	bne.n	80011f2 <HAL_RCC_OscConfig+0x4e6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
<<<<<<< HEAD
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
=======
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
<<<<<<< HEAD
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d001      	beq.n	80010b6 <HAL_RCC_OscConfig+0x4ea>
=======
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          return HAL_ERROR;
<<<<<<< HEAD
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_RCC_OscConfig+0x4ec>
=======
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 80010b6:	2300      	movs	r3, #0
=======
 80011f6:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40007000 	.word	0x40007000
 80010c8:	42420060 	.word	0x42420060
=======
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000
 8001204:	40007000 	.word	0x40007000
 8001208:	42420060 	.word	0x42420060
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080010cc <HAL_RCC_ClockConfig>:
=======
0800120c <HAL_RCC_ClockConfig>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
=======
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_ClockConfig+0x14>
=======
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_RCC_ClockConfig+0x14>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    return HAL_ERROR;
<<<<<<< HEAD
 80010dc:	2301      	movs	r3, #1
 80010de:	e0d0      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
=======
 800121c:	2301      	movs	r3, #1
 800121e:	e0d0      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80010e0:	4b6a      	ldr	r3, [pc, #424]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d910      	bls.n	8001110 <HAL_RCC_ClockConfig+0x44>
=======
 8001220:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d910      	bls.n	8001250 <HAL_RCC_ClockConfig+0x44>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
<<<<<<< HEAD
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 0207 	bic.w	r2, r3, #7
 80010f6:	4965      	ldr	r1, [pc, #404]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
=======
 800122e:	4b67      	ldr	r3, [pc, #412]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 0207 	bic.w	r2, r3, #7
 8001236:	4965      	ldr	r1, [pc, #404]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80010fe:	4b63      	ldr	r3, [pc, #396]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d001      	beq.n	8001110 <HAL_RCC_ClockConfig+0x44>
=======
 800123e:	4b63      	ldr	r3, [pc, #396]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d001      	beq.n	8001250 <HAL_RCC_ClockConfig+0x44>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    return HAL_ERROR;
<<<<<<< HEAD
 800110c:	2301      	movs	r3, #1
 800110e:	e0b8      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
=======
 800124c:	2301      	movs	r3, #1
 800124e:	e0b8      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d020      	beq.n	800115e <HAL_RCC_ClockConfig+0x92>
=======
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <HAL_RCC_ClockConfig+0x92>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <HAL_RCC_ClockConfig+0x68>
=======
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_RCC_ClockConfig+0x68>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
<<<<<<< HEAD
 8001128:	4b59      	ldr	r3, [pc, #356]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4a58      	ldr	r2, [pc, #352]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001132:	6053      	str	r3, [r2, #4]
=======
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a58      	ldr	r2, [pc, #352]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001272:	6053      	str	r3, [r2, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_RCC_ClockConfig+0x80>
=======
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_RCC_ClockConfig+0x80>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
<<<<<<< HEAD
 8001140:	4b53      	ldr	r3, [pc, #332]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4a52      	ldr	r2, [pc, #328]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800114a:	6053      	str	r3, [r2, #4]
=======
 8001280:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a52      	ldr	r2, [pc, #328]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800128a:	6053      	str	r3, [r2, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	494d      	ldr	r1, [pc, #308]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
=======
 800128c:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	494d      	ldr	r1, [pc, #308]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d040      	beq.n	80011ec <HAL_RCC_ClockConfig+0x120>
=======
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d040      	beq.n	800132c <HAL_RCC_ClockConfig+0x120>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d107      	bne.n	8001182 <HAL_RCC_ClockConfig+0xb6>
=======
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d107      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xb6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d115      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
=======
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d115      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        return HAL_ERROR;
<<<<<<< HEAD
 800117e:	2301      	movs	r3, #1
 8001180:	e07f      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
=======
 80012be:	2301      	movs	r3, #1
 80012c0:	e07f      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d107      	bne.n	800119a <HAL_RCC_ClockConfig+0xce>
=======
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xce>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
<<<<<<< HEAD
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d109      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
=======
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8001196:	2301      	movs	r3, #1
 8001198:	e073      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
=======
 80012d6:	2301      	movs	r3, #1
 80012d8:	e073      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
=======
 80012da:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        return HAL_ERROR;
<<<<<<< HEAD
 80011a6:	2301      	movs	r3, #1
 80011a8:	e06b      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
=======
 80012e6:	2301      	movs	r3, #1
 80012e8:	e06b      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f023 0203 	bic.w	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4936      	ldr	r1, [pc, #216]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
=======
 80012ea:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f023 0203 	bic.w	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4936      	ldr	r1, [pc, #216]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    /* Get Start Tick */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 80011bc:	f7ff fa50 	bl	8000660 <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]
=======
 80012fc:	f7ff f9b4 	bl	8000668 <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
<<<<<<< HEAD
 80011c2:	e00a      	b.n	80011da <HAL_RCC_ClockConfig+0x10e>
=======
 8001302:	e00a      	b.n	800131a <HAL_RCC_ClockConfig+0x10e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
<<<<<<< HEAD
 80011c4:	f7ff fa4c 	bl	8000660 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_ClockConfig+0x10e>
=======
 8001304:	f7ff f9b0 	bl	8000668 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_ClockConfig+0x10e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        return HAL_TIMEOUT;
<<<<<<< HEAD
 80011d6:	2303      	movs	r3, #3
 80011d8:	e053      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
=======
 8001316:	2303      	movs	r3, #3
 8001318:	e053      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
<<<<<<< HEAD
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 020c 	and.w	r2, r3, #12
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d1eb      	bne.n	80011c4 <HAL_RCC_ClockConfig+0xf8>
=======
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 020c 	and.w	r2, r3, #12
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	429a      	cmp	r2, r3
 800132a:	d1eb      	bne.n	8001304 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d210      	bcs.n	800121c <HAL_RCC_ClockConfig+0x150>
=======
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d210      	bcs.n	800135c <HAL_RCC_ClockConfig+0x150>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
<<<<<<< HEAD
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 0207 	bic.w	r2, r3, #7
 8001202:	4922      	ldr	r1, [pc, #136]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
=======
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 0207 	bic.w	r2, r3, #7
 8001342:	4922      	ldr	r1, [pc, #136]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_ClockConfig+0x150>
=======
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_ClockConfig+0x150>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8001218:	2301      	movs	r3, #1
 800121a:	e032      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
=======
 8001358:	2301      	movs	r3, #1
 800135a:	e032      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <HAL_RCC_ClockConfig+0x16e>
=======
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d008      	beq.n	800137a <HAL_RCC_ClockConfig+0x16e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
<<<<<<< HEAD
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	4916      	ldr	r1, [pc, #88]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
=======
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	4916      	ldr	r1, [pc, #88]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <HAL_RCC_ClockConfig+0x18e>
=======
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <HAL_RCC_ClockConfig+0x18e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
<<<<<<< HEAD
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	490e      	ldr	r1, [pc, #56]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
=======
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	490e      	ldr	r1, [pc, #56]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 800125a:	f000 f821 	bl	80012a0 <HAL_RCC_GetSysClockFreq>
 800125e:	4601      	mov	r1, r0
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_RCC_ClockConfig+0x1c8>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	fa21 f303 	lsr.w	r3, r1, r3
 8001272:	4a09      	ldr	r2, [pc, #36]	; (8001298 <HAL_RCC_ClockConfig+0x1cc>)
 8001274:	6013      	str	r3, [r2, #0]
=======
 800139a:	f000 f821 	bl	80013e0 <HAL_RCC_GetSysClockFreq>
 800139e:	4601      	mov	r1, r0
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_RCC_ClockConfig+0x1c8>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	fa21 f303 	lsr.w	r3, r1, r3
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <HAL_RCC_ClockConfig+0x1cc>)
 80013b4:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
<<<<<<< HEAD
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_RCC_ClockConfig+0x1d0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f9ae 	bl	80005dc <HAL_InitTick>
=======
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_RCC_ClockConfig+0x1d0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f912 	bl	80005e4 <HAL_InitTick>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  return HAL_OK;
<<<<<<< HEAD
 8001280:	2300      	movs	r3, #0
=======
 80013c0:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40022000 	.word	0x40022000
 8001290:	40021000 	.word	0x40021000
 8001294:	080018a8 	.word	0x080018a8
 8001298:	20000000 	.word	0x20000000
 800129c:	20000004 	.word	0x20000004
=======
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40022000 	.word	0x40022000
 80013d0:	40021000 	.word	0x40021000
 80013d4:	08001e3c 	.word	0x08001e3c
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000004 	.word	0x20000004
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080012a0 <HAL_RCC_GetSysClockFreq>:
=======
080013e0 <HAL_RCC_GetSysClockFreq>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80012a0:	b490      	push	{r4, r7}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
=======
 80013e0:	b490      	push	{r4, r7}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012a8:	1d3c      	adds	r4, r7, #4
 80012aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013e8:	1d3c      	adds	r4, r7, #4
 80013ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	803b      	strh	r3, [r7, #0]
=======
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	803b      	strh	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
=======
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint32_t sysclockfreq = 0U;
<<<<<<< HEAD
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
=======
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61fb      	str	r3, [r7, #28]
=======
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
<<<<<<< HEAD
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d002      	beq.n	80012e0 <HAL_RCC_GetSysClockFreq+0x40>
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d003      	beq.n	80012e6 <HAL_RCC_GetSysClockFreq+0x46>
 80012de:	e02d      	b.n	800133c <HAL_RCC_GetSysClockFreq+0x9c>
=======
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b04      	cmp	r3, #4
 8001418:	d002      	beq.n	8001420 <HAL_RCC_GetSysClockFreq+0x40>
 800141a:	2b08      	cmp	r3, #8
 800141c:	d003      	beq.n	8001426 <HAL_RCC_GetSysClockFreq+0x46>
 800141e:	e02d      	b.n	800147c <HAL_RCC_GetSysClockFreq+0x9c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <HAL_RCC_GetSysClockFreq+0xbc>)
 80012e2:	623b      	str	r3, [r7, #32]
=======
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001422:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      break;
<<<<<<< HEAD
 80012e4:	e02d      	b.n	8001342 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8001424:	e02d      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	0c9b      	lsrs	r3, r3, #18
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012f2:	4413      	add	r3, r2
 80012f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012f8:	617b      	str	r3, [r7, #20]
=======
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	0c9b      	lsrs	r3, r3, #18
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001432:	4413      	add	r3, r2
 8001434:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001438:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
<<<<<<< HEAD
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_GetSysClockFreq+0x8c>
=======
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_GetSysClockFreq+0x8c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	0c5b      	lsrs	r3, r3, #17
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001312:	4413      	add	r3, r2
 8001314:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001318:	61bb      	str	r3, [r7, #24]
=======
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	0c5b      	lsrs	r3, r3, #17
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001452:	4413      	add	r3, r2
 8001454:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001458:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_RCC_GetSysClockFreq+0xbc>)
 800131e:	fb02 f203 	mul.w	r2, r2, r3
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	fbb2 f3f3 	udiv	r3, r2, r3
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
 800132a:	e004      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0x96>
=======
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_RCC_GetSysClockFreq+0xbc>)
 800145e:	fb02 f203 	mul.w	r2, r2, r3
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	fbb2 f3f3 	udiv	r3, r2, r3
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
 800146a:	e004      	b.n	8001476 <HAL_RCC_GetSysClockFreq+0x96>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
      sysclockfreq = pllclk;
<<<<<<< HEAD
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	623b      	str	r3, [r7, #32]
=======
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      break;
<<<<<<< HEAD
 800133a:	e002      	b.n	8001342 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 800147a:	e002      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <HAL_RCC_GetSysClockFreq+0xbc>)
 800133e:	623b      	str	r3, [r7, #32]
=======
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_RCC_GetSysClockFreq+0xbc>)
 800147e:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      break;
<<<<<<< HEAD
 8001340:	bf00      	nop
=======
 8001480:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }
  }
  return sysclockfreq;
<<<<<<< HEAD
 8001342:	6a3b      	ldr	r3, [r7, #32]
=======
 8001482:	6a3b      	ldr	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 8001344:	4618      	mov	r0, r3
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bc90      	pop	{r4, r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	08001894 	.word	0x08001894
 8001354:	080018a4 	.word	0x080018a4
 8001358:	40021000 	.word	0x40021000
 800135c:	007a1200 	.word	0x007a1200
 8001360:	003d0900 	.word	0x003d0900
=======
 8001484:	4618      	mov	r0, r3
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bc90      	pop	{r4, r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	08001e28 	.word	0x08001e28
 8001494:	08001e38 	.word	0x08001e38
 8001498:	40021000 	.word	0x40021000
 800149c:	007a1200 	.word	0x007a1200
 80014a0:	003d0900 	.word	0x003d0900
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08001364 <HAL_RCC_GetHCLKFreq>:
=======
080014a4 <HAL_RCC_GetHCLKFreq>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
=======
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  return SystemCoreClock;
<<<<<<< HEAD
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <HAL_RCC_GetHCLKFreq+0x10>)
 800136a:	681b      	ldr	r3, [r3, #0]
=======
 80014a8:	4b02      	ldr	r3, [pc, #8]	; (80014b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014aa:	681b      	ldr	r3, [r3, #0]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	20000000 	.word	0x20000000
=======
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	20000000 	.word	0x20000000
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08001378 <HAL_RCC_GetPCLK1Freq>:
=======
080014b8 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
=======
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
<<<<<<< HEAD
 800137c:	f7ff fff2 	bl	8001364 <HAL_RCC_GetHCLKFreq>
 8001380:	4601      	mov	r1, r0
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	4a03      	ldr	r2, [pc, #12]	; (800139c <HAL_RCC_GetPCLK1Freq+0x24>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	fa21 f303 	lsr.w	r3, r1, r3
=======
 80014bc:	f7ff fff2 	bl	80014a4 <HAL_RCC_GetHCLKFreq>
 80014c0:	4601      	mov	r1, r0
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	fa21 f303 	lsr.w	r3, r1, r3
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	080018b8 	.word	0x080018b8
=======
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08001e4c 	.word	0x08001e4c
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080013a0 <HAL_RCC_GetPCLK2Freq>:
=======
080014e0 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
=======
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
<<<<<<< HEAD
 80013a4:	f7ff ffde 	bl	8001364 <HAL_RCC_GetHCLKFreq>
 80013a8:	4601      	mov	r1, r0
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	0adb      	lsrs	r3, r3, #11
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	fa21 f303 	lsr.w	r3, r1, r3
=======
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_RCC_GetHCLKFreq>
 80014e8:	4601      	mov	r1, r0
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	0adb      	lsrs	r3, r3, #11
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	4a03      	ldr	r2, [pc, #12]	; (8001504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014f6:	5cd3      	ldrb	r3, [r2, r3]
 80014f8:	fa21 f303 	lsr.w	r3, r1, r3
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000
 80013c4:	080018b8 	.word	0x080018b8
=======
 80014fc:	4618      	mov	r0, r3
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	08001e4c 	.word	0x08001e4c
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080013c8 <RCC_Delay>:
=======
08001508 <RCC_Delay>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
=======
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
<<<<<<< HEAD
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <RCC_Delay+0x34>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <RCC_Delay+0x38>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0a5b      	lsrs	r3, r3, #9
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	60fb      	str	r3, [r7, #12]
=======
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <RCC_Delay+0x34>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <RCC_Delay+0x38>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0a5b      	lsrs	r3, r3, #9
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  do
  {
    __NOP();
<<<<<<< HEAD
 80013e4:	bf00      	nop
=======
 8001524:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
  while (Delay --);
<<<<<<< HEAD
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	60fa      	str	r2, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f9      	bne.n	80013e4 <RCC_Delay+0x1c>
=======
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1e5a      	subs	r2, r3, #1
 800152a:	60fa      	str	r2, [r7, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f9      	bne.n	8001524 <RCC_Delay+0x1c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000000 	.word	0x20000000
 8001400:	10624dd3 	.word	0x10624dd3
=======
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000000 	.word	0x20000000
 8001540:	10624dd3 	.word	0x10624dd3
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08001404 <HAL_UART_Init>:
=======
08001544 <HAL_UART_Init>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
=======
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* Check the UART handle allocation */
  if (huart == NULL)
<<<<<<< HEAD
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_UART_Init+0x12>
=======
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_UART_Init+0x12>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8001412:	2301      	movs	r3, #1
 8001414:	e03f      	b.n	8001496 <HAL_UART_Init+0x92>
=======
 8001552:	2301      	movs	r3, #1
 8001554:	e03f      	b.n	80015d6 <HAL_UART_Init+0x92>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d106      	bne.n	8001430 <HAL_UART_Init+0x2c>
=======
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <HAL_UART_Init+0x2c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff f81e 	bl	800046c <HAL_UART_MspInit>
=======
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7fe ff70 	bl	8000450 <HAL_UART_MspInit>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2224      	movs	r2, #36	; 0x24
 8001434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2224      	movs	r2, #36	; 0x24
 8001574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
<<<<<<< HEAD
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001446:	60da      	str	r2, [r3, #12]
=======
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001586:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
<<<<<<< HEAD
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f959 	bl	8001700 <UART_SetConfig>
=======
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fb83 	bl	8001c94 <UART_SetConfig>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800145c:	611a      	str	r2, [r3, #16]
=======
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	691a      	ldr	r2, [r3, #16]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800159c:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
<<<<<<< HEAD
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800146c:	615a      	str	r2, [r3, #20]
=======
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015ac:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
<<<<<<< HEAD
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800147c:	60da      	str	r2, [r3, #12]
=======
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015bc:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2220      	movs	r2, #32
 8001488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2220      	movs	r2, #32
 80015c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2220      	movs	r2, #32
 8001490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2220      	movs	r2, #32
 80015d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  return HAL_OK;
<<<<<<< HEAD
 8001494:	2300      	movs	r3, #0
=======
 80015d4:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
=======
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
0800149e <HAL_UART_Transmit>:
=======
080015de <HAL_UART_Transmit>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 800149e:	b580      	push	{r7, lr}
 80014a0:	b08a      	sub	sp, #40	; 0x28
 80014a2:	af02      	add	r7, sp, #8
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4613      	mov	r3, r2
 80014ac:	80fb      	strh	r3, [r7, #6]
=======
 80015de:	b580      	push	{r7, lr}
 80015e0:	b08a      	sub	sp, #40	; 0x28
 80015e2:	af02      	add	r7, sp, #8
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4613      	mov	r3, r2
 80015ec:	80fb      	strh	r3, [r7, #6]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
<<<<<<< HEAD
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
=======
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b20      	cmp	r3, #32
 80014bc:	d17c      	bne.n	80015b8 <HAL_UART_Transmit+0x11a>
=======
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b20      	cmp	r3, #32
 80015fc:	d17c      	bne.n	80016f8 <HAL_UART_Transmit+0x11a>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    if ((pData == NULL) || (Size == 0U))
<<<<<<< HEAD
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <HAL_UART_Transmit+0x2c>
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_UART_Transmit+0x30>
=======
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <HAL_UART_Transmit+0x2c>
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_UART_Transmit+0x30>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      return  HAL_ERROR;
<<<<<<< HEAD
 80014ca:	2301      	movs	r3, #1
 80014cc:	e075      	b.n	80015ba <HAL_UART_Transmit+0x11c>
=======
 800160a:	2301      	movs	r3, #1
 800160c:	e075      	b.n	80016fa <HAL_UART_Transmit+0x11c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_UART_Transmit+0x3e>
 80014d8:	2302      	movs	r3, #2
 80014da:	e06e      	b.n	80015ba <HAL_UART_Transmit+0x11c>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_UART_Transmit+0x3e>
 8001618:	2302      	movs	r3, #2
 800161a:	e06e      	b.n	80016fa <HAL_UART_Transmit+0x11c>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    huart->gState = HAL_UART_STATE_BUSY_TX;
<<<<<<< HEAD
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2221      	movs	r2, #33	; 0x21
 80014ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2221      	movs	r2, #33	; 0x21
 800162e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 80014f2:	f7ff f8b5 	bl	8000660 <HAL_GetTick>
 80014f6:	6178      	str	r0, [r7, #20]
=======
 8001632:	f7ff f819 	bl	8000668 <HAL_GetTick>
 8001636:	6178      	str	r0, [r7, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    huart->TxXferSize = Size;
<<<<<<< HEAD
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	88fa      	ldrh	r2, [r7, #6]
 80014fc:	849a      	strh	r2, [r3, #36]	; 0x24
=======
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	88fa      	ldrh	r2, [r7, #6]
 800163c:	849a      	strh	r2, [r3, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    huart->TxXferCount = Size;
<<<<<<< HEAD
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	88fa      	ldrh	r2, [r7, #6]
 8001502:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	88fa      	ldrh	r2, [r7, #6]
 8001642:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800150c:	d108      	bne.n	8001520 <HAL_UART_Transmit+0x82>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d104      	bne.n	8001520 <HAL_UART_Transmit+0x82>
=======
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164c:	d108      	bne.n	8001660 <HAL_UART_Transmit+0x82>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d104      	bne.n	8001660 <HAL_UART_Transmit+0x82>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      pdata8bits  = NULL;
<<<<<<< HEAD
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
=======
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      pdata16bits = (uint16_t *) pData;
<<<<<<< HEAD
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	e003      	b.n	8001528 <HAL_UART_Transmit+0x8a>
=======
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	e003      	b.n	8001668 <HAL_UART_Transmit+0x8a>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	61fb      	str	r3, [r7, #28]
=======
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      pdata16bits = NULL;
<<<<<<< HEAD
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
=======
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    while (huart->TxXferCount > 0U)
<<<<<<< HEAD
 8001530:	e02a      	b.n	8001588 <HAL_UART_Transmit+0xea>
=======
 8001670:	e02a      	b.n	80016c8 <HAL_UART_Transmit+0xea>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2200      	movs	r2, #0
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f894 	bl	800166a <UART_WaitOnFlagUntilTimeout>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_UART_Transmit+0xae>
=======
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2200      	movs	r2, #0
 800167a:	2180      	movs	r1, #128	; 0x80
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f9a7 	bl	80019d0 <UART_WaitOnFlagUntilTimeout>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_UART_Transmit+0xae>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        return HAL_TIMEOUT;
<<<<<<< HEAD
 8001548:	2303      	movs	r3, #3
 800154a:	e036      	b.n	80015ba <HAL_UART_Transmit+0x11c>
=======
 8001688:	2303      	movs	r3, #3
 800168a:	e036      	b.n	80016fa <HAL_UART_Transmit+0x11c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
      if (pdata8bits == NULL)
<<<<<<< HEAD
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10b      	bne.n	800156a <HAL_UART_Transmit+0xcc>
=======
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10b      	bne.n	80016aa <HAL_UART_Transmit+0xcc>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
<<<<<<< HEAD
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001560:	605a      	str	r2, [r3, #4]
=======
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016a0:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        pdata16bits++;
<<<<<<< HEAD
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	3302      	adds	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	e007      	b.n	800157a <HAL_UART_Transmit+0xdc>
=======
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	3302      	adds	r3, #2
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	e007      	b.n	80016ba <HAL_UART_Transmit+0xdc>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
=======
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        pdata8bits++;
<<<<<<< HEAD
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	3301      	adds	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
=======
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	3301      	adds	r3, #1
 80016b8:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
      huart->TxXferCount--;
<<<<<<< HEAD
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800157e:	b29b      	uxth	r3, r3
 8001580:	3b01      	subs	r3, #1
 8001582:	b29a      	uxth	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    while (huart->TxXferCount > 0U)
<<<<<<< HEAD
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800158c:	b29b      	uxth	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1cf      	bne.n	8001532 <HAL_UART_Transmit+0x94>
=======
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1cf      	bne.n	8001672 <HAL_UART_Transmit+0x94>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2200      	movs	r2, #0
 800159a:	2140      	movs	r1, #64	; 0x40
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 f864 	bl	800166a <UART_WaitOnFlagUntilTimeout>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_Transmit+0x10e>
=======
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2200      	movs	r2, #0
 80016da:	2140      	movs	r1, #64	; 0x40
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f977 	bl	80019d0 <UART_WaitOnFlagUntilTimeout>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_UART_Transmit+0x10e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      return HAL_TIMEOUT;
<<<<<<< HEAD
 80015a8:	2303      	movs	r3, #3
 80015aa:	e006      	b.n	80015ba <HAL_UART_Transmit+0x11c>
=======
 80016e8:	2303      	movs	r3, #3
 80016ea:	e006      	b.n	80016fa <HAL_UART_Transmit+0x11c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2220      	movs	r2, #32
 80015b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2220      	movs	r2, #32
 80016f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    return HAL_OK;
<<<<<<< HEAD
 80015b4:	2300      	movs	r3, #0
 80015b6:	e000      	b.n	80015ba <HAL_UART_Transmit+0x11c>
=======
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <HAL_UART_Transmit+0x11c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80015b8:	2302      	movs	r3, #2
=======
 80016f8:	2302      	movs	r3, #2
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
}
<<<<<<< HEAD
 80015ba:	4618      	mov	r0, r3
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
=======
 80016fa:	4618      	mov	r0, r3
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
080015c2 <HAL_UART_Receive_IT>:
=======
08001702 <HAL_UART_Receive_IT>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	4613      	mov	r3, r2
 80015ce:	80fb      	strh	r3, [r7, #6]
=======
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	4613      	mov	r3, r2
 800170e:	80fb      	strh	r3, [r7, #6]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d140      	bne.n	800165e <HAL_UART_Receive_IT+0x9c>
=======
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b20      	cmp	r3, #32
 800171a:	d140      	bne.n	800179e <HAL_UART_Receive_IT+0x9c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    if ((pData == NULL) || (Size == 0U))
<<<<<<< HEAD
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <HAL_UART_Receive_IT+0x26>
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_UART_Receive_IT+0x2a>
=======
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_UART_Receive_IT+0x26>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_UART_Receive_IT+0x2a>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      return HAL_ERROR;
<<<<<<< HEAD
 80015e8:	2301      	movs	r3, #1
 80015ea:	e039      	b.n	8001660 <HAL_UART_Receive_IT+0x9e>
=======
 8001728:	2301      	movs	r3, #1
 800172a:	e039      	b.n	80017a0 <HAL_UART_Receive_IT+0x9e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_UART_Receive_IT+0x38>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e032      	b.n	8001660 <HAL_UART_Receive_IT+0x9e>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_UART_Receive_IT+0x38>
 8001736:	2302      	movs	r3, #2
 8001738:	e032      	b.n	80017a0 <HAL_UART_Receive_IT+0x9e>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    huart->pRxBuffPtr = pData;
<<<<<<< HEAD
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    huart->RxXferSize = Size;
<<<<<<< HEAD
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	88fa      	ldrh	r2, [r7, #6]
 800160c:	859a      	strh	r2, [r3, #44]	; 0x2c
=======
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	88fa      	ldrh	r2, [r7, #6]
 800174c:	859a      	strh	r2, [r3, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    huart->RxXferCount = Size;
<<<<<<< HEAD
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	88fa      	ldrh	r2, [r7, #6]
 8001612:	85da      	strh	r2, [r3, #46]	; 0x2e
=======
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	88fa      	ldrh	r2, [r7, #6]
 8001752:	85da      	strh	r2, [r3, #46]	; 0x2e
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    huart->RxState = HAL_UART_STATE_BUSY_RX;
<<<<<<< HEAD
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2222      	movs	r2, #34	; 0x22
 800161e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2222      	movs	r2, #34	; 0x22
 800175e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
<<<<<<< HEAD
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001638:	60da      	str	r2, [r3, #12]
=======
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001778:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
<<<<<<< HEAD
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0201 	orr.w	r2, r2, #1
 8001648:	615a      	str	r2, [r3, #20]
=======
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
<<<<<<< HEAD
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0220 	orr.w	r2, r2, #32
 8001658:	60da      	str	r2, [r3, #12]
=======
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0220 	orr.w	r2, r2, #32
 8001798:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

    return HAL_OK;
<<<<<<< HEAD
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_UART_Receive_IT+0x9e>
=======
 800179a:	2300      	movs	r3, #0
 800179c:	e000      	b.n	80017a0 <HAL_UART_Receive_IT+0x9e>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800165e:	2302      	movs	r3, #2
=======
 800179e:	2302      	movs	r3, #2
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
}
<<<<<<< HEAD
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
=======
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
	...
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
0800166a <UART_WaitOnFlagUntilTimeout>:
=======
080017ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10d      	bne.n	80017fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_UART_IRQHandler+0x52>
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f9cc 	bl	8001b94 <UART_Receive_IT>
      return;
 80017fc:	e0d1      	b.n	80019a2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80b0 	beq.w	8001966 <HAL_UART_IRQHandler+0x1ba>
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <HAL_UART_IRQHandler+0x70>
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80a5 	beq.w	8001966 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00a      	beq.n	800183c <HAL_UART_IRQHandler+0x90>
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001834:	f043 0201 	orr.w	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00a      	beq.n	800185c <HAL_UART_IRQHandler+0xb0>
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001854:	f043 0202 	orr.w	r2, r3, #2
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00a      	beq.n	800187c <HAL_UART_IRQHandler+0xd0>
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001874:	f043 0204 	orr.w	r2, r3, #4
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00f      	beq.n	80018a6 <HAL_UART_IRQHandler+0xfa>
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	2b00      	cmp	r3, #0
 800188e:	d104      	bne.n	800189a <HAL_UART_IRQHandler+0xee>
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d005      	beq.n	80018a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189e:	f043 0208 	orr.w	r2, r3, #8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d078      	beq.n	80019a0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d007      	beq.n	80018c8 <HAL_UART_IRQHandler+0x11c>
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f966 	bl	8001b94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <HAL_UART_IRQHandler+0x144>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d031      	beq.n	8001954 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f8b7 	bl	8001a64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001912:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	4a21      	ldr	r2, [pc, #132]	; (80019a8 <HAL_UART_IRQHandler+0x1fc>)
 8001922:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe ffd7 	bl	80008dc <HAL_DMA_Abort_IT>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d016      	beq.n	8001962 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800193e:	4610      	mov	r0, r2
 8001940:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001942:	e00e      	b.n	8001962 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f83a 	bl	80019be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800194a:	e00a      	b.n	8001962 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f836 	bl	80019be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001952:	e006      	b.n	8001962 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f832 	bl	80019be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001960:	e01e      	b.n	80019a0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001962:	bf00      	nop
    return;
 8001964:	e01c      	b.n	80019a0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_UART_IRQHandler+0x1d6>
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f8a3 	bl	8001ac6 <UART_Transmit_IT>
    return;
 8001980:	e00f      	b.n	80019a2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00a      	beq.n	80019a2 <HAL_UART_IRQHandler+0x1f6>
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f8e4 	bl	8001b64 <UART_EndTransmit_IT>
    return;
 800199c:	bf00      	nop
 800199e:	e000      	b.n	80019a2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80019a0:	bf00      	nop
  }
}
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	08001a9f 	.word	0x08001a9f

080019ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4613      	mov	r3, r2
 8001678:	71fb      	strb	r3, [r7, #7]
=======
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	4613      	mov	r3, r2
 80019de:	71fb      	strb	r3, [r7, #7]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
<<<<<<< HEAD
 800167a:	e02c      	b.n	80016d6 <UART_WaitOnFlagUntilTimeout+0x6c>
=======
 80019e0:	e02c      	b.n	8001a3c <UART_WaitOnFlagUntilTimeout+0x6c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001682:	d028      	beq.n	80016d6 <UART_WaitOnFlagUntilTimeout+0x6c>
=======
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e8:	d028      	beq.n	8001a3c <UART_WaitOnFlagUntilTimeout+0x6c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
<<<<<<< HEAD
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d007      	beq.n	800169a <UART_WaitOnFlagUntilTimeout+0x30>
 800168a:	f7fe ffe9 	bl	8000660 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	429a      	cmp	r2, r3
 8001698:	d21d      	bcs.n	80016d6 <UART_WaitOnFlagUntilTimeout+0x6c>
=======
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d007      	beq.n	8001a00 <UART_WaitOnFlagUntilTimeout+0x30>
 80019f0:	f7fe fe3a 	bl	8000668 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d21d      	bcs.n	8001a3c <UART_WaitOnFlagUntilTimeout+0x6c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
<<<<<<< HEAD
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80016a8:	60da      	str	r2, [r3, #12]
=======
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a0e:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	615a      	str	r2, [r3, #20]
=======
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        huart->gState  = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2220      	movs	r2, #32
 80016be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
        huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2220      	movs	r2, #32
 80016c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
<<<<<<< HEAD
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

        return HAL_TIMEOUT;
<<<<<<< HEAD
 80016d2:	2303      	movs	r3, #3
 80016d4:	e00f      	b.n	80016f6 <UART_WaitOnFlagUntilTimeout+0x8c>
=======
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e00f      	b.n	8001a5c <UART_WaitOnFlagUntilTimeout+0x8c>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
<<<<<<< HEAD
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4013      	ands	r3, r2
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	bf0c      	ite	eq
 80016e6:	2301      	moveq	r3, #1
 80016e8:	2300      	movne	r3, #0
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d0c3      	beq.n	800167c <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4013      	ands	r3, r2
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d0c3      	beq.n	80019e2 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80016f4:	2300      	movs	r3, #0
=======
 8001a5a:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
}
<<<<<<< HEAD
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...
=======
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08001700 <UART_SetConfig>:
=======
08001a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001a7a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f7ff ff80 	bl	80019be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b21      	cmp	r3, #33	; 0x21
 8001ad8:	d13e      	bne.n	8001b58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae2:	d114      	bne.n	8001b0e <UART_Transmit_IT+0x48>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d110      	bne.n	8001b0e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	1c9a      	adds	r2, r3, #2
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	621a      	str	r2, [r3, #32]
 8001b0c:	e008      	b.n	8001b20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	1c59      	adds	r1, r3, #1
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6211      	str	r1, [r2, #32]
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10f      	bne.n	8001b54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e000      	b.n	8001b5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
  }
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff11 	bl	80019ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b22      	cmp	r3, #34	; 0x22
 8001ba6:	d170      	bne.n	8001c8a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb0:	d117      	bne.n	8001be2 <UART_Receive_IT+0x4e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d113      	bne.n	8001be2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	1c9a      	adds	r2, r3, #2
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
 8001be0:	e026      	b.n	8001c30 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf4:	d007      	beq.n	8001c06 <UART_Receive_IT+0x72>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10a      	bne.n	8001c14 <UART_Receive_IT+0x80>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	e008      	b.n	8001c26 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d120      	bne.n	8001c86 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0220 	bic.w	r2, r2, #32
 8001c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7fe fb97 	bl	80003b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e002      	b.n	8001c8c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
  }
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <UART_SetConfig>:
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
=======
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	611a      	str	r2, [r3, #16]
=======
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
<<<<<<< HEAD
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	4313      	orrs	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
=======
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  MODIFY_REG(huart->Instance->CR1,
<<<<<<< HEAD
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800173a:	f023 030c 	bic.w	r3, r3, #12
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	68b9      	ldr	r1, [r7, #8]
 8001744:	430b      	orrs	r3, r1
 8001746:	60d3      	str	r3, [r2, #12]
=======
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001cce:	f023 030c 	bic.w	r3, r3, #12
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	60d3      	str	r3, [r2, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	615a      	str	r2, [r3, #20]
=======
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git


  if(huart->Instance == USART1)
<<<<<<< HEAD
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a2c      	ldr	r2, [pc, #176]	; (8001814 <UART_SetConfig+0x114>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d103      	bne.n	8001770 <UART_SetConfig+0x70>
=======
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2c      	ldr	r2, [pc, #176]	; (8001da8 <UART_SetConfig+0x114>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d103      	bne.n	8001d04 <UART_SetConfig+0x70>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  {
    pclk = HAL_RCC_GetPCLK2Freq();
<<<<<<< HEAD
 8001768:	f7ff fe1a 	bl	80013a0 <HAL_RCC_GetPCLK2Freq>
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	e002      	b.n	8001776 <UART_SetConfig+0x76>
=======
 8001cfc:	f7ff fbf0 	bl	80014e0 <HAL_RCC_GetPCLK2Freq>
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	e002      	b.n	8001d0a <UART_SetConfig+0x76>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8001770:	f7ff fe02 	bl	8001378 <HAL_RCC_GetPCLK1Freq>
 8001774:	60f8      	str	r0, [r7, #12]
=======
 8001d04:	f7ff fbd8 	bl	80014b8 <HAL_RCC_GetPCLK1Freq>
 8001d08:	60f8      	str	r0, [r7, #12]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	009a      	lsls	r2, r3, #2
 8001780:	441a      	add	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	4a22      	ldr	r2, [pc, #136]	; (8001818 <UART_SetConfig+0x118>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	0119      	lsls	r1, r3, #4
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	009a      	lsls	r2, r3, #2
 80017a0:	441a      	add	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <UART_SetConfig+0x118>)
 80017ae:	fba3 0302 	umull	r0, r3, r3, r2
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2064      	movs	r0, #100	; 0x64
 80017b6:	fb00 f303 	mul.w	r3, r0, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	3332      	adds	r3, #50	; 0x32
 80017c0:	4a15      	ldr	r2, [pc, #84]	; (8001818 <UART_SetConfig+0x118>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017cc:	4419      	add	r1, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	009a      	lsls	r2, r3, #2
 80017d8:	441a      	add	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <UART_SetConfig+0x118>)
 80017e6:	fba3 0302 	umull	r0, r3, r3, r2
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2064      	movs	r0, #100	; 0x64
 80017ee:	fb00 f303 	mul.w	r3, r0, r3
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	3332      	adds	r3, #50	; 0x32
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <UART_SetConfig+0x118>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	f003 020f 	and.w	r2, r3, #15
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	440a      	add	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
=======
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	441a      	add	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	4a22      	ldr	r2, [pc, #136]	; (8001dac <UART_SetConfig+0x118>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	0119      	lsls	r1, r3, #4
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	009a      	lsls	r2, r3, #2
 8001d34:	441a      	add	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <UART_SetConfig+0x118>)
 8001d42:	fba3 0302 	umull	r0, r3, r3, r2
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2064      	movs	r0, #100	; 0x64
 8001d4a:	fb00 f303 	mul.w	r3, r0, r3
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	3332      	adds	r3, #50	; 0x32
 8001d54:	4a15      	ldr	r2, [pc, #84]	; (8001dac <UART_SetConfig+0x118>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d60:	4419      	add	r1, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009a      	lsls	r2, r3, #2
 8001d6c:	441a      	add	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <UART_SetConfig+0x118>)
 8001d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2064      	movs	r0, #100	; 0x64
 8001d82:	fb00 f303 	mul.w	r3, r0, r3
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	3332      	adds	r3, #50	; 0x32
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <UART_SetConfig+0x118>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	f003 020f 	and.w	r2, r3, #15
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	440a      	add	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
#endif /* USART_CR1_OVER8 */
}
<<<<<<< HEAD
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40013800 	.word	0x40013800
 8001818:	51eb851f 	.word	0x51eb851f
=======
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40013800 	.word	0x40013800
 8001dac:	51eb851f 	.word	0x51eb851f
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
0800181c <__libc_init_array>:
 800181c:	b570      	push	{r4, r5, r6, lr}
 800181e:	2500      	movs	r5, #0
 8001820:	4e0c      	ldr	r6, [pc, #48]	; (8001854 <__libc_init_array+0x38>)
 8001822:	4c0d      	ldr	r4, [pc, #52]	; (8001858 <__libc_init_array+0x3c>)
 8001824:	1ba4      	subs	r4, r4, r6
 8001826:	10a4      	asrs	r4, r4, #2
 8001828:	42a5      	cmp	r5, r4
 800182a:	d109      	bne.n	8001840 <__libc_init_array+0x24>
 800182c:	f000 f822 	bl	8001874 <_init>
 8001830:	2500      	movs	r5, #0
 8001832:	4e0a      	ldr	r6, [pc, #40]	; (800185c <__libc_init_array+0x40>)
 8001834:	4c0a      	ldr	r4, [pc, #40]	; (8001860 <__libc_init_array+0x44>)
 8001836:	1ba4      	subs	r4, r4, r6
 8001838:	10a4      	asrs	r4, r4, #2
 800183a:	42a5      	cmp	r5, r4
 800183c:	d105      	bne.n	800184a <__libc_init_array+0x2e>
 800183e:	bd70      	pop	{r4, r5, r6, pc}
 8001840:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001844:	4798      	blx	r3
 8001846:	3501      	adds	r5, #1
 8001848:	e7ee      	b.n	8001828 <__libc_init_array+0xc>
 800184a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800184e:	4798      	blx	r3
 8001850:	3501      	adds	r5, #1
 8001852:	e7f2      	b.n	800183a <__libc_init_array+0x1e>
 8001854:	080018c0 	.word	0x080018c0
 8001858:	080018c0 	.word	0x080018c0
 800185c:	080018c0 	.word	0x080018c0
 8001860:	080018c4 	.word	0x080018c4
=======
08001db0 <__libc_init_array>:
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	2500      	movs	r5, #0
 8001db4:	4e0c      	ldr	r6, [pc, #48]	; (8001de8 <__libc_init_array+0x38>)
 8001db6:	4c0d      	ldr	r4, [pc, #52]	; (8001dec <__libc_init_array+0x3c>)
 8001db8:	1ba4      	subs	r4, r4, r6
 8001dba:	10a4      	asrs	r4, r4, #2
 8001dbc:	42a5      	cmp	r5, r4
 8001dbe:	d109      	bne.n	8001dd4 <__libc_init_array+0x24>
 8001dc0:	f000 f822 	bl	8001e08 <_init>
 8001dc4:	2500      	movs	r5, #0
 8001dc6:	4e0a      	ldr	r6, [pc, #40]	; (8001df0 <__libc_init_array+0x40>)
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	; (8001df4 <__libc_init_array+0x44>)
 8001dca:	1ba4      	subs	r4, r4, r6
 8001dcc:	10a4      	asrs	r4, r4, #2
 8001dce:	42a5      	cmp	r5, r4
 8001dd0:	d105      	bne.n	8001dde <__libc_init_array+0x2e>
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
 8001dd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dd8:	4798      	blx	r3
 8001dda:	3501      	adds	r5, #1
 8001ddc:	e7ee      	b.n	8001dbc <__libc_init_array+0xc>
 8001dde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001de2:	4798      	blx	r3
 8001de4:	3501      	adds	r5, #1
 8001de6:	e7f2      	b.n	8001dce <__libc_init_array+0x1e>
 8001de8:	08001e54 	.word	0x08001e54
 8001dec:	08001e54 	.word	0x08001e54
 8001df0:	08001e54 	.word	0x08001e54
 8001df4:	08001e58 	.word	0x08001e58
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08001864 <memset>:
 8001864:	4603      	mov	r3, r0
 8001866:	4402      	add	r2, r0
 8001868:	4293      	cmp	r3, r2
 800186a:	d100      	bne.n	800186e <memset+0xa>
 800186c:	4770      	bx	lr
 800186e:	f803 1b01 	strb.w	r1, [r3], #1
 8001872:	e7f9      	b.n	8001868 <memset+0x4>
=======
08001df8 <memset>:
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4402      	add	r2, r0
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d100      	bne.n	8001e02 <memset+0xa>
 8001e00:	4770      	bx	lr
 8001e02:	f803 1b01 	strb.w	r1, [r3], #1
 8001e06:	e7f9      	b.n	8001dfc <memset+0x4>
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08001874 <_init>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	bf00      	nop
 8001878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187a:	bc08      	pop	{r3}
 800187c:	469e      	mov	lr, r3
 800187e:	4770      	bx	lr
=======
08001e08 <_init>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	bf00      	nop
 8001e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0e:	bc08      	pop	{r3}
 8001e10:	469e      	mov	lr, r3
 8001e12:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git

<<<<<<< HEAD
08001880 <_fini>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	bf00      	nop
 8001884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001886:	bc08      	pop	{r3}
 8001888:	469e      	mov	lr, r3
 800188a:	4770      	bx	lr
=======
08001e14 <_fini>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	bf00      	nop
 8001e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1a:	bc08      	pop	{r3}
 8001e1c:	469e      	mov	lr, r3
 8001e1e:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/jinnra/MHV.git
