
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f04  08002f04  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002f04  08002f04  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f04  08002f04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  08002f7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002f7c  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000869d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab5  00000000  00000000  00028736  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  0002a1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000738  00000000  00000000  0002aa10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000175bb  00000000  00000000  0002b148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b49  00000000  00000000  00042703  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086353  00000000  00000000  0004a24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d059f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020cc  00000000  00000000  000d061c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ea4 	.word	0x08002ea4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002ea4 	.word	0x08002ea4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	struct Packet dt = {0xAA,STARTADDRESS, MASTERADDRESS, 322};
 8000152:	4a3a      	ldr	r2, [pc, #232]	; (800023c <main+0xf0>)
 8000154:	1d3b      	adds	r3, r7, #4
 8000156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800015a:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i = 0; i <(sizeof(struct CrcPacket)); i++){
 800015e:	2300      	movs	r3, #0
 8000160:	60fb      	str	r3, [r7, #12]
 8000162:	e007      	b.n	8000174 <main+0x28>
		UART1_rxBuffer[i] = 222;
 8000164:	4a36      	ldr	r2, [pc, #216]	; (8000240 <main+0xf4>)
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	4413      	add	r3, r2
 800016a:	22de      	movs	r2, #222	; 0xde
 800016c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <(sizeof(struct CrcPacket)); i++){
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	3301      	adds	r3, #1
 8000172:	60fb      	str	r3, [r7, #12]
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	2b0b      	cmp	r3, #11
 8000178:	d9f4      	bls.n	8000164 <main+0x18>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017a:	f000 fbdf 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017e:	f000 f871 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000182:	f000 f947 	bl	8000414 <MX_GPIO_Init>
  HAL_Delay(500);
 8000186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800018a:	f000 fc39 	bl	8000a00 <HAL_Delay>
  MX_USART1_UART_Init();
 800018e:	f000 f917 	bl	80003c0 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000192:	f000 f901 	bl	8000398 <MX_CRC_Init>
  MX_ADC1_Init();
 8000196:	f000 f8c1 	bl	800031c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CRC_Init(&hcrc);
 800019a:	482a      	ldr	r0, [pc, #168]	; (8000244 <main+0xf8>)
 800019c:	f001 f96f 	bl	800147e <HAL_CRC_Init>
  HAL_UART_Receive_IT (&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 80001a0:	220c      	movs	r2, #12
 80001a2:	4927      	ldr	r1, [pc, #156]	; (8000240 <main+0xf4>)
 80001a4:	4828      	ldr	r0, [pc, #160]	; (8000248 <main+0xfc>)
 80001a6:	f002 fa28 	bl	80025fa <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);
 80001aa:	4828      	ldr	r0, [pc, #160]	; (800024c <main+0x100>)
 80001ac:	f000 fd22 	bl	8000bf4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80001b0:	f04f 31ff 	mov.w	r1, #4294967295
 80001b4:	4825      	ldr	r0, [pc, #148]	; (800024c <main+0x100>)
 80001b6:	f000 fdcb 	bl	8000d50 <HAL_ADC_PollForConversion>
  srand(HAL_ADC_GetValue(&hadc1));
 80001ba:	4824      	ldr	r0, [pc, #144]	; (800024c <main+0x100>)
 80001bc:	f000 fec2 	bl	8000f44 <HAL_ADC_GetValue>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f002 fda2 	bl	8002d0c <srand>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  rnd = randAddress();
 80001c8:	f000 f9da 	bl	8000580 <randAddress>
 80001cc:	4603      	mov	r3, r0
 80001ce:	461a      	mov	r2, r3
 80001d0:	4b1f      	ldr	r3, [pc, #124]	; (8000250 <main+0x104>)
 80001d2:	801a      	strh	r2, [r3, #0]
	  if(sendF == 0){
 80001d4:	4b1f      	ldr	r3, [pc, #124]	; (8000254 <main+0x108>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d111      	bne.n	8000200 <main+0xb4>
	  HAL_Delay(1000);
 80001dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e0:	f000 fc0e 	bl	8000a00 <HAL_Delay>
	  sendPacket(dt);
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80001ea:	f000 fa07 	bl	80005fc <sendPacket>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f2:	4819      	ldr	r0, [pc, #100]	; (8000258 <main+0x10c>)
 80001f4:	f001 fb7a 	bl	80018ec <HAL_GPIO_TogglePin>
	  sendF = 1;
 80001f8:	4b16      	ldr	r3, [pc, #88]	; (8000254 <main+0x108>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	e7e3      	b.n	80001c8 <main+0x7c>

	  }
	  else if((addrInit==1)&&(answF==1)){
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <main+0x110>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b01      	cmp	r3, #1
 8000206:	d1df      	bne.n	80001c8 <main+0x7c>
 8000208:	4b15      	ldr	r3, [pc, #84]	; (8000260 <main+0x114>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d1db      	bne.n	80001c8 <main+0x7c>
		  HAL_Delay(50);
 8000210:	2032      	movs	r0, #50	; 0x32
 8000212:	f000 fbf5 	bl	8000a00 <HAL_Delay>
		  answF= 0;
 8000216:	4b12      	ldr	r3, [pc, #72]	; (8000260 <main+0x114>)
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
		  dt.receiverAddress = randAddress();
 800021c:	f000 f9b0 	bl	8000580 <randAddress>
 8000220:	4603      	mov	r3, r0
 8000222:	80fb      	strh	r3, [r7, #6]
		  sendPacket(dt);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	e893 0003 	ldmia.w	r3, {r0, r1}
 800022a:	f000 f9e7 	bl	80005fc <sendPacket>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800022e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000232:	4809      	ldr	r0, [pc, #36]	; (8000258 <main+0x10c>)
 8000234:	f001 fb5a 	bl	80018ec <HAL_GPIO_TogglePin>
	  rnd = randAddress();
 8000238:	e7c6      	b.n	80001c8 <main+0x7c>
 800023a:	bf00      	nop
 800023c:	08002ebc 	.word	0x08002ebc
 8000240:	2000008c 	.word	0x2000008c
 8000244:	200000e4 	.word	0x200000e4
 8000248:	2000011c 	.word	0x2000011c
 800024c:	200000ec 	.word	0x200000ec
 8000250:	200000d0 	.word	0x200000d0
 8000254:	200000c0 	.word	0x200000c0
 8000258:	40011000 	.word	0x40011000
 800025c:	200000cc 	.word	0x200000cc
 8000260:	200000c4 	.word	0x200000c4

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b094      	sub	sp, #80	; 0x50
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fd42 	bl	8002cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000294:	2301      	movs	r3, #1
 8000296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fb30 	bl	8001920 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002c6:	f000 f9bd 	bl	8000644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2102      	movs	r1, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fd9a 	bl	8001e20 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002f2:	f000 f9a7 	bl	8000644 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002f6:	2302      	movs	r3, #2
 80002f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4618      	mov	r0, r3
 8000304:	f001 ff28 	bl	8002158 <HAL_RCCEx_PeriphCLKConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800030e:	f000 f999 	bl	8000644 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3750      	adds	r7, #80	; 0x50
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_ADC1_Init+0x74>)
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <MX_ADC1_Init+0x78>)
 8000330:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_ADC1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_ADC1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <MX_ADC1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <MX_ADC1_Init+0x74>)
 8000346:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800034a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034c:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MX_ADC1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_ADC1_Init+0x74>)
 8000354:	2201      	movs	r2, #1
 8000356:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_ADC1_Init+0x74>)
 800035a:	f000 fb73 	bl	8000a44 <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000364:	f000 f96e 	bl	8000644 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000368:	2305      	movs	r3, #5
 800036a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036c:	2301      	movs	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4619      	mov	r1, r3
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_ADC1_Init+0x74>)
 800037a:	f000 fdef 	bl	8000f5c <HAL_ADC_ConfigChannel>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000384:	f000 f95e 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	200000ec 	.word	0x200000ec
 8000394:	40012400 	.word	0x40012400

08000398 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_CRC_Init+0x20>)
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <MX_CRC_Init+0x24>)
 80003a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_CRC_Init+0x20>)
 80003a4:	f001 f86b 	bl	800147e <HAL_CRC_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80003ae:	f000 f949 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200000e4 	.word	0x200000e4
 80003bc:	40023000 	.word	0x40023000

080003c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <MX_USART1_UART_Init+0x50>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003f8:	f002 f820 	bl	800243c <HAL_UART_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000402:	f000 f91f 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	2000011c 	.word	0x2000011c
 8000410:	40013800 	.word	0x40013800

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000428:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <MX_GPIO_Init+0xc0>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a29      	ldr	r2, [pc, #164]	; (80004d4 <MX_GPIO_Init+0xc0>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <MX_GPIO_Init+0xc0>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0310 	and.w	r3, r3, #16
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000440:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <MX_GPIO_Init+0xc0>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a23      	ldr	r2, [pc, #140]	; (80004d4 <MX_GPIO_Init+0xc0>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <MX_GPIO_Init+0xc0>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0320 	and.w	r3, r3, #32
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <MX_GPIO_Init+0xc0>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <MX_GPIO_Init+0xc0>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_GPIO_Init+0xc0>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MX_GPIO_Init+0xc0>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <MX_GPIO_Init+0xc0>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_GPIO_Init+0xc0>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0308 	and.w	r3, r3, #8
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048e:	4812      	ldr	r0, [pc, #72]	; (80004d8 <MX_GPIO_Init+0xc4>)
 8000490:	f001 fa14 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2302      	movs	r3, #2
 80004a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	4619      	mov	r1, r3
 80004ac:	480a      	ldr	r0, [pc, #40]	; (80004d8 <MX_GPIO_Init+0xc4>)
 80004ae:	f001 f8ab 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80004b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004bc:	2301      	movs	r3, #1
 80004be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_GPIO_Init+0xc8>)
 80004c8:	f001 f89e 	bl	8001608 <HAL_GPIO_Init>

}
 80004cc:	bf00      	nop
 80004ce:	3720      	adds	r7, #32
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40011000 	.word	0x40011000
 80004dc:	40010c00 	.word	0x40010c00

080004e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ec:	481c      	ldr	r0, [pc, #112]	; (8000560 <HAL_UART_RxCpltCallback+0x80>)
 80004ee:	f001 f9fd 	bl	80018ec <HAL_GPIO_TogglePin>
	recvPacket = (struct CrcPacket*)&UART1_rxBuffer[0];
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <HAL_UART_RxCpltCallback+0x84>)
 80004f4:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <HAL_UART_RxCpltCallback+0x88>)
 80004f6:	601a      	str	r2, [r3, #0]
	if(crcCheck(*recvPacket)==1){
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <HAL_UART_RxCpltCallback+0x84>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000500:	f000 f860 	bl	80005c4 <crcCheck>
 8000504:	4603      	mov	r3, r0
 8000506:	2b01      	cmp	r3, #1
 8000508:	d11d      	bne.n	8000546 <HAL_UART_RxCpltCallback+0x66>
	if(addrInit==0){
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <HAL_UART_RxCpltCallback+0x8c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d109      	bne.n	8000526 <HAL_UART_RxCpltCallback+0x46>
	slvCount = recvPacket->data.senderAddress - STARTADDRESS;
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_UART_RxCpltCallback+0x84>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	889b      	ldrh	r3, [r3, #4]
 8000518:	3b64      	subs	r3, #100	; 0x64
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <HAL_UART_RxCpltCallback+0x90>)
 800051c:	6013      	str	r3, [r2, #0]
	addrInit = 1;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <HAL_UART_RxCpltCallback+0x8c>)
 8000520:	2201      	movs	r2, #1
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	e00f      	b.n	8000546 <HAL_UART_RxCpltCallback+0x66>
	}
	else{
		if((recvPacket->data.senderAddress - STARTADDRESS)<sizeof(db)){
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_UART_RxCpltCallback+0x84>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	889b      	ldrh	r3, [r3, #4]
 800052c:	3b64      	subs	r3, #100	; 0x64
 800052e:	2b27      	cmp	r3, #39	; 0x27
 8000530:	d809      	bhi.n	8000546 <HAL_UART_RxCpltCallback+0x66>
	db[(recvPacket->data.senderAddress - STARTADDRESS)]= recvPacket->data.payload;
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_UART_RxCpltCallback+0x84>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <HAL_UART_RxCpltCallback+0x84>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	889b      	ldrh	r3, [r3, #4]
 800053c:	3b64      	subs	r3, #100	; 0x64
 800053e:	88d1      	ldrh	r1, [r2, #6]
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <HAL_UART_RxCpltCallback+0x94>)
 8000542:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

	}
	}
	answF = 1;
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_UART_RxCpltCallback+0x98>)
 8000548:	2201      	movs	r2, #1
 800054a:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 800054c:	220c      	movs	r2, #12
 800054e:	4906      	ldr	r1, [pc, #24]	; (8000568 <HAL_UART_RxCpltCallback+0x88>)
 8000550:	480a      	ldr	r0, [pc, #40]	; (800057c <HAL_UART_RxCpltCallback+0x9c>)
 8000552:	f002 f852 	bl	80025fa <HAL_UART_Receive_IT>


}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40011000 	.word	0x40011000
 8000564:	200000e0 	.word	0x200000e0
 8000568:	2000008c 	.word	0x2000008c
 800056c:	200000cc 	.word	0x200000cc
 8000570:	200000c8 	.word	0x200000c8
 8000574:	20000098 	.word	0x20000098
 8000578:	200000c4 	.word	0x200000c4
 800057c:	2000011c 	.word	0x2000011c

08000580 <randAddress>:
uint16_t randAddress(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
	int r = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
	int lower = STARTADDRESS;
 800058a:	2364      	movs	r3, #100	; 0x64
 800058c:	60bb      	str	r3, [r7, #8]
	int upper = STARTADDRESS + slvCount;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <randAddress+0x40>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3364      	adds	r3, #100	; 0x64
 8000594:	607b      	str	r3, [r7, #4]
	r =  (rand() % (upper - lower + 1)) + lower;
 8000596:	f002 fbdd 	bl	8002d54 <rand>
 800059a:	4602      	mov	r2, r0
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	1acb      	subs	r3, r1, r3
 80005a2:	3301      	adds	r3, #1
 80005a4:	fb92 f1f3 	sdiv	r1, r2, r3
 80005a8:	fb03 f301 	mul.w	r3, r3, r1
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	4413      	add	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
	return (uint16_t) r;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	b29b      	uxth	r3, r3
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000c8 	.word	0x200000c8

080005c4 <crcCheck>:
int crcCheck(struct CrcPacket p){
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b087      	sub	sp, #28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int res = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
	if(p.crcVal==HAL_CRC_Calculate(&hcrc, (uint32_t*)&p.data, sizeof(p.data)/4)){
 80005d4:	68fc      	ldr	r4, [r7, #12]
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2202      	movs	r2, #2
 80005da:	4619      	mov	r1, r3
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <crcCheck+0x34>)
 80005de:	f000 ff6a 	bl	80014b6 <HAL_CRC_Calculate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	429c      	cmp	r4, r3
 80005e6:	d101      	bne.n	80005ec <crcCheck+0x28>
		res = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
	}
	return res;
 80005ec:	697b      	ldr	r3, [r7, #20]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	371c      	adds	r7, #28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000e4 	.word	0x200000e4

080005fc <sendPacket>:
void sendPacket(struct Packet p){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	463b      	mov	r3, r7
 8000604:	e883 0003 	stmia.w	r3, {r0, r1}
	struct CrcPacket msg = {p, HAL_CRC_Calculate(&hcrc, (uint32_t*) &p, sizeof(p)/4)};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	463a      	mov	r2, r7
 800060e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000612:	e883 0003 	stmia.w	r3, {r0, r1}
 8000616:	463b      	mov	r3, r7
 8000618:	2202      	movs	r2, #2
 800061a:	4619      	mov	r1, r3
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <sendPacket+0x40>)
 800061e:	f000 ff4a 	bl	80014b6 <HAL_CRC_Calculate>
 8000622:	4603      	mov	r3, r0
 8000624:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart1,(uint8_t*) &msg , sizeof(msg), 100);
 8000626:	f107 010c 	add.w	r1, r7, #12
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	220c      	movs	r2, #12
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <sendPacket+0x44>)
 8000630:	f001 ff51 	bl	80024d6 <HAL_UART_Transmit>
}
 8000634:	bf00      	nop
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000e4 	.word	0x200000e4
 8000640:	2000011c 	.word	0x2000011c

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_MspInit+0x5c>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <HAL_MspInit+0x5c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_MspInit+0x5c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_MspInit+0x5c>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <HAL_MspInit+0x5c>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_MspInit+0x5c>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_MspInit+0x60>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <HAL_MspInit+0x60>)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010000 	.word	0x40010000

080006b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <HAL_ADC_MspInit+0x6c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d121      	bne.n	8000718 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000704:	2320      	movs	r3, #32
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000708:	2303      	movs	r3, #3
 800070a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_ADC_MspInit+0x74>)
 8000714:	f000 ff78 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40012400 	.word	0x40012400
 8000724:	40021000 	.word	0x40021000
 8000728:	40010800 	.word	0x40010800

0800072c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a09      	ldr	r2, [pc, #36]	; (8000760 <HAL_CRC_MspInit+0x34>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d10b      	bne.n	8000756 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_CRC_MspInit+0x38>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_CRC_MspInit+0x38>)
 8000744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_CRC_MspInit+0x38>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40023000 	.word	0x40023000
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a20      	ldr	r2, [pc, #128]	; (8000804 <HAL_UART_MspInit+0x9c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d139      	bne.n	80007fc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <HAL_UART_MspInit+0xa0>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <HAL_UART_MspInit+0xa0>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <HAL_UART_MspInit+0xa0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <HAL_UART_MspInit+0xa0>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a18      	ldr	r2, [pc, #96]	; (8000808 <HAL_UART_MspInit+0xa0>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <HAL_UART_MspInit+0xa0>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	4619      	mov	r1, r3
 80007cc:	480f      	ldr	r0, [pc, #60]	; (800080c <HAL_UART_MspInit+0xa4>)
 80007ce:	f000 ff1b 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <HAL_UART_MspInit+0xa4>)
 80007e8:	f000 ff0e 	bl	8001608 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2025      	movs	r0, #37	; 0x25
 80007f2:	f000 fe0e 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007f6:	2025      	movs	r0, #37	; 0x25
 80007f8:	f000 fe27 	bl	800144a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40013800 	.word	0x40013800
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <HardFault_Handler+0x4>

08000822 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <MemManage_Handler+0x4>

08000828 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <BusFault_Handler+0x4>

0800082e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <UsageFault_Handler+0x4>

08000834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085c:	f000 f8b4 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <USART1_IRQHandler+0x10>)
 800086a:	f001 ff1b 	bl	80026a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000011c 	.word	0x2000011c

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a8:	f002 f9fe 	bl	8002ca8 <__errno>
 80008ac:	4602      	mov	r2, r0
 80008ae:	230c      	movs	r3, #12
 80008b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20005000 	.word	0x20005000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	200000d4 	.word	0x200000d4
 80008e0:	20000168 	.word	0x20000168

080008e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008f2:	e003      	b.n	80008fc <LoopCopyDataInit>

080008f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008fa:	3104      	adds	r1, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000900:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000902:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000904:	d3f6      	bcc.n	80008f4 <CopyDataInit>
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000908:	e002      	b.n	8000910 <LoopFillZerobss>

0800090a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800090c:	f842 3b04 	str.w	r3, [r2], #4

08000910 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000912:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000914:	d3f9      	bcc.n	800090a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000916:	f7ff ffe5 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091a:	f002 f9cb 	bl	8002cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff fc15 	bl	800014c <main>
  bx lr
 8000922:	4770      	bx	lr
  ldr r3, =_sidata
 8000924:	08002f0c 	.word	0x08002f0c
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800092c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000930:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000934:	20000164 	.word	0x20000164

08000938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_2_IRQHandler>
	...

0800093c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x28>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 fd55 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fe7a 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fd6d 	bl	8001466 <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 fd35 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x1c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a03      	ldr	r2, [pc, #12]	; (80009e8 <HAL_IncTick+0x20>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	20000008 	.word	0x20000008
 80009e8:	2000015c 	.word	0x2000015c

080009ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <HAL_GetTick+0x10>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	2000015c 	.word	0x2000015c

08000a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a08:	f7ff fff0 	bl	80009ec <HAL_GetTick>
 8000a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a18:	d005      	beq.n	8000a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_Delay+0x40>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a26:	bf00      	nop
 8000a28:	f7ff ffe0 	bl	80009ec <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8f7      	bhi.n	8000a28 <HAL_Delay+0x28>
  {
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000008 	.word	0x20000008

08000a44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e0be      	b.n	8000be4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d109      	bne.n	8000a88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff fe16 	bl	80006b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 fbb1 	bl	80011f0 <ADC_ConversionStop_Disable>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f040 8099 	bne.w	8000bd2 <HAL_ADC_Init+0x18e>
 8000aa0:	7dfb      	ldrb	r3, [r7, #23]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f040 8095 	bne.w	8000bd2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ab0:	f023 0302 	bic.w	r3, r3, #2
 8000ab4:	f043 0202 	orr.w	r2, r3, #2
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ac4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	7b1b      	ldrb	r3, [r3, #12]
 8000aca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000acc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000adc:	d003      	beq.n	8000ae6 <HAL_ADC_Init+0xa2>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d102      	bne.n	8000aec <HAL_ADC_Init+0xa8>
 8000ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aea:	e000      	b.n	8000aee <HAL_ADC_Init+0xaa>
 8000aec:	2300      	movs	r3, #0
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7d1b      	ldrb	r3, [r3, #20]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d119      	bne.n	8000b30 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7b1b      	ldrb	r3, [r3, #12]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d109      	bne.n	8000b18 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	035a      	lsls	r2, r3, #13
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	e00b      	b.n	8000b30 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1c:	f043 0220 	orr.w	r2, r3, #32
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b28:	f043 0201 	orr.w	r2, r3, #1
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	430a      	orrs	r2, r1
 8000b42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	4b28      	ldr	r3, [pc, #160]	; (8000bec <HAL_ADC_Init+0x1a8>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	68b9      	ldr	r1, [r7, #8]
 8000b54:	430b      	orrs	r3, r1
 8000b56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b60:	d003      	beq.n	8000b6a <HAL_ADC_Init+0x126>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d104      	bne.n	8000b74 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	051b      	lsls	r3, r3, #20
 8000b72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	430a      	orrs	r2, r1
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_ADC_Init+0x1ac>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d10b      	bne.n	8000bb0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	f023 0303 	bic.w	r3, r3, #3
 8000ba6:	f043 0201 	orr.w	r2, r3, #1
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bae:	e018      	b.n	8000be2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb4:	f023 0312 	bic.w	r3, r3, #18
 8000bb8:	f043 0210 	orr.w	r2, r3, #16
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc4:	f043 0201 	orr.w	r2, r3, #1
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bd0:	e007      	b.n	8000be2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	f043 0210 	orr.w	r2, r3, #16
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	ffe1f7fd 	.word	0xffe1f7fd
 8000bf0:	ff1f0efe 	.word	0xff1f0efe

08000bf4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d101      	bne.n	8000c0e <HAL_ADC_Start+0x1a>
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e098      	b.n	8000d40 <HAL_ADC_Start+0x14c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2201      	movs	r2, #1
 8000c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 fa98 	bl	800114c <ADC_Enable>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8087 	bne.w	8000d36 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c30:	f023 0301 	bic.w	r3, r3, #1
 8000c34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a41      	ldr	r2, [pc, #260]	; (8000d48 <HAL_ADC_Start+0x154>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d105      	bne.n	8000c52 <HAL_ADC_Start+0x5e>
 8000c46:	4b41      	ldr	r3, [pc, #260]	; (8000d4c <HAL_ADC_Start+0x158>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d115      	bne.n	8000c7e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d026      	beq.n	8000cba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c7c:	e01d      	b.n	8000cba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <HAL_ADC_Start+0x158>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d004      	beq.n	8000c9e <HAL_ADC_Start+0xaa>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a2b      	ldr	r2, [pc, #172]	; (8000d48 <HAL_ADC_Start+0x154>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10d      	bne.n	8000cba <HAL_ADC_Start+0xc6>
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <HAL_ADC_Start+0x158>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d007      	beq.n	8000cba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cca:	f023 0206 	bic.w	r2, r3, #6
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cd2:	e002      	b.n	8000cda <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f06f 0202 	mvn.w	r2, #2
 8000cea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cf6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cfa:	d113      	bne.n	8000d24 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d00:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <HAL_ADC_Start+0x154>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d105      	bne.n	8000d12 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_ADC_Start+0x158>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d108      	bne.n	8000d24 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	e00c      	b.n	8000d3e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	e003      	b.n	8000d3e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40012800 	.word	0x40012800
 8000d4c:	40012400 	.word	0x40012400

08000d50 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b087      	sub	sp, #28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d66:	f7ff fe41 	bl	80009ec <HAL_GetTick>
 8000d6a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00b      	beq.n	8000d92 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7e:	f043 0220 	orr.w	r2, r3, #32
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e0c8      	b.n	8000f24 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d12a      	bne.n	8000df6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d123      	bne.n	8000df6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000dae:	e01a      	b.n	8000de6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db6:	d016      	beq.n	8000de6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d007      	beq.n	8000dce <HAL_ADC_PollForConversion+0x7e>
 8000dbe:	f7ff fe15 	bl	80009ec <HAL_GetTick>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d20b      	bcs.n	8000de6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd2:	f043 0204 	orr.w	r2, r3, #4
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e09e      	b.n	8000f24 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0dd      	beq.n	8000db0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000df4:	e06c      	b.n	8000ed0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000df6:	4b4d      	ldr	r3, [pc, #308]	; (8000f2c <HAL_ADC_PollForConversion+0x1dc>)
 8000df8:	681c      	ldr	r4, [r3, #0]
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f001 fa62 	bl	80022c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e00:	4603      	mov	r3, r0
 8000e02:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6919      	ldr	r1, [r3, #16]
 8000e0c:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <HAL_ADC_PollForConversion+0x1e0>)
 8000e0e:	400b      	ands	r3, r1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d118      	bne.n	8000e46 <HAL_ADC_PollForConversion+0xf6>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68d9      	ldr	r1, [r3, #12]
 8000e1a:	4b46      	ldr	r3, [pc, #280]	; (8000f34 <HAL_ADC_PollForConversion+0x1e4>)
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d111      	bne.n	8000e46 <HAL_ADC_PollForConversion+0xf6>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6919      	ldr	r1, [r3, #16]
 8000e28:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <HAL_ADC_PollForConversion+0x1e8>)
 8000e2a:	400b      	ands	r3, r1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d108      	bne.n	8000e42 <HAL_ADC_PollForConversion+0xf2>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68d9      	ldr	r1, [r3, #12]
 8000e36:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <HAL_ADC_PollForConversion+0x1ec>)
 8000e38:	400b      	ands	r3, r1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_ADC_PollForConversion+0xf2>
 8000e3e:	2314      	movs	r3, #20
 8000e40:	e020      	b.n	8000e84 <HAL_ADC_PollForConversion+0x134>
 8000e42:	2329      	movs	r3, #41	; 0x29
 8000e44:	e01e      	b.n	8000e84 <HAL_ADC_PollForConversion+0x134>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6919      	ldr	r1, [r3, #16]
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <HAL_ADC_PollForConversion+0x1e8>)
 8000e4e:	400b      	ands	r3, r1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d106      	bne.n	8000e62 <HAL_ADC_PollForConversion+0x112>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68d9      	ldr	r1, [r3, #12]
 8000e5a:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <HAL_ADC_PollForConversion+0x1ec>)
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00d      	beq.n	8000e7e <HAL_ADC_PollForConversion+0x12e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6919      	ldr	r1, [r3, #16]
 8000e68:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <HAL_ADC_PollForConversion+0x1f0>)
 8000e6a:	400b      	ands	r3, r1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d108      	bne.n	8000e82 <HAL_ADC_PollForConversion+0x132>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	68d9      	ldr	r1, [r3, #12]
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <HAL_ADC_PollForConversion+0x1f0>)
 8000e78:	400b      	ands	r3, r1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_ADC_PollForConversion+0x132>
 8000e7e:	2354      	movs	r3, #84	; 0x54
 8000e80:	e000      	b.n	8000e84 <HAL_ADC_PollForConversion+0x134>
 8000e82:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000e84:	fb02 f303 	mul.w	r3, r2, r3
 8000e88:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e8a:	e01d      	b.n	8000ec8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e92:	d016      	beq.n	8000ec2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d007      	beq.n	8000eaa <HAL_ADC_PollForConversion+0x15a>
 8000e9a:	f7ff fda7 	bl	80009ec <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d20b      	bcs.n	8000ec2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eae:	f043 0204 	orr.w	r2, r3, #4
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e030      	b.n	8000f24 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8dd      	bhi.n	8000e8c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f06f 0212 	mvn.w	r2, #18
 8000ed8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ef0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ef4:	d115      	bne.n	8000f22 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d111      	bne.n	8000f22 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d105      	bne.n	8000f22 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	f043 0201 	orr.w	r2, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	24924924 	.word	0x24924924
 8000f34:	00924924 	.word	0x00924924
 8000f38:	12492492 	.word	0x12492492
 8000f3c:	00492492 	.word	0x00492492
 8000f40:	00249249 	.word	0x00249249

08000f44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x20>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e0dc      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1da>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b06      	cmp	r3, #6
 8000f8a:	d81c      	bhi.n	8000fc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3b05      	subs	r3, #5
 8000f9e:	221f      	movs	r2, #31
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	4019      	ands	r1, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3b05      	subs	r3, #5
 8000fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34
 8000fc4:	e03c      	b.n	8001040 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b0c      	cmp	r3, #12
 8000fcc:	d81c      	bhi.n	8001008 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	3b23      	subs	r3, #35	; 0x23
 8000fe0:	221f      	movs	r2, #31
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	4019      	ands	r1, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3b23      	subs	r3, #35	; 0x23
 8000ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
 8001006:	e01b      	b.n	8001040 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	3b41      	subs	r3, #65	; 0x41
 800101a:	221f      	movs	r2, #31
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	4019      	ands	r1, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	3b41      	subs	r3, #65	; 0x41
 8001034:	fa00 f203 	lsl.w	r2, r0, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b09      	cmp	r3, #9
 8001046:	d91c      	bls.n	8001082 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68d9      	ldr	r1, [r3, #12]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	3b1e      	subs	r3, #30
 800105a:	2207      	movs	r2, #7
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	4019      	ands	r1, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	6898      	ldr	r0, [r3, #8]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	3b1e      	subs	r3, #30
 8001074:	fa00 f203 	lsl.w	r2, r0, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	e019      	b.n	80010b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6919      	ldr	r1, [r3, #16]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	2207      	movs	r2, #7
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	4019      	ands	r1, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6898      	ldr	r0, [r3, #8]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	fa00 f203 	lsl.w	r2, r0, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b10      	cmp	r3, #16
 80010bc:	d003      	beq.n	80010c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010c2:	2b11      	cmp	r3, #17
 80010c4:	d132      	bne.n	800112c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <HAL_ADC_ConfigChannel+0x1e4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d125      	bne.n	800111c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d126      	bne.n	800112c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010ec:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d11a      	bne.n	800112c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_ADC_ConfigChannel+0x1e8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <HAL_ADC_ConfigChannel+0x1ec>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	0c9a      	lsrs	r2, r3, #18
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800110c:	e002      	b.n	8001114 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3b01      	subs	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f9      	bne.n	800110e <HAL_ADC_ConfigChannel+0x1b2>
 800111a:	e007      	b.n	800112c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	f043 0220 	orr.w	r2, r3, #32
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	40012400 	.word	0x40012400
 8001144:	20000000 	.word	0x20000000
 8001148:	431bde83 	.word	0x431bde83

0800114c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b01      	cmp	r3, #1
 8001168:	d039      	beq.n	80011de <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 0201 	orr.w	r2, r2, #1
 8001178:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <ADC_Enable+0x9c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <ADC_Enable+0xa0>)
 8001180:	fba2 2303 	umull	r2, r3, r2, r3
 8001184:	0c9b      	lsrs	r3, r3, #18
 8001186:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001188:	e002      	b.n	8001190 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	3b01      	subs	r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f9      	bne.n	800118a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001196:	f7ff fc29 	bl	80009ec <HAL_GetTick>
 800119a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800119c:	e018      	b.n	80011d0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800119e:	f7ff fc25 	bl	80009ec <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d911      	bls.n	80011d0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b0:	f043 0210 	orr.w	r2, r3, #16
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011bc:	f043 0201 	orr.w	r2, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e007      	b.n	80011e0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d1df      	bne.n	800119e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	431bde83 	.word	0x431bde83

080011f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d127      	bne.n	800125a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800121a:	f7ff fbe7 	bl	80009ec <HAL_GetTick>
 800121e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001220:	e014      	b.n	800124c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001222:	f7ff fbe3 	bl	80009ec <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d90d      	bls.n	800124c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001234:	f043 0210 	orr.w	r2, r3, #16
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001240:	f043 0201 	orr.w	r2, r3, #1
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e007      	b.n	800125c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b01      	cmp	r3, #1
 8001258:	d0e3      	beq.n	8001222 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4906      	ldr	r1, [pc, #24]	; (80012fc <__NVIC_EnableIRQ+0x34>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff90 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff2d 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff42 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff90 	bl	8001354 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5f 	bl	8001300 <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff35 	bl	80012c8 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa2 	bl	80013b8 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e00e      	b.n	80014ae <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	795b      	ldrb	r3, [r3, #5]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d105      	bne.n	80014a6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff f943 	bl	800072c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b087      	sub	sp, #28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2202      	movs	r2, #2
 80014ca:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e00a      	b.n	80014f8 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	441a      	add	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d3f0      	bcc.n	80014e2 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800150e:	693b      	ldr	r3, [r7, #16]
}
 8001510:	4618      	mov	r0, r3
 8001512:	371c      	adds	r7, #28
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
	...

0800151c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800152e:	2b02      	cmp	r3, #2
 8001530:	d005      	beq.n	800153e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2204      	movs	r2, #4
 8001536:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e051      	b.n	80015e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 020e 	bic.w	r2, r2, #14
 800154c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0201 	bic.w	r2, r2, #1
 800155c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a22      	ldr	r2, [pc, #136]	; (80015ec <HAL_DMA_Abort_IT+0xd0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d029      	beq.n	80015bc <HAL_DMA_Abort_IT+0xa0>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <HAL_DMA_Abort_IT+0xd4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d022      	beq.n	80015b8 <HAL_DMA_Abort_IT+0x9c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1f      	ldr	r2, [pc, #124]	; (80015f4 <HAL_DMA_Abort_IT+0xd8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d01a      	beq.n	80015b2 <HAL_DMA_Abort_IT+0x96>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_DMA_Abort_IT+0xdc>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d012      	beq.n	80015ac <HAL_DMA_Abort_IT+0x90>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <HAL_DMA_Abort_IT+0xe0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d00a      	beq.n	80015a6 <HAL_DMA_Abort_IT+0x8a>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <HAL_DMA_Abort_IT+0xe4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d102      	bne.n	80015a0 <HAL_DMA_Abort_IT+0x84>
 800159a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800159e:	e00e      	b.n	80015be <HAL_DMA_Abort_IT+0xa2>
 80015a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015a4:	e00b      	b.n	80015be <HAL_DMA_Abort_IT+0xa2>
 80015a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015aa:	e008      	b.n	80015be <HAL_DMA_Abort_IT+0xa2>
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	e005      	b.n	80015be <HAL_DMA_Abort_IT+0xa2>
 80015b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b6:	e002      	b.n	80015be <HAL_DMA_Abort_IT+0xa2>
 80015b8:	2310      	movs	r3, #16
 80015ba:	e000      	b.n	80015be <HAL_DMA_Abort_IT+0xa2>
 80015bc:	2301      	movs	r3, #1
 80015be:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_DMA_Abort_IT+0xe8>)
 80015c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
    } 
  }
  return status;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40020008 	.word	0x40020008
 80015f0:	4002001c 	.word	0x4002001c
 80015f4:	40020030 	.word	0x40020030
 80015f8:	40020044 	.word	0x40020044
 80015fc:	40020058 	.word	0x40020058
 8001600:	4002006c 	.word	0x4002006c
 8001604:	40020000 	.word	0x40020000

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b08b      	sub	sp, #44	; 0x2c
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	e127      	b.n	800186c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800161c:	2201      	movs	r2, #1
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	429a      	cmp	r2, r3
 8001636:	f040 8116 	bne.w	8001866 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b12      	cmp	r3, #18
 8001640:	d034      	beq.n	80016ac <HAL_GPIO_Init+0xa4>
 8001642:	2b12      	cmp	r3, #18
 8001644:	d80d      	bhi.n	8001662 <HAL_GPIO_Init+0x5a>
 8001646:	2b02      	cmp	r3, #2
 8001648:	d02b      	beq.n	80016a2 <HAL_GPIO_Init+0x9a>
 800164a:	2b02      	cmp	r3, #2
 800164c:	d804      	bhi.n	8001658 <HAL_GPIO_Init+0x50>
 800164e:	2b00      	cmp	r3, #0
 8001650:	d031      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
 8001652:	2b01      	cmp	r3, #1
 8001654:	d01c      	beq.n	8001690 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001656:	e048      	b.n	80016ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001658:	2b03      	cmp	r3, #3
 800165a:	d043      	beq.n	80016e4 <HAL_GPIO_Init+0xdc>
 800165c:	2b11      	cmp	r3, #17
 800165e:	d01b      	beq.n	8001698 <HAL_GPIO_Init+0x90>
          break;
 8001660:	e043      	b.n	80016ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001662:	4a89      	ldr	r2, [pc, #548]	; (8001888 <HAL_GPIO_Init+0x280>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d026      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
 8001668:	4a87      	ldr	r2, [pc, #540]	; (8001888 <HAL_GPIO_Init+0x280>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d806      	bhi.n	800167c <HAL_GPIO_Init+0x74>
 800166e:	4a87      	ldr	r2, [pc, #540]	; (800188c <HAL_GPIO_Init+0x284>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d020      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
 8001674:	4a86      	ldr	r2, [pc, #536]	; (8001890 <HAL_GPIO_Init+0x288>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d01d      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
          break;
 800167a:	e036      	b.n	80016ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800167c:	4a85      	ldr	r2, [pc, #532]	; (8001894 <HAL_GPIO_Init+0x28c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d019      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
 8001682:	4a85      	ldr	r2, [pc, #532]	; (8001898 <HAL_GPIO_Init+0x290>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d016      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
 8001688:	4a84      	ldr	r2, [pc, #528]	; (800189c <HAL_GPIO_Init+0x294>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
          break;
 800168e:	e02c      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	623b      	str	r3, [r7, #32]
          break;
 8001696:	e028      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	3304      	adds	r3, #4
 800169e:	623b      	str	r3, [r7, #32]
          break;
 80016a0:	e023      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	3308      	adds	r3, #8
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e01e      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	330c      	adds	r3, #12
 80016b2:	623b      	str	r3, [r7, #32]
          break;
 80016b4:	e019      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016be:	2304      	movs	r3, #4
 80016c0:	623b      	str	r3, [r7, #32]
          break;
 80016c2:	e012      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016cc:	2308      	movs	r3, #8
 80016ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	611a      	str	r2, [r3, #16]
          break;
 80016d6:	e008      	b.n	80016ea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d8:	2308      	movs	r3, #8
 80016da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	615a      	str	r2, [r3, #20]
          break;
 80016e2:	e002      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2bff      	cmp	r3, #255	; 0xff
 80016ee:	d801      	bhi.n	80016f4 <HAL_GPIO_Init+0xec>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	e001      	b.n	80016f8 <HAL_GPIO_Init+0xf0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3304      	adds	r3, #4
 80016f8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2bff      	cmp	r3, #255	; 0xff
 80016fe:	d802      	bhi.n	8001706 <HAL_GPIO_Init+0xfe>
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	e002      	b.n	800170c <HAL_GPIO_Init+0x104>
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	3b08      	subs	r3, #8
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	210f      	movs	r1, #15
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	401a      	ands	r2, r3
 800171e:	6a39      	ldr	r1, [r7, #32]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	431a      	orrs	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8096 	beq.w	8001866 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800173a:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_GPIO_Init+0x298>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_GPIO_Init+0x298>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6193      	str	r3, [r2, #24]
 8001746:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <HAL_GPIO_Init+0x298>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001752:	4a54      	ldr	r2, [pc, #336]	; (80018a4 <HAL_GPIO_Init+0x29c>)
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	3302      	adds	r3, #2
 800175a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	220f      	movs	r2, #15
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4013      	ands	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4b      	ldr	r2, [pc, #300]	; (80018a8 <HAL_GPIO_Init+0x2a0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x19e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4a      	ldr	r2, [pc, #296]	; (80018ac <HAL_GPIO_Init+0x2a4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x19a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a49      	ldr	r2, [pc, #292]	; (80018b0 <HAL_GPIO_Init+0x2a8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x196>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a48      	ldr	r2, [pc, #288]	; (80018b4 <HAL_GPIO_Init+0x2ac>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x192>
 8001796:	2303      	movs	r3, #3
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x1a0>
 800179a:	2304      	movs	r3, #4
 800179c:	e004      	b.n	80017a8 <HAL_GPIO_Init+0x1a0>
 800179e:	2302      	movs	r3, #2
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_Init+0x1a0>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x1a0>
 80017a6:	2300      	movs	r3, #0
 80017a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017aa:	f002 0203 	and.w	r2, r2, #3
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4093      	lsls	r3, r2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017b8:	493a      	ldr	r1, [pc, #232]	; (80018a4 <HAL_GPIO_Init+0x29c>)
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d2:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4938      	ldr	r1, [pc, #224]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
 80017de:	e006      	b.n	80017ee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e0:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	4933      	ldr	r1, [pc, #204]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	492e      	ldr	r1, [pc, #184]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
 8001806:	e006      	b.n	8001816 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	43db      	mvns	r3, r3
 8001810:	4929      	ldr	r1, [pc, #164]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001812:	4013      	ands	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	4924      	ldr	r1, [pc, #144]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
 800182e:	e006      	b.n	800183e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	43db      	mvns	r3, r3
 8001838:	491f      	ldr	r1, [pc, #124]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 800183a:	4013      	ands	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	491a      	ldr	r1, [pc, #104]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	60cb      	str	r3, [r1, #12]
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	43db      	mvns	r3, r3
 8001860:	4915      	ldr	r1, [pc, #84]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001862:	4013      	ands	r3, r2
 8001864:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	f47f aed0 	bne.w	800161c <HAL_GPIO_Init+0x14>
  }
}
 800187c:	bf00      	nop
 800187e:	372c      	adds	r7, #44	; 0x2c
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	10210000 	.word	0x10210000
 800188c:	10110000 	.word	0x10110000
 8001890:	10120000 	.word	0x10120000
 8001894:	10310000 	.word	0x10310000
 8001898:	10320000 	.word	0x10320000
 800189c:	10220000 	.word	0x10220000
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010000 	.word	0x40010000
 80018a8:	40010800 	.word	0x40010800
 80018ac:	40010c00 	.word	0x40010c00
 80018b0:	40011000 	.word	0x40011000
 80018b4:	40011400 	.word	0x40011400
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d8:	e003      	b.n	80018e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	041a      	lsls	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4013      	ands	r3, r2
 8001904:	041a      	lsls	r2, r3, #16
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43d9      	mvns	r1, r3
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	400b      	ands	r3, r1
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	611a      	str	r2, [r3, #16]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
	...

08001920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e26c      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8087 	beq.w	8001a4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001940:	4b92      	ldr	r3, [pc, #584]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b04      	cmp	r3, #4
 800194a:	d00c      	beq.n	8001966 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800194c:	4b8f      	ldr	r3, [pc, #572]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d112      	bne.n	800197e <HAL_RCC_OscConfig+0x5e>
 8001958:	4b8c      	ldr	r3, [pc, #560]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001964:	d10b      	bne.n	800197e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001966:	4b89      	ldr	r3, [pc, #548]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d06c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x12c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d168      	bne.n	8001a4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e246      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x76>
 8001988:	4b80      	ldr	r3, [pc, #512]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a7f      	ldr	r2, [pc, #508]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 800198e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e02e      	b.n	80019f4 <HAL_RCC_OscConfig+0xd4>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x98>
 800199e:	4b7b      	ldr	r3, [pc, #492]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a7a      	ldr	r2, [pc, #488]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b78      	ldr	r3, [pc, #480]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a77      	ldr	r2, [pc, #476]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e01d      	b.n	80019f4 <HAL_RCC_OscConfig+0xd4>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0xbc>
 80019c2:	4b72      	ldr	r3, [pc, #456]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a71      	ldr	r2, [pc, #452]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6e      	ldr	r2, [pc, #440]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0xd4>
 80019dc:	4b6b      	ldr	r3, [pc, #428]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a6a      	ldr	r2, [pc, #424]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a67      	ldr	r2, [pc, #412]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7fe fff6 	bl	80009ec <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7fe fff2 	bl	80009ec <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1fa      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0xe4>
 8001a22:	e014      	b.n	8001a4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7fe ffe2 	bl	80009ec <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7fe ffde 	bl	80009ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1e6      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x10c>
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d063      	beq.n	8001b22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a5a:	4b4c      	ldr	r3, [pc, #304]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a66:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d11c      	bne.n	8001aac <HAL_RCC_OscConfig+0x18c>
 8001a72:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7e:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_RCC_OscConfig+0x176>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e1ba      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4939      	ldr	r1, [pc, #228]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	e03a      	b.n	8001b22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7fe ff97 	bl	80009ec <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7fe ff93 	bl	80009ec <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e19b      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4927      	ldr	r1, [pc, #156]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
 8001af4:	e015      	b.n	8001b22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7fe ff76 	bl	80009ec <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b04:	f7fe ff72 	bl	80009ec <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e17a      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d03a      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d019      	beq.n	8001b6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_RCC_OscConfig+0x274>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3c:	f7fe ff56 	bl	80009ec <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b44:	f7fe ff52 	bl	80009ec <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e15a      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b62:	2001      	movs	r0, #1
 8001b64:	f000 fada 	bl	800211c <RCC_Delay>
 8001b68:	e01c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b70:	f7fe ff3c 	bl	80009ec <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b76:	e00f      	b.n	8001b98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b78:	f7fe ff38 	bl	80009ec <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d908      	bls.n	8001b98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e140      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	42420000 	.word	0x42420000
 8001b94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	4b9e      	ldr	r3, [pc, #632]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1e9      	bne.n	8001b78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80a6 	beq.w	8001cfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb6:	4b97      	ldr	r3, [pc, #604]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10d      	bne.n	8001bde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	4b94      	ldr	r3, [pc, #592]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a93      	ldr	r2, [pc, #588]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	61d3      	str	r3, [r2, #28]
 8001bce:	4b91      	ldr	r3, [pc, #580]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bde:	4b8e      	ldr	r3, [pc, #568]	; (8001e18 <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d118      	bne.n	8001c1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bea:	4b8b      	ldr	r3, [pc, #556]	; (8001e18 <HAL_RCC_OscConfig+0x4f8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a8a      	ldr	r2, [pc, #552]	; (8001e18 <HAL_RCC_OscConfig+0x4f8>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf6:	f7fe fef9 	bl	80009ec <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfe:	f7fe fef5 	bl	80009ec <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b64      	cmp	r3, #100	; 0x64
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e0fd      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	4b81      	ldr	r3, [pc, #516]	; (8001e18 <HAL_RCC_OscConfig+0x4f8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x312>
 8001c24:	4b7b      	ldr	r3, [pc, #492]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a7a      	ldr	r2, [pc, #488]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	e02d      	b.n	8001c8e <HAL_RCC_OscConfig+0x36e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x334>
 8001c3a:	4b76      	ldr	r3, [pc, #472]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a75      	ldr	r2, [pc, #468]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	6213      	str	r3, [r2, #32]
 8001c46:	4b73      	ldr	r3, [pc, #460]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	4a72      	ldr	r2, [pc, #456]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	f023 0304 	bic.w	r3, r3, #4
 8001c50:	6213      	str	r3, [r2, #32]
 8001c52:	e01c      	b.n	8001c8e <HAL_RCC_OscConfig+0x36e>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d10c      	bne.n	8001c76 <HAL_RCC_OscConfig+0x356>
 8001c5c:	4b6d      	ldr	r3, [pc, #436]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a6c      	ldr	r2, [pc, #432]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	4b6a      	ldr	r3, [pc, #424]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4a69      	ldr	r2, [pc, #420]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6213      	str	r3, [r2, #32]
 8001c74:	e00b      	b.n	8001c8e <HAL_RCC_OscConfig+0x36e>
 8001c76:	4b67      	ldr	r3, [pc, #412]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a66      	ldr	r2, [pc, #408]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	4b64      	ldr	r3, [pc, #400]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4a63      	ldr	r2, [pc, #396]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	f023 0304 	bic.w	r3, r3, #4
 8001c8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d015      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7fe fea9 	bl	80009ec <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7fe fea5 	bl	80009ec <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e0ab      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb4:	4b57      	ldr	r3, [pc, #348]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0ee      	beq.n	8001c9e <HAL_RCC_OscConfig+0x37e>
 8001cc0:	e014      	b.n	8001cec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc2:	f7fe fe93 	bl	80009ec <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7fe fe8f 	bl	80009ec <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e095      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce0:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ee      	bne.n	8001cca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d105      	bne.n	8001cfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf2:	4b48      	ldr	r3, [pc, #288]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a47      	ldr	r2, [pc, #284]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8081 	beq.w	8001e0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d08:	4b42      	ldr	r3, [pc, #264]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d061      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d146      	bne.n	8001daa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1c:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <HAL_RCC_OscConfig+0x4fc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7fe fe63 	bl	80009ec <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7fe fe5f 	bl	80009ec <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e067      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3c:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d108      	bne.n	8001d64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d52:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	492d      	ldr	r1, [pc, #180]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a19      	ldr	r1, [r3, #32]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	430b      	orrs	r3, r1
 8001d76:	4927      	ldr	r1, [pc, #156]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7c:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <HAL_RCC_OscConfig+0x4fc>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7fe fe33 	bl	80009ec <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7fe fe2f 	bl	80009ec <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e037      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x46a>
 8001da8:	e02f      	b.n	8001e0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_RCC_OscConfig+0x4fc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7fe fe1c 	bl	80009ec <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7fe fe18 	bl	80009ec <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e020      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x498>
 8001dd6:	e018      	b.n	8001e0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e013      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	42420060 	.word	0x42420060

08001e20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0d0      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e34:	4b6a      	ldr	r3, [pc, #424]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d910      	bls.n	8001e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 0207 	bic.w	r2, r3, #7
 8001e4a:	4965      	ldr	r1, [pc, #404]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b63      	ldr	r3, [pc, #396]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0b8      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d020      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e94:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4a52      	ldr	r2, [pc, #328]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea0:	4b50      	ldr	r3, [pc, #320]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	494d      	ldr	r1, [pc, #308]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d040      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d115      	bne.n	8001efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e07f      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ede:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e073      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eee:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e06b      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efe:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f023 0203 	bic.w	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4936      	ldr	r1, [pc, #216]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f10:	f7fe fd6c 	bl	80009ec <HAL_GetTick>
 8001f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f18:	f7fe fd68 	bl	80009ec <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e053      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 020c 	and.w	r2, r3, #12
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d1eb      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d210      	bcs.n	8001f70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 0207 	bic.w	r2, r3, #7
 8001f56:	4922      	ldr	r1, [pc, #136]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e032      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4916      	ldr	r1, [pc, #88]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fae:	f000 f821 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc0:	5cd3      	ldrb	r3, [r2, r3]
 8001fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fc6:	4a09      	ldr	r2, [pc, #36]	; (8001fec <HAL_RCC_ClockConfig+0x1cc>)
 8001fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fcca 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	08002eec 	.word	0x08002eec
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff4:	b490      	push	{r4, r7}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ffc:	1d3c      	adds	r4, r7, #4
 8001ffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800201e:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b04      	cmp	r3, #4
 800202c:	d002      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x40>
 800202e:	2b08      	cmp	r3, #8
 8002030:	d003      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x46>
 8002032:	e02d      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002034:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002036:	623b      	str	r3, [r7, #32]
      break;
 8002038:	e02d      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	0c9b      	lsrs	r3, r3, #18
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002046:	4413      	add	r3, r2
 8002048:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800204c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	0c5b      	lsrs	r3, r3, #17
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002066:	4413      	add	r3, r2
 8002068:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800206c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002072:	fb02 f203 	mul.w	r2, r2, r3
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	e004      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	623b      	str	r3, [r7, #32]
      break;
 800208e:	e002      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002092:	623b      	str	r3, [r7, #32]
      break;
 8002094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002096:	6a3b      	ldr	r3, [r7, #32]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3728      	adds	r7, #40	; 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bc90      	pop	{r4, r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	08002ec4 	.word	0x08002ec4
 80020a8:	08002ed4 	.word	0x08002ed4
 80020ac:	40021000 	.word	0x40021000
 80020b0:	007a1200 	.word	0x007a1200
 80020b4:	003d0900 	.word	0x003d0900

080020b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020bc:	4b02      	ldr	r3, [pc, #8]	; (80020c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	20000000 	.word	0x20000000

080020cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d0:	f7ff fff2 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020d4:	4601      	mov	r1, r0
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4a03      	ldr	r2, [pc, #12]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08002efc 	.word	0x08002efc

080020f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020fc:	4601      	mov	r1, r0
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	0adb      	lsrs	r3, r3, #11
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	4a03      	ldr	r2, [pc, #12]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	08002efc 	.word	0x08002efc

0800211c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <RCC_Delay+0x34>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <RCC_Delay+0x38>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0a5b      	lsrs	r3, r3, #9
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002138:	bf00      	nop
  }
  while (Delay --);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1e5a      	subs	r2, r3, #1
 800213e:	60fa      	str	r2, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f9      	bne.n	8002138 <RCC_Delay+0x1c>
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000
 8002154:	10624dd3 	.word	0x10624dd3

08002158 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d07d      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002178:	4b4f      	ldr	r3, [pc, #316]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10d      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b4c      	ldr	r3, [pc, #304]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	4a4b      	ldr	r2, [pc, #300]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	61d3      	str	r3, [r2, #28]
 8002190:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219c:	2301      	movs	r3, #1
 800219e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	4b46      	ldr	r3, [pc, #280]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d118      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ac:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a42      	ldr	r2, [pc, #264]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b8:	f7fe fc18 	bl	80009ec <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021be:	e008      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c0:	f7fe fc14 	bl	80009ec <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e06d      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021de:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d02e      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d027      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002204:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002206:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800220c:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002212:	4a29      	ldr	r2, [pc, #164]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d014      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fbe3 	bl	80009ec <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002228:	e00a      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7fe fbdf 	bl	80009ec <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e036      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0ee      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4917      	ldr	r1, [pc, #92]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	4313      	orrs	r3, r2
 800225c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800225e:	7dfb      	ldrb	r3, [r7, #23]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d105      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	490b      	ldr	r1, [pc, #44]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	4904      	ldr	r1, [pc, #16]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
 80022c0:	42420440 	.word	0x42420440

080022c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b08d      	sub	sp, #52	; 0x34
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022cc:	4b55      	ldr	r3, [pc, #340]	; (8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80022ce:	f107 040c 	add.w	r4, r7, #12
 80022d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022d8:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	2300      	movs	r3, #0
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	2300      	movs	r3, #0
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d07f      	beq.n	80023f8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d002      	beq.n	8002302 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d048      	beq.n	8002392 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002300:	e08b      	b.n	800241a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002308:	4b48      	ldr	r3, [pc, #288]	; (800242c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d07f      	beq.n	8002414 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	0c9b      	lsrs	r3, r3, #18
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002320:	4413      	add	r3, r2
 8002322:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002326:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d018      	beq.n	8002364 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002332:	4b3e      	ldr	r3, [pc, #248]	; (800242c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	0c5b      	lsrs	r3, r3, #17
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002340:	4413      	add	r3, r2
 8002342:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00d      	beq.n	800236e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002352:	4a37      	ldr	r2, [pc, #220]	; (8002430 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	fbb2 f2f3 	udiv	r2, r2, r3
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002362:	e004      	b.n	800236e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	4a33      	ldr	r2, [pc, #204]	; (8002434 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800236e:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d102      	bne.n	8002382 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002380:	e048      	b.n	8002414 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4a2c      	ldr	r2, [pc, #176]	; (8002438 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	085b      	lsrs	r3, r3, #1
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002390:	e040      	b.n	8002414 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a2:	d108      	bne.n	80023b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80023ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b4:	e01f      	b.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c0:	d109      	bne.n	80023d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80023ce:	f649 4340 	movw	r3, #40000	; 0x9c40
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d4:	e00f      	b.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023e0:	d11a      	bne.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d014      	beq.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80023ee:	f24f 4324 	movw	r3, #62500	; 0xf424
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80023f4:	e010      	b.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80023f6:	e00f      	b.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80023f8:	f7ff fe7c 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	0b9b      	lsrs	r3, r3, #14
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	3301      	adds	r3, #1
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002412:	e002      	b.n	800241a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002414:	bf00      	nop
 8002416:	e000      	b.n	800241a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002418:	bf00      	nop
    }
  }
  return (frequency);
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800241c:	4618      	mov	r0, r3
 800241e:	3734      	adds	r7, #52	; 0x34
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}
 8002424:	08002ed8 	.word	0x08002ed8
 8002428:	08002ee8 	.word	0x08002ee8
 800242c:	40021000 	.word	0x40021000
 8002430:	007a1200 	.word	0x007a1200
 8002434:	003d0900 	.word	0x003d0900
 8002438:	aaaaaaab 	.word	0xaaaaaaab

0800243c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e03f      	b.n	80024ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe f980 	bl	8000768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2224      	movs	r2, #36	; 0x24
 800246c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800247e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fb83 	bl	8002b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b08a      	sub	sp, #40	; 0x28
 80024da:	af02      	add	r7, sp, #8
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d17c      	bne.n	80025f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_UART_Transmit+0x2c>
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e075      	b.n	80025f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_UART_Transmit+0x3e>
 8002510:	2302      	movs	r3, #2
 8002512:	e06e      	b.n	80025f2 <HAL_UART_Transmit+0x11c>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2221      	movs	r2, #33	; 0x21
 8002526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800252a:	f7fe fa5f 	bl	80009ec <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	88fa      	ldrh	r2, [r7, #6]
 800253a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002544:	d108      	bne.n	8002558 <HAL_UART_Transmit+0x82>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d104      	bne.n	8002558 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e003      	b.n	8002560 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002568:	e02a      	b.n	80025c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	2180      	movs	r1, #128	; 0x80
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f9a7 	bl	80028c8 <UART_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e036      	b.n	80025f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10b      	bne.n	80025a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002598:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	3302      	adds	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	e007      	b.n	80025b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	3301      	adds	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1cf      	bne.n	800256a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2200      	movs	r2, #0
 80025d2:	2140      	movs	r1, #64	; 0x40
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f977 	bl	80028c8 <UART_WaitOnFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e006      	b.n	80025f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
  }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	4613      	mov	r3, r2
 8002606:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b20      	cmp	r3, #32
 8002612:	d140      	bne.n	8002696 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_UART_Receive_IT+0x26>
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e039      	b.n	8002698 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_UART_Receive_IT+0x38>
 800262e:	2302      	movs	r3, #2
 8002630:	e032      	b.n	8002698 <HAL_UART_Receive_IT+0x9e>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2222      	movs	r2, #34	; 0x22
 8002656:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002670:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0220 	orr.w	r2, r2, #32
 8002690:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002696:	2302      	movs	r3, #2
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10d      	bne.n	80026f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_UART_IRQHandler+0x52>
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f9cc 	bl	8002a8c <UART_Receive_IT>
      return;
 80026f4:	e0d1      	b.n	800289a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80b0 	beq.w	800285e <HAL_UART_IRQHandler+0x1ba>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <HAL_UART_IRQHandler+0x70>
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80a5 	beq.w	800285e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_UART_IRQHandler+0x90>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_UART_IRQHandler+0xb0>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	f043 0202 	orr.w	r2, r3, #2
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_UART_IRQHandler+0xd0>
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00f      	beq.n	800279e <HAL_UART_IRQHandler+0xfa>
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b00      	cmp	r3, #0
 8002786:	d104      	bne.n	8002792 <HAL_UART_IRQHandler+0xee>
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	f043 0208 	orr.w	r2, r3, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d078      	beq.n	8002898 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_UART_IRQHandler+0x11c>
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f966 	bl	8002a8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_UART_IRQHandler+0x144>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d031      	beq.n	800284c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f8b7 	bl	800295c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d023      	beq.n	8002844 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002818:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <HAL_UART_IRQHandler+0x1fc>)
 800281a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fe7b 	bl	800151c <HAL_DMA_Abort_IT>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d016      	beq.n	800285a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002836:	4610      	mov	r0, r2
 8002838:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283a:	e00e      	b.n	800285a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f83a 	bl	80028b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002842:	e00a      	b.n	800285a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f836 	bl	80028b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284a:	e006      	b.n	800285a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f832 	bl	80028b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002858:	e01e      	b.n	8002898 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285a:	bf00      	nop
    return;
 800285c:	e01c      	b.n	8002898 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_UART_IRQHandler+0x1d6>
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f8a3 	bl	80029be <UART_Transmit_IT>
    return;
 8002878:	e00f      	b.n	800289a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_UART_IRQHandler+0x1f6>
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8e4 	bl	8002a5c <UART_EndTransmit_IT>
    return;
 8002894:	bf00      	nop
 8002896:	e000      	b.n	800289a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002898:	bf00      	nop
  }
}
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	08002997 	.word	0x08002997

080028a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d8:	e02c      	b.n	8002934 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d028      	beq.n	8002934 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80028e8:	f7fe f880 	bl	80009ec <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d21d      	bcs.n	8002934 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002906:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e00f      	b.n	8002954 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4013      	ands	r3, r2
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	429a      	cmp	r2, r3
 8002950:	d0c3      	beq.n	80028da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002972:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff ff80 	bl	80028b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b21      	cmp	r3, #33	; 0x21
 80029d0:	d13e      	bne.n	8002a50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029da:	d114      	bne.n	8002a06 <UART_Transmit_IT+0x48>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d110      	bne.n	8002a06 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	1c9a      	adds	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	621a      	str	r2, [r3, #32]
 8002a04:	e008      	b.n	8002a18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	1c59      	adds	r1, r3, #1
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6211      	str	r1, [r2, #32]
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4619      	mov	r1, r3
 8002a26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10f      	bne.n	8002a4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff11 	bl	80028a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b22      	cmp	r3, #34	; 0x22
 8002a9e:	d170      	bne.n	8002b82 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa8:	d117      	bne.n	8002ada <UART_Receive_IT+0x4e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d113      	bne.n	8002ada <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad2:	1c9a      	adds	r2, r3, #2
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad8:	e026      	b.n	8002b28 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aec:	d007      	beq.n	8002afe <UART_Receive_IT+0x72>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <UART_Receive_IT+0x80>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	e008      	b.n	8002b1e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4619      	mov	r1, r3
 8002b36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d120      	bne.n	8002b7e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0220 	bic.w	r2, r2, #32
 8002b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7fd fcb3 	bl	80004e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e002      	b.n	8002b84 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bc6:	f023 030c 	bic.w	r3, r3, #12
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2c      	ldr	r2, [pc, #176]	; (8002ca0 <UART_SetConfig+0x114>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d103      	bne.n	8002bfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bf4:	f7ff fa7e 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	e002      	b.n	8002c02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bfc:	f7ff fa66 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 8002c00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009a      	lsls	r2, r3, #2
 8002c0c:	441a      	add	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	4a22      	ldr	r2, [pc, #136]	; (8002ca4 <UART_SetConfig+0x118>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	0119      	lsls	r1, r3, #4
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009a      	lsls	r2, r3, #2
 8002c2c:	441a      	add	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c38:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <UART_SetConfig+0x118>)
 8002c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2064      	movs	r0, #100	; 0x64
 8002c42:	fb00 f303 	mul.w	r3, r0, r3
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	3332      	adds	r3, #50	; 0x32
 8002c4c:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <UART_SetConfig+0x118>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c58:	4419      	add	r1, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009a      	lsls	r2, r3, #2
 8002c64:	441a      	add	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <UART_SetConfig+0x118>)
 8002c72:	fba3 0302 	umull	r0, r3, r3, r2
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2064      	movs	r0, #100	; 0x64
 8002c7a:	fb00 f303 	mul.w	r3, r0, r3
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	3332      	adds	r3, #50	; 0x32
 8002c84:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <UART_SetConfig+0x118>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	440a      	add	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	51eb851f 	.word	0x51eb851f

08002ca8 <__errno>:
 8002ca8:	4b01      	ldr	r3, [pc, #4]	; (8002cb0 <__errno+0x8>)
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	2000000c 	.word	0x2000000c

08002cb4 <__libc_init_array>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	2500      	movs	r5, #0
 8002cb8:	4e0c      	ldr	r6, [pc, #48]	; (8002cec <__libc_init_array+0x38>)
 8002cba:	4c0d      	ldr	r4, [pc, #52]	; (8002cf0 <__libc_init_array+0x3c>)
 8002cbc:	1ba4      	subs	r4, r4, r6
 8002cbe:	10a4      	asrs	r4, r4, #2
 8002cc0:	42a5      	cmp	r5, r4
 8002cc2:	d109      	bne.n	8002cd8 <__libc_init_array+0x24>
 8002cc4:	f000 f8ee 	bl	8002ea4 <_init>
 8002cc8:	2500      	movs	r5, #0
 8002cca:	4e0a      	ldr	r6, [pc, #40]	; (8002cf4 <__libc_init_array+0x40>)
 8002ccc:	4c0a      	ldr	r4, [pc, #40]	; (8002cf8 <__libc_init_array+0x44>)
 8002cce:	1ba4      	subs	r4, r4, r6
 8002cd0:	10a4      	asrs	r4, r4, #2
 8002cd2:	42a5      	cmp	r5, r4
 8002cd4:	d105      	bne.n	8002ce2 <__libc_init_array+0x2e>
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cdc:	4798      	blx	r3
 8002cde:	3501      	adds	r5, #1
 8002ce0:	e7ee      	b.n	8002cc0 <__libc_init_array+0xc>
 8002ce2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ce6:	4798      	blx	r3
 8002ce8:	3501      	adds	r5, #1
 8002cea:	e7f2      	b.n	8002cd2 <__libc_init_array+0x1e>
 8002cec:	08002f04 	.word	0x08002f04
 8002cf0:	08002f04 	.word	0x08002f04
 8002cf4:	08002f04 	.word	0x08002f04
 8002cf8:	08002f08 	.word	0x08002f08

08002cfc <memset>:
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4402      	add	r2, r0
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d100      	bne.n	8002d06 <memset+0xa>
 8002d04:	4770      	bx	lr
 8002d06:	f803 1b01 	strb.w	r1, [r3], #1
 8002d0a:	e7f9      	b.n	8002d00 <memset+0x4>

08002d0c <srand>:
 8002d0c:	b538      	push	{r3, r4, r5, lr}
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <srand+0x38>)
 8002d10:	4605      	mov	r5, r0
 8002d12:	681c      	ldr	r4, [r3, #0]
 8002d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d16:	b97b      	cbnz	r3, 8002d38 <srand+0x2c>
 8002d18:	2018      	movs	r0, #24
 8002d1a:	f000 f84f 	bl	8002dbc <malloc>
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <srand+0x3c>)
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <srand+0x40>)
 8002d22:	63a0      	str	r0, [r4, #56]	; 0x38
 8002d24:	e9c0 2300 	strd	r2, r3, [r0]
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <srand+0x44>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	6083      	str	r3, [r0, #8]
 8002d2e:	230b      	movs	r3, #11
 8002d30:	8183      	strh	r3, [r0, #12]
 8002d32:	2300      	movs	r3, #0
 8002d34:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d3c:	611d      	str	r5, [r3, #16]
 8002d3e:	615a      	str	r2, [r3, #20]
 8002d40:	bd38      	pop	{r3, r4, r5, pc}
 8002d42:	bf00      	nop
 8002d44:	2000000c 	.word	0x2000000c
 8002d48:	abcd330e 	.word	0xabcd330e
 8002d4c:	e66d1234 	.word	0xe66d1234
 8002d50:	0005deec 	.word	0x0005deec

08002d54 <rand>:
 8002d54:	b538      	push	{r3, r4, r5, lr}
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <rand+0x50>)
 8002d58:	681c      	ldr	r4, [r3, #0]
 8002d5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d5c:	b97b      	cbnz	r3, 8002d7e <rand+0x2a>
 8002d5e:	2018      	movs	r0, #24
 8002d60:	f000 f82c 	bl	8002dbc <malloc>
 8002d64:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <rand+0x54>)
 8002d66:	4b11      	ldr	r3, [pc, #68]	; (8002dac <rand+0x58>)
 8002d68:	63a0      	str	r0, [r4, #56]	; 0x38
 8002d6a:	e9c0 2300 	strd	r2, r3, [r0]
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <rand+0x5c>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	6083      	str	r3, [r0, #8]
 8002d74:	230b      	movs	r3, #11
 8002d76:	8183      	strh	r3, [r0, #12]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002d7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002d80:	480c      	ldr	r0, [pc, #48]	; (8002db4 <rand+0x60>)
 8002d82:	690a      	ldr	r2, [r1, #16]
 8002d84:	694b      	ldr	r3, [r1, #20]
 8002d86:	4350      	muls	r0, r2
 8002d88:	4c0b      	ldr	r4, [pc, #44]	; (8002db8 <rand+0x64>)
 8002d8a:	fb04 0003 	mla	r0, r4, r3, r0
 8002d8e:	fba2 2304 	umull	r2, r3, r2, r4
 8002d92:	4403      	add	r3, r0
 8002d94:	1c54      	adds	r4, r2, #1
 8002d96:	f143 0500 	adc.w	r5, r3, #0
 8002d9a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8002d9e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
 8002da4:	2000000c 	.word	0x2000000c
 8002da8:	abcd330e 	.word	0xabcd330e
 8002dac:	e66d1234 	.word	0xe66d1234
 8002db0:	0005deec 	.word	0x0005deec
 8002db4:	5851f42d 	.word	0x5851f42d
 8002db8:	4c957f2d 	.word	0x4c957f2d

08002dbc <malloc>:
 8002dbc:	4b02      	ldr	r3, [pc, #8]	; (8002dc8 <malloc+0xc>)
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	f000 b803 	b.w	8002dcc <_malloc_r>
 8002dc6:	bf00      	nop
 8002dc8:	2000000c 	.word	0x2000000c

08002dcc <_malloc_r>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	1ccd      	adds	r5, r1, #3
 8002dd0:	f025 0503 	bic.w	r5, r5, #3
 8002dd4:	3508      	adds	r5, #8
 8002dd6:	2d0c      	cmp	r5, #12
 8002dd8:	bf38      	it	cc
 8002dda:	250c      	movcc	r5, #12
 8002ddc:	2d00      	cmp	r5, #0
 8002dde:	4606      	mov	r6, r0
 8002de0:	db01      	blt.n	8002de6 <_malloc_r+0x1a>
 8002de2:	42a9      	cmp	r1, r5
 8002de4:	d903      	bls.n	8002dee <_malloc_r+0x22>
 8002de6:	230c      	movs	r3, #12
 8002de8:	6033      	str	r3, [r6, #0]
 8002dea:	2000      	movs	r0, #0
 8002dec:	bd70      	pop	{r4, r5, r6, pc}
 8002dee:	f000 f857 	bl	8002ea0 <__malloc_lock>
 8002df2:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <_malloc_r+0xac>)
 8002df4:	6814      	ldr	r4, [r2, #0]
 8002df6:	4621      	mov	r1, r4
 8002df8:	b991      	cbnz	r1, 8002e20 <_malloc_r+0x54>
 8002dfa:	4c20      	ldr	r4, [pc, #128]	; (8002e7c <_malloc_r+0xb0>)
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	b91b      	cbnz	r3, 8002e08 <_malloc_r+0x3c>
 8002e00:	4630      	mov	r0, r6
 8002e02:	f000 f83d 	bl	8002e80 <_sbrk_r>
 8002e06:	6020      	str	r0, [r4, #0]
 8002e08:	4629      	mov	r1, r5
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	f000 f838 	bl	8002e80 <_sbrk_r>
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	d124      	bne.n	8002e5e <_malloc_r+0x92>
 8002e14:	230c      	movs	r3, #12
 8002e16:	4630      	mov	r0, r6
 8002e18:	6033      	str	r3, [r6, #0]
 8002e1a:	f000 f842 	bl	8002ea2 <__malloc_unlock>
 8002e1e:	e7e4      	b.n	8002dea <_malloc_r+0x1e>
 8002e20:	680b      	ldr	r3, [r1, #0]
 8002e22:	1b5b      	subs	r3, r3, r5
 8002e24:	d418      	bmi.n	8002e58 <_malloc_r+0x8c>
 8002e26:	2b0b      	cmp	r3, #11
 8002e28:	d90f      	bls.n	8002e4a <_malloc_r+0x7e>
 8002e2a:	600b      	str	r3, [r1, #0]
 8002e2c:	18cc      	adds	r4, r1, r3
 8002e2e:	50cd      	str	r5, [r1, r3]
 8002e30:	4630      	mov	r0, r6
 8002e32:	f000 f836 	bl	8002ea2 <__malloc_unlock>
 8002e36:	f104 000b 	add.w	r0, r4, #11
 8002e3a:	1d23      	adds	r3, r4, #4
 8002e3c:	f020 0007 	bic.w	r0, r0, #7
 8002e40:	1ac3      	subs	r3, r0, r3
 8002e42:	d0d3      	beq.n	8002dec <_malloc_r+0x20>
 8002e44:	425a      	negs	r2, r3
 8002e46:	50e2      	str	r2, [r4, r3]
 8002e48:	e7d0      	b.n	8002dec <_malloc_r+0x20>
 8002e4a:	684b      	ldr	r3, [r1, #4]
 8002e4c:	428c      	cmp	r4, r1
 8002e4e:	bf16      	itet	ne
 8002e50:	6063      	strne	r3, [r4, #4]
 8002e52:	6013      	streq	r3, [r2, #0]
 8002e54:	460c      	movne	r4, r1
 8002e56:	e7eb      	b.n	8002e30 <_malloc_r+0x64>
 8002e58:	460c      	mov	r4, r1
 8002e5a:	6849      	ldr	r1, [r1, #4]
 8002e5c:	e7cc      	b.n	8002df8 <_malloc_r+0x2c>
 8002e5e:	1cc4      	adds	r4, r0, #3
 8002e60:	f024 0403 	bic.w	r4, r4, #3
 8002e64:	42a0      	cmp	r0, r4
 8002e66:	d005      	beq.n	8002e74 <_malloc_r+0xa8>
 8002e68:	1a21      	subs	r1, r4, r0
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f000 f808 	bl	8002e80 <_sbrk_r>
 8002e70:	3001      	adds	r0, #1
 8002e72:	d0cf      	beq.n	8002e14 <_malloc_r+0x48>
 8002e74:	6025      	str	r5, [r4, #0]
 8002e76:	e7db      	b.n	8002e30 <_malloc_r+0x64>
 8002e78:	200000d8 	.word	0x200000d8
 8002e7c:	200000dc 	.word	0x200000dc

08002e80 <_sbrk_r>:
 8002e80:	b538      	push	{r3, r4, r5, lr}
 8002e82:	2300      	movs	r3, #0
 8002e84:	4c05      	ldr	r4, [pc, #20]	; (8002e9c <_sbrk_r+0x1c>)
 8002e86:	4605      	mov	r5, r0
 8002e88:	4608      	mov	r0, r1
 8002e8a:	6023      	str	r3, [r4, #0]
 8002e8c:	f7fd fcf4 	bl	8000878 <_sbrk>
 8002e90:	1c43      	adds	r3, r0, #1
 8002e92:	d102      	bne.n	8002e9a <_sbrk_r+0x1a>
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	b103      	cbz	r3, 8002e9a <_sbrk_r+0x1a>
 8002e98:	602b      	str	r3, [r5, #0]
 8002e9a:	bd38      	pop	{r3, r4, r5, pc}
 8002e9c:	20000160 	.word	0x20000160

08002ea0 <__malloc_lock>:
 8002ea0:	4770      	bx	lr

08002ea2 <__malloc_unlock>:
 8002ea2:	4770      	bx	lr

08002ea4 <_init>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	bf00      	nop
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr

08002eb0 <_fini>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr
